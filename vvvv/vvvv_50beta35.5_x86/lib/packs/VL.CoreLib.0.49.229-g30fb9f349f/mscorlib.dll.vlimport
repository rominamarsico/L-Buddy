{
  "Version": 2,
  "Types": [
    {
      "TypeAttribute": {
        "Name": "BitConverter",
        "Category": "System",
        "Help": "Converts base data types to an array of bytes, and an array of bytes to base data types.",
        "ImportedHelp": "<member name=\"T:System.BitConverter\">\r\n  <summary>Converts base data types to an array of bytes, and an array of bytes to base data types.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Float64ToInt64Bits",
            "Category": "System",
            "Help": "Converts the specified double-precision floating point number to a 64-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.DoubleToInt64Bits(System.Double)\">\r\n  <summary>Converts the specified double-precision floating point number to a 64-bit signed integer.</summary>\r\n  <returns>A 64-bit signed integer whose value is equivalent to <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "A 64-bit signed integer whose value is equivalent to Value.",
              "ImportedHelp": "<returns>A 64-bit signed integer whose value is equivalent to <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DoubleToInt64Bits"
        },
        {
          "NodeAttribute": {
            "Name": "GetBooleanBytes",
            "Category": "System",
            "Help": "Returns the specified Boolean value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Boolean)\">\r\n  <summary>Returns the specified Boolean value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 1.</returns>\r\n  <param name=\"value\">A Boolean value. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Boolean",
              "PinAttribute": {
                "Help": "A Boolean value.",
                "ImportedHelp": "<param name=\"value\">A Boolean value. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 1.",
              "ImportedHelp": "<returns>An array of bytes with length 1.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetCharBytes",
            "Category": "System",
            "Help": "Returns the specified Unicode character value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Char)\">\r\n  <summary>Returns the specified Unicode character value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 2.</returns>\r\n  <param name=\"value\">A character to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A character to convert.",
                "ImportedHelp": "<param name=\"value\">A character to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 2.",
              "ImportedHelp": "<returns>An array of bytes with length 2.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetFloat32Bytes",
            "Category": "System",
            "Help": "Returns the specified single-precision floating point value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Single)\">\r\n  <summary>Returns the specified single-precision floating point value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 4.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 4.",
              "ImportedHelp": "<returns>An array of bytes with length 4.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetFloat64Bytes",
            "Category": "System",
            "Help": "Returns the specified double-precision floating point value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Double)\">\r\n  <summary>Returns the specified double-precision floating point value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 8.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 8.",
              "ImportedHelp": "<returns>An array of bytes with length 8.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetInt16Bytes",
            "Category": "System",
            "Help": "Returns the specified 16-bit signed integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Int16)\">\r\n  <summary>Returns the specified 16-bit signed integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 2.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int16",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 2.",
              "ImportedHelp": "<returns>An array of bytes with length 2.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetInt32Bytes",
            "Category": "System",
            "Help": "Returns the specified 32-bit signed integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Int32)\">\r\n  <summary>Returns the specified 32-bit signed integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 4.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 4.",
              "ImportedHelp": "<returns>An array of bytes with length 4.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetInt64Bytes",
            "Category": "System",
            "Help": "Returns the specified 64-bit signed integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.Int64)\">\r\n  <summary>Returns the specified 64-bit signed integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 8.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 8.",
              "ImportedHelp": "<returns>An array of bytes with length 8.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetUInt16Bytes",
            "Category": "System",
            "Help": "Returns the specified 16-bit unsigned integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.UInt16)\">\r\n  <summary>Returns the specified 16-bit unsigned integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 2.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.UInt16",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 2.",
              "ImportedHelp": "<returns>An array of bytes with length 2.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetUInt32Bytes",
            "Category": "System",
            "Help": "Returns the specified 32-bit unsigned integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.UInt32)\">\r\n  <summary>Returns the specified 32-bit unsigned integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 4.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.UInt32",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 4.",
              "ImportedHelp": "<returns>An array of bytes with length 4.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "GetUInt64Bytes",
            "Category": "System",
            "Help": "Returns the specified 64-bit unsigned integer value as an array of bytes.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.GetBytes(System.UInt64)\">\r\n  <summary>Returns the specified 64-bit unsigned integer value as an array of bytes.</summary>\r\n  <returns>An array of bytes with length 8.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.UInt64",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Byte[]",
            "PinAttribute": {
              "Help": "An array of bytes with length 8.",
              "ImportedHelp": "<returns>An array of bytes with length 8.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBytes"
        },
        {
          "NodeAttribute": {
            "Name": "Int64BitsToFloat64",
            "Category": "System",
            "Help": "Converts the specified 64-bit signed integer to a double-precision floating point number.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.Int64BitsToDouble(System.Int64)\">\r\n  <summary>Converts the specified 64-bit signed integer to a double-precision floating point number.</summary>\r\n  <returns>A double-precision floating point number whose value is equivalent to <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">The number to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "The number to convert.",
                "ImportedHelp": "<param name=\"value\">The number to convert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "A double-precision floating point number whose value is equivalent to Value.",
              "ImportedHelp": "<returns>A double-precision floating point number whose value is equivalent to <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Int64BitsToDouble"
        },
        {
          "NodeAttribute": {
            "Name": "IsLittleEndian",
            "Category": "System",
            "Help": "Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.",
            "ImportedHelp": "<member name=\"F:System.BitConverter.IsLittleEndian\">\r\n  <summary>Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "IsLittleEndian"
        },
        {
          "NodeAttribute": {
            "Name": "ToBoolean",
            "Category": "System",
            "Help": "Returns a Boolean value converted from one byte at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)\">\r\n  <summary>Returns a Boolean value converted from one byte at a specified position in a byte array.</summary>\r\n  <returns>true if the byte at <paramref name=\"startIndex\" /> in <paramref name=\"value\" /> is nonzero; otherwise, false.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the byte at Start Index in Value is nonzero; otherwise, false.",
              "ImportedHelp": "<returns>true if the byte at <paramref name=\"startIndex\" /> in <paramref name=\"value\" /> is nonzero; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToBoolean"
        },
        {
          "NodeAttribute": {
            "Name": "ToChar",
            "Category": "System",
            "Help": "Returns a Unicode character converted from two bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToChar(System.Byte[],System.Int32)\">\r\n  <summary>Returns a Unicode character converted from two bytes at a specified position in a byte array.</summary>\r\n  <returns>A character formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> equals the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array.",
                "ImportedHelp": "<param name=\"value\">An array. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Char",
            "PinAttribute": {
              "Help": "A character formed by two bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A character formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToChar"
        },
        {
          "NodeAttribute": {
            "Name": "ToFloat32",
            "Category": "System",
            "Help": "Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToSingle(System.Byte[],System.Int32)\">\r\n  <summary>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</summary>\r\n  <returns>A single-precision floating point number formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 3, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "A single-precision floating point number formed by four bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A single-precision floating point number formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToSingle"
        },
        {
          "NodeAttribute": {
            "Name": "ToFloat64",
            "Category": "System",
            "Help": "Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToDouble(System.Byte[],System.Int32)\">\r\n  <summary>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</summary>\r\n  <returns>A double precision floating point number formed by eight bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 7, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "A double precision floating point number formed by eight bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A double precision floating point number formed by eight bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToDouble"
        },
        {
          "NodeAttribute": {
            "Name": "ToInt16",
            "Category": "System",
            "Help": "Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToInt16(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</summary>\r\n  <returns>A 16-bit signed integer formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> equals the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int16",
            "PinAttribute": {
              "Help": "A 16-bit signed integer formed by two bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 16-bit signed integer formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToInt16"
        },
        {
          "NodeAttribute": {
            "Name": "ToInt32",
            "Category": "System",
            "Help": "Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToInt32(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</summary>\r\n  <returns>A 32-bit signed integer formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 3, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A 32-bit signed integer formed by four bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 32-bit signed integer formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToInt32"
        },
        {
          "NodeAttribute": {
            "Name": "ToInt64",
            "Category": "System",
            "Help": "Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToInt64(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</summary>\r\n  <returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 7, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "A 64-bit signed integer formed by eight bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 64-bit signed integer formed by eight bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToInt64"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Hex",
            "Category": "System",
            "Help": "Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToString(System.Byte[])\">\r\n  <summary>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</summary>\r\n  <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in Value; for example, \"7F-2C-4A-00\".",
              "ImportedHelp": "<returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Hex Index",
            "Category": "System",
            "Help": "Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToString(System.Byte[],System.Int32)\">\r\n  <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>\r\n  <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of Value; for example, \"7F-2C-4A-00\".",
              "ImportedHelp": "<returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Hex Index Length",
            "Category": "System",
            "Help": "Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\">\r\n  <summary>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</summary>\r\n  <returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <param name=\"length\">The number of array elements in <paramref name=\"value\" /> to convert. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> or <paramref name=\"length\" /> is less than zero.-or-<paramref name=\"startIndex\" /> is greater than zero and is greater than or equal to the length of <paramref name=\"value\" />.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">The combination of <paramref name=\"startIndex\" /> and <paramref name=\"length\" /> does not specify a position within <paramref name=\"value\" />; that is, the <paramref name=\"startIndex\" /> parameter is greater than the length of <paramref name=\"value\" /> minus the <paramref name=\"length\" /> parameter.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of array elements in Value to convert.",
                "ImportedHelp": "<param name=\"length\">The number of array elements in <paramref name=\"value\" /> to convert. </param>"
              },
              "DotNetName": "length"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of Value; for example, \"7F-2C-4A-00\".",
              "ImportedHelp": "<returns>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <paramref name=\"value\" />; for example, \"7F-2C-4A-00\".</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToUInt16",
            "Category": "System",
            "Help": "Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</summary>\r\n  <returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">The array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> equals the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "The array of bytes.",
                "ImportedHelp": "<param name=\"value\">The array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.UInt16",
            "PinAttribute": {
              "Help": "A 16-bit unsigned integer formed by two bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 16-bit unsigned integer formed by two bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUInt16"
        },
        {
          "NodeAttribute": {
            "Name": "ToUInt32",
            "Category": "System",
            "Help": "Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</summary>\r\n  <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 3, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.UInt32",
            "PinAttribute": {
              "Help": "A 32-bit unsigned integer formed by four bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUInt32"
        },
        {
          "NodeAttribute": {
            "Name": "ToUInt64",
            "Category": "System",
            "Help": "Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.",
            "ImportedHelp": "<member name=\"M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)\">\r\n  <summary>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</summary>\r\n  <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">An array of bytes. </param>\r\n  <param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"startIndex\" /> is greater than or equal to the length of <paramref name=\"value\" /> minus 7, and is less than or equal to the length of <paramref name=\"value\" /> minus 1.</exception>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of <paramref name=\"value\" /> minus 1. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Byte[]",
              "PinAttribute": {
                "Help": "An array of bytes.",
                "ImportedHelp": "<param name=\"value\">An array of bytes. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position within Value.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position within <paramref name=\"value\" />. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.UInt64",
            "PinAttribute": {
              "Help": "A 64-bit unsigned integer formed by the eight bytes beginning at Start Index.",
              "ImportedHelp": "<returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUInt64"
        }
      ],
      "DotNetName": "System.BitConverter"
    },
    {
      "TypeAttribute": {
        "Name": "Boolean",
        "Category": "Primitive",
        "Help": "Represents a Boolean (true or false) value.",
        "ImportedHelp": "<member name=\"T:System.Boolean\">\r\n  <summary>Represents a Boolean (true or false) value.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "FalseString",
            "Help": "Represents the Boolean value false as a string. This field is read-only.",
            "ImportedHelp": "<member name=\"F:System.Boolean.FalseString\">\r\n  <summary>Represents the Boolean value false as a string. This field is read-only.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "FalseString"
        },
        {
          "NodeAttribute": {
            "Name": "TrueString",
            "Help": "Represents the Boolean value true as a string. This field is read-only.",
            "ImportedHelp": "<member name=\"F:System.Boolean.TrueString\">\r\n  <summary>Represents the Boolean value true as a string. This field is read-only.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TrueString"
        }
      ],
      "DotNetName": "System.Boolean"
    },
    {
      "TypeAttribute": {
        "Name": "Byte",
        "Category": "Primitive",
        "KnownTypeStructure": 1,
        "Help": "Represents an 8-bit unsigned integer.",
        "ImportedHelp": "<member name=\"T:System.Byte\">\r\n  <summary>Represents an 8-bit unsigned integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of a Byte. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Byte.MaxValue\">\r\n  <summary>Represents the largest possible value of a <see cref=\"T:System.Byte\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of a Byte. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Byte.MinValue\">\r\n  <summary>Represents the smallest possible value of a <see cref=\"T:System.Byte\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the value of the current Byte object to its equivalent string representation using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Byte.ToString(System.String)\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.Byte\" /> object to its equivalent string representation using the specified format.</summary>\r\n  <returns>The string representation of the current <see cref=\"T:System.Byte\" /> object, formatted as specified by the <paramref name=\"format\" /> parameter.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> includes an unsupported specifier. Supported format specifiers are listed in the Remarks section.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the current Byte object, formatted as specified by the Format parameter.",
              "ImportedHelp": "<returns>The string representation of the current <see cref=\"T:System.Byte\" /> object, formatted as specified by the <paramref name=\"format\" /> parameter.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Byte"
    },
    {
      "TypeAttribute": {
        "Name": "Char",
        "Category": "Primitive",
        "Help": "Represents a character as a UTF-16 code unit.",
        "ImportedHelp": "<member name=\"T:System.Char\">\r\n  <summary>Represents a character as a UTF-16 code unit.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true,
        "IsBuiltin": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "IsControl",
            "Help": "Indicates whether the specified Unicode character is categorized as a control character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsControl(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a control character; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a control character; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a control character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsControl"
        },
        {
          "NodeAttribute": {
            "Name": "IsControl",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a control character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsControl(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a control character.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a control character; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a control character; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a control character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsControl"
        },
        {
          "NodeAttribute": {
            "Name": "IsDigit",
            "Help": "Indicates whether the specified Unicode character is categorized as a decimal digit.",
            "ImportedHelp": "<member name=\"M:System.Char.IsDigit(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a decimal digit; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a decimal digit; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a decimal digit; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsDigit"
        },
        {
          "NodeAttribute": {
            "Name": "IsDigit",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.",
            "ImportedHelp": "<member name=\"M:System.Char.IsDigit(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a decimal digit; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a decimal digit; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a decimal digit; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsDigit"
        },
        {
          "NodeAttribute": {
            "Name": "IsLetter",
            "Help": "Indicates whether the specified Unicode character is categorized as a Unicode letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLetter(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a Unicode letter. </summary>\r\n  <returns>true if <paramref name=\"c\" /> is a letter; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a letter; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLetter"
        },
        {
          "NodeAttribute": {
            "Name": "IsLetterOrDigit",
            "Help": "Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLetterOrDigit(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a letter or a decimal digit; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a letter or a decimal digit; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a letter or a decimal digit; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLetterOrDigit"
        },
        {
          "NodeAttribute": {
            "Name": "IsLetterOrDigit",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLetterOrDigit(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a letter or a decimal digit; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a letter or a decimal digit; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a letter or a decimal digit; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLetterOrDigit"
        },
        {
          "NodeAttribute": {
            "Name": "IsLetter",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLetter(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a letter; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a letter; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLetter"
        },
        {
          "NodeAttribute": {
            "Name": "IsLower",
            "Help": "Indicates whether the specified Unicode character is categorized as a lowercase letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLower(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a lowercase letter; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a lowercase letter; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a lowercase letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLower"
        },
        {
          "NodeAttribute": {
            "Name": "IsLower",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsLower(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a lowercase letter; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a lowercase letter; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a lowercase letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLower"
        },
        {
          "NodeAttribute": {
            "Name": "IsNumber",
            "Help": "Indicates whether the specified Unicode character is categorized as a number.",
            "ImportedHelp": "<member name=\"M:System.Char.IsNumber(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a number; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a number; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a number; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsNumber"
        },
        {
          "NodeAttribute": {
            "Name": "IsNumber",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a number.",
            "ImportedHelp": "<member name=\"M:System.Char.IsNumber(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a number.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a number; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a number; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a number; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsNumber"
        },
        {
          "NodeAttribute": {
            "Name": "IsPunctuation",
            "Help": "Indicates whether the specified Unicode character is categorized as a punctuation mark.",
            "ImportedHelp": "<member name=\"M:System.Char.IsPunctuation(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a punctuation mark; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a punctuation mark; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a punctuation mark; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsPunctuation"
        },
        {
          "NodeAttribute": {
            "Name": "IsPunctuation",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.",
            "ImportedHelp": "<member name=\"M:System.Char.IsPunctuation(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a punctuation mark; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a punctuation mark; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a punctuation mark; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsPunctuation"
        },
        {
          "NodeAttribute": {
            "Name": "IsSeparator",
            "Help": "Indicates whether the specified Unicode character is categorized as a separator character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsSeparator(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a separator character; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a separator character; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a separator character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSeparator"
        },
        {
          "NodeAttribute": {
            "Name": "IsSeparator",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a separator character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsSeparator(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a separator character; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a separator character; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a separator character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSeparator"
        },
        {
          "NodeAttribute": {
            "Name": "IsSymbol",
            "Help": "Indicates whether the specified Unicode character is categorized as a symbol character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsSymbol(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as a symbol character.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is a symbol character; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is a symbol character; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is a symbol character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSymbol"
        },
        {
          "NodeAttribute": {
            "Name": "IsSymbol",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as a symbol character.",
            "ImportedHelp": "<member name=\"M:System.Char.IsSymbol(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a symbol character; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is a symbol character; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is a symbol character; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSymbol"
        },
        {
          "NodeAttribute": {
            "Name": "IsUpper",
            "Help": "Indicates whether the specified Unicode character is categorized as an uppercase letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsUpper(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is an uppercase letter; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is an uppercase letter; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is an uppercase letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsUpper"
        },
        {
          "NodeAttribute": {
            "Name": "IsUpper",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.",
            "ImportedHelp": "<member name=\"M:System.Char.IsUpper(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is an uppercase letter; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is an uppercase letter; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is an uppercase letter; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsUpper"
        },
        {
          "NodeAttribute": {
            "Name": "IsWhiteSpace",
            "Help": "Indicates whether the specified Unicode character is categorized as white space.",
            "ImportedHelp": "<member name=\"M:System.Char.IsWhiteSpace(System.Char)\">\r\n  <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>\r\n  <returns>true if <paramref name=\"c\" /> is white space; otherwise, false.</returns>\r\n  <param name=\"c\">The Unicode character to evaluate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to evaluate.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to evaluate. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is white space; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"c\" /> is white space; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsWhiteSpace"
        },
        {
          "NodeAttribute": {
            "Name": "IsWhiteSpace",
            "Version": "String Index",
            "Help": "Indicates whether the character at the specified position in a specified string is categorized as white space.",
            "ImportedHelp": "<member name=\"M:System.Char.IsWhiteSpace(System.String,System.Int32)\">\r\n  <summary>Indicates whether the character at the specified position in a specified string is categorized as white space.</summary>\r\n  <returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is white space; otherwise, false.</returns>\r\n  <param name=\"s\">A string. </param>\r\n  <param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"s\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"index\" /> is less than zero or greater than the last position in <paramref name=\"s\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A string.",
                "ImportedHelp": "<param name=\"s\">A string. </param>"
              },
              "DotNetName": "s"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The position of the character to evaluate in Input.",
                "ImportedHelp": "<param name=\"index\">The position of the character to evaluate in <paramref name=\"s\" />. </param>"
              },
              "DotNetName": "index"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the character at position Index in Input is white space; otherwise, false.",
              "ImportedHelp": "<returns>true if the character at position <paramref name=\"index\" /> in <paramref name=\"s\" /> is white space; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsWhiteSpace"
        },
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of a Char. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Char.MaxValue\">\r\n  <summary>Represents the largest possible value of a <see cref=\"T:System.Char\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of a Char. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Char.MinValue\">\r\n  <summary>Represents the smallest possible value of a <see cref=\"T:System.Char\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToLower",
            "Help": "Converts the value of a Unicode character to its lowercase equivalent.",
            "ImportedHelp": "<member name=\"M:System.Char.ToLower(System.Char)\">\r\n  <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>\r\n  <returns>The lowercase equivalent of <paramref name=\"c\" />, or the unchanged value of <paramref name=\"c\" />, if <paramref name=\"c\" /> is already lowercase or not alphabetic.</returns>\r\n  <param name=\"c\">The Unicode character to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to convert.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to convert. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Char",
            "PinAttribute": {
              "Help": "The lowercase equivalent of Input, or the unchanged value of Input, if Input is already lowercase or not alphabetic.",
              "ImportedHelp": "<returns>The lowercase equivalent of <paramref name=\"c\" />, or the unchanged value of <paramref name=\"c\" />, if <paramref name=\"c\" /> is already lowercase or not alphabetic.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToLower"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Help": "Converts the specified Unicode character to its equivalent string representation.",
            "ImportedHelp": "<member name=\"M:System.Char.ToString(System.Char)\">\r\n  <summary>Converts the specified Unicode character to its equivalent string representation.</summary>\r\n  <returns>The string representation of the value of <paramref name=\"c\" />.</returns>\r\n  <param name=\"c\">The Unicode character to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to convert.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to convert. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of Input.",
              "ImportedHelp": "<returns>The string representation of the value of <paramref name=\"c\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToUpper",
            "Help": "Converts the value of a Unicode character to its uppercase equivalent.",
            "ImportedHelp": "<member name=\"M:System.Char.ToUpper(System.Char)\">\r\n  <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>\r\n  <returns>The uppercase equivalent of <paramref name=\"c\" />, or the unchanged value of <paramref name=\"c\" /> if <paramref name=\"c\" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>\r\n  <param name=\"c\">The Unicode character to convert. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The Unicode character to convert.",
                "ImportedHelp": "<param name=\"c\">The Unicode character to convert. </param>"
              },
              "DotNetName": "c"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Char",
            "PinAttribute": {
              "Help": "The uppercase equivalent of Input, or the unchanged value of Input if Input is already uppercase, has no uppercase equivalent, or is not alphabetic.",
              "ImportedHelp": "<returns>The uppercase equivalent of <paramref name=\"c\" />, or the unchanged value of <paramref name=\"c\" /> if <paramref name=\"c\" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUpper"
        }
      ],
      "DotNetName": "System.Char"
    },
    {
      "TypeAttribute": {
        "Name": "DateTime",
        "Category": "System",
        "Help": "Represents an instant in time, typically expressed as a date and time of day. To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.DateTime\">\r\n  <summary>Represents an instant in time, typically expressed as a date and time of day. To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Determines whether two specified instances of DateTime are not equal.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether two specified instances of <see cref=\"T:System.DateTime\" /> are not equal.</summary>\r\n  <returns>true if <paramref name=\"d1\" /> and <paramref name=\"d2\" /> do not represent the same date and time; otherwise, false.</returns>\r\n  <param name=\"d1\">The first object to compare. </param>\r\n  <param name=\"d2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"d1\">The first object to compare. </param>"
              },
              "DotNetName": "d1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"d2\">The second object to compare. </param>"
              },
              "DotNetName": "d2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input and Input 2 do not represent the same date and time; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"d1\" /> and <paramref name=\"d2\" /> do not represent the same date and time; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds a specified time interval to a specified date and time, yielding a new date and time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)\">\r\n  <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>\r\n  <returns>An object that is the sum of the values of <paramref name=\"d\" /> and <paramref name=\"t\" />.</returns>\r\n  <param name=\"d\">The date and time value to add. </param>\r\n  <param name=\"t\">The time interval to add. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The date and time value to add.",
                "ImportedHelp": "<param name=\"d\">The date and time value to add. </param>"
              },
              "DotNetName": "d"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time interval to add.",
                "ImportedHelp": "<param name=\"t\">The time interval to add. </param>"
              },
              "DotNetName": "t"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object that is the sum of the values of Input and Input 2.",
              "ImportedHelp": "<returns>An object that is the sum of the values of <paramref name=\"d\" /> and <paramref name=\"t\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Addition"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts a specified date and time from another specified date and time and returns a time interval.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)\">\r\n  <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>\r\n  <returns>The time interval between <paramref name=\"d1\" /> and <paramref name=\"d2\" />; that is, <paramref name=\"d1\" /> minus <paramref name=\"d2\" />.</returns>\r\n  <param name=\"d1\">The date and time value to subtract from (the minuend). </param>\r\n  <param name=\"d2\">The date and time value to subtract (the subtrahend). </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The date and time value to subtract from (the minuend).",
                "ImportedHelp": "<param name=\"d1\">The date and time value to subtract from (the minuend). </param>"
              },
              "DotNetName": "d1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The date and time value to subtract (the subtrahend).",
                "ImportedHelp": "<param name=\"d2\">The date and time value to subtract (the subtrahend). </param>"
              },
              "DotNetName": "d2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Name": "Output",
              "Help": "The time interval between Input and Input 2; that is, Input minus Input 2.",
              "ImportedHelp": "<returns>The time interval between <paramref name=\"d1\" /> and <paramref name=\"d2\" />; that is, <paramref name=\"d1\" /> minus <paramref name=\"d2\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Subtraction"
        },
        {
          "NodeAttribute": {
            "Name": "<",
            "Help": "Determines whether one specified DateTime is earlier than another specified DateTime.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTime\" /> is earlier than another specified <see cref=\"T:System.DateTime\" />.</summary>\r\n  <returns>true if <paramref name=\"t1\" /> is earlier than <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first object to compare. </param>\r\n  <param name=\"t2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"t1\">The first object to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"t2\">The second object to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is earlier than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"t1\" /> is earlier than <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThan"
        },
        {
          "NodeAttribute": {
            "Name": "<=",
            "Help": "Determines whether one specified DateTime represents a date and time that is the same as or earlier than another specified DateTime.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTime\" /> represents a date and time that is the same as or earlier than another specified <see cref=\"T:System.DateTime\" />.</summary>\r\n  <returns>true if <paramref name=\"t1\" /> is the same as or earlier than <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first object to compare. </param>\r\n  <param name=\"t2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"t1\">The first object to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"t2\">The second object to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is the same as or earlier than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"t1\" /> is the same as or earlier than <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Determines whether two specified instances of DateTime are equal.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_Equality(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether two specified instances of <see cref=\"T:System.DateTime\" /> are equal.</summary>\r\n  <returns>true if <paramref name=\"d1\" /> and <paramref name=\"d2\" /> represent the same date and time; otherwise, false.</returns>\r\n  <param name=\"d1\">The first object to compare. </param>\r\n  <param name=\"d2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"d1\">The first object to compare. </param>"
              },
              "DotNetName": "d1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"d2\">The second object to compare. </param>"
              },
              "DotNetName": "d2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input and Input 2 represent the same date and time; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"d1\" /> and <paramref name=\"d2\" /> represent the same date and time; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": ">",
            "Help": "Determines whether one specified DateTime is later than another specified DateTime.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTime\" /> is later than another specified <see cref=\"T:System.DateTime\" />.</summary>\r\n  <returns>true if <paramref name=\"t1\" /> is later than <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first object to compare. </param>\r\n  <param name=\"t2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"t1\">The first object to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"t2\">The second object to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is later than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"t1\" /> is later than <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThan"
        },
        {
          "NodeAttribute": {
            "Name": ">=",
            "Help": "Determines whether one specified DateTime represents a date and time that is the same as or later than another specified DateTime.",
            "ImportedHelp": "<member name=\"M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTime\" /> represents a date and time that is the same as or later than another specified <see cref=\"T:System.DateTime\" />.</summary>\r\n  <returns>true if <paramref name=\"t1\" /> is the same as or later than <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first object to compare. </param>\r\n  <param name=\"t2\">The second object to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"t1\">The first object to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"t2\">The second object to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input is the same as or later than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"t1\" /> is the same as or later than <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "Add",
            "Help": "Returns a new DateTime that adds the value of the specified TimeSpan to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.Add(System.TimeSpan)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the value of the specified <see cref=\"T:System.TimeSpan\" /> to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A positive or negative time interval. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "A positive or negative time interval.",
                "ImportedHelp": "<param name=\"value\">A positive or negative time interval. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the time interval represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "AddDays",
            "Help": "Returns a new DateTime that adds the specified number of days to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddDays(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of days to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of whole and fractional days. The <paramref name=\"value\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional days. The Value parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"value\">A number of whole and fractional days. The <paramref name=\"value\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of days represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddDays"
        },
        {
          "NodeAttribute": {
            "Name": "AddHours",
            "Help": "Returns a new DateTime that adds the specified number of hours to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddHours(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of hours to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of whole and fractional hours. The <paramref name=\"value\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional hours. The Value parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"value\">A number of whole and fractional hours. The <paramref name=\"value\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of hours represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddHours"
        },
        {
          "NodeAttribute": {
            "Name": "AddMilliseconds",
            "Help": "Returns a new DateTime that adds the specified number of milliseconds to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddMilliseconds(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of milliseconds to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of whole and fractional milliseconds. The <paramref name=\"value\" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional milliseconds. The Value parameter can be negative or positive. Note that this value is rounded to the nearest integer.",
                "ImportedHelp": "<param name=\"value\">A number of whole and fractional milliseconds. The <paramref name=\"value\" /> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "AddMinutes",
            "Help": "Returns a new DateTime that adds the specified number of minutes to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddMinutes(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of minutes to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of whole and fractional minutes. The <paramref name=\"value\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional minutes. The Value parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"value\">A number of whole and fractional minutes. The <paramref name=\"value\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMinutes"
        },
        {
          "NodeAttribute": {
            "Name": "AddMonths",
            "Help": "Returns a new DateTime that adds the specified number of months to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddMonths(System.Int32)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of months to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name=\"months\" />.</returns>\r\n  <param name=\"months\">A number of months. The <paramref name=\"months\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />.-or- <paramref name=\"months\" /> is less than -120,000 or greater than 120,000. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A number of months. The Months parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"months\">A number of months. The <paramref name=\"months\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "months"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and Months.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and <paramref name=\"months\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMonths"
        },
        {
          "NodeAttribute": {
            "Name": "AddSeconds",
            "Help": "Returns a new DateTime that adds the specified number of seconds to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddSeconds(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of seconds to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of whole and fractional seconds. The <paramref name=\"value\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional seconds. The Value parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"value\">A number of whole and fractional seconds. The <paramref name=\"value\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "AddTicks",
            "Help": "Returns a new DateTime that adds the specified number of ticks to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddTicks(System.Int64)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of ticks to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of 100-nanosecond ticks. The <paramref name=\"value\" /> parameter can be positive or negative. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A number of 100-nanosecond ticks. The Value parameter can be positive or negative.",
                "ImportedHelp": "<param name=\"value\">A number of 100-nanosecond ticks. The <paramref name=\"value\" /> parameter can be positive or negative. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the time represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddTicks"
        },
        {
          "NodeAttribute": {
            "Name": "AddYears",
            "Help": "Returns a new DateTime that adds the specified number of years to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.AddYears(System.Int32)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTime\" /> that adds the specified number of years to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of years. The <paramref name=\"value\" /> parameter can be negative or positive. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"value\" /> or the resulting <see cref=\"T:System.DateTime\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A number of years. The Value parameter can be negative or positive.",
                "ImportedHelp": "<param name=\"value\">A number of years. The <paramref name=\"value\" /> parameter can be negative or positive. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by this instance and the number of years represented by Value.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddYears"
        },
        {
          "NodeAttribute": {
            "Name": "Compare",
            "Help": "Compares two instances of DateTime and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.Compare(System.DateTime,System.DateTime)\">\r\n  <summary>Compares two instances of <see cref=\"T:System.DateTime\" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>\r\n  <returns>A signed number indicating the relative values of <paramref name=\"t1\" /> and <paramref name=\"t2\" />.Value Type Condition Less than zero <paramref name=\"t1\" /> is earlier than <paramref name=\"t2\" />. Zero <paramref name=\"t1\" /> is the same as <paramref name=\"t2\" />. Greater than zero <paramref name=\"t1\" /> is later than <paramref name=\"t2\" />. </returns>\r\n  <param name=\"t1\">The first object to compare. </param>\r\n  <param name=\"t2\">The second object to compare. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"t1\">The first object to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"t2\">The second object to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A signed number indicating the relative values of T 1 and T 2.Value Type Condition Less than zero T 1 is earlier than T 2. Zero T 1 is the same as T 2. Greater than zero T 1 is later than T 2.",
              "ImportedHelp": "<returns>A signed number indicating the relative values of <paramref name=\"t1\" /> and <paramref name=\"t2\" />.Value Type Condition Less than zero <paramref name=\"t1\" /> is earlier than <paramref name=\"t2\" />. Zero <paramref name=\"t1\" /> is the same as <paramref name=\"t2\" />. Greater than zero <paramref name=\"t1\" /> is later than <paramref name=\"t2\" />. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Compare"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Help": "Initializes a new instance of the DateTime structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTime\" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>\r\n  <param name=\"ticks\">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </param>\r\n  <param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"ticks\" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"ticks\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"kind\" /> is not one of the <see cref=\"T:System.DateTimeKind\" /> values.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.",
                "ImportedHelp": "<param name=\"ticks\">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </param>"
              },
              "DotNetName": "ticks"
            },
            {
              "TypeFullName": "System.DateTimeKind",
              "PinAttribute": {
                "Help": "One of the enumeration values that indicates whether Ticks specifies a local time, Coordinated Universal Time (UTC), or neither.",
                "ImportedHelp": "<param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"ticks\" /> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>"
              },
              "DotNetName": "kind"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Year Month Day",
            "Help": "Initializes a new instance of the DateTime structure to the specified year, month, and day.",
            "ImportedHelp": "<member name=\"M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTime\" /> structure to the specified year, month, and day.</summary>\r\n  <param name=\"year\">The year (1 through 9999). </param>\r\n  <param name=\"month\">The month (1 through 12). </param>\r\n  <param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than 1 or greater than 9999.-or- <paramref name=\"month\" /> is less than 1 or greater than 12.-or- <paramref name=\"day\" /> is less than 1 or greater than the number of days in <paramref name=\"month\" />. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year (1 through 9999).",
                "ImportedHelp": "<param name=\"year\">The year (1 through 9999). </param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (1 through 12).",
                "ImportedHelp": "<param name=\"month\">The month (1 through 12). </param>"
              },
              "DotNetName": "month"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The day (1 through the number of days in Month).",
                "ImportedHelp": "<param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>"
              },
              "DotNetName": "day"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Year Month Day Hour Minute Second Kind",
            "Help": "Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTime\" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>\r\n  <param name=\"year\">The year (1 through 9999). </param>\r\n  <param name=\"month\">The month (1 through 12). </param>\r\n  <param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>\r\n  <param name=\"hour\">The hours (0 through 23). </param>\r\n  <param name=\"minute\">The minutes (0 through 59). </param>\r\n  <param name=\"second\">The seconds (0 through 59). </param>\r\n  <param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"year\" />, <paramref name=\"month\" />, <paramref name=\"day\" />, <paramref name=\"hour\" />, <paramref name=\"minute\" /> and <paramref name=\"second\" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than 1 or greater than 9999. -or- <paramref name=\"month\" /> is less than 1 or greater than 12. -or- <paramref name=\"day\" /> is less than 1 or greater than the number of days in <paramref name=\"month\" />.-or- <paramref name=\"hour\" /> is less than 0 or greater than 23. -or- <paramref name=\"minute\" /> is less than 0 or greater than 59. -or- <paramref name=\"second\" /> is less than 0 or greater than 59. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"kind\" /> is not one of the <see cref=\"T:System.DateTimeKind\" /> values.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year (1 through 9999).",
                "ImportedHelp": "<param name=\"year\">The year (1 through 9999). </param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (1 through 12).",
                "ImportedHelp": "<param name=\"month\">The month (1 through 12). </param>"
              },
              "DotNetName": "month"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The day (1 through the number of days in Month).",
                "ImportedHelp": "<param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>"
              },
              "DotNetName": "day"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The hours (0 through 23).",
                "ImportedHelp": "<param name=\"hour\">The hours (0 through 23). </param>"
              },
              "DotNetName": "hour"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The minutes (0 through 59).",
                "ImportedHelp": "<param name=\"minute\">The minutes (0 through 59). </param>"
              },
              "DotNetName": "minute"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The seconds (0 through 59).",
                "ImportedHelp": "<param name=\"second\">The seconds (0 through 59). </param>"
              },
              "DotNetName": "second"
            },
            {
              "TypeFullName": "System.DateTimeKind",
              "PinAttribute": {
                "Help": "One of the enumeration values that indicates whether Year, Month, Day, Hour, Minute and Second specify a local time, Coordinated Universal Time (UTC), or neither.",
                "ImportedHelp": "<param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"year\" />, <paramref name=\"month\" />, <paramref name=\"day\" />, <paramref name=\"hour\" />, <paramref name=\"minute\" /> and <paramref name=\"second\" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>"
              },
              "DotNetName": "kind"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Year Month Day Hour Minute Second Millisecond Kind",
            "Help": "Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTime\" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>\r\n  <param name=\"year\">The year (1 through 9999). </param>\r\n  <param name=\"month\">The month (1 through 12). </param>\r\n  <param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>\r\n  <param name=\"hour\">The hours (0 through 23). </param>\r\n  <param name=\"minute\">The minutes (0 through 59). </param>\r\n  <param name=\"second\">The seconds (0 through 59). </param>\r\n  <param name=\"millisecond\">The milliseconds (0 through 999). </param>\r\n  <param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"year\" />, <paramref name=\"month\" />, <paramref name=\"day\" />, <paramref name=\"hour\" />, <paramref name=\"minute\" />, <paramref name=\"second\" />, and <paramref name=\"millisecond\" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than 1 or greater than 9999.-or- <paramref name=\"month\" /> is less than 1 or greater than 12.-or- <paramref name=\"day\" /> is less than 1 or greater than the number of days in <paramref name=\"month\" />.-or- <paramref name=\"hour\" /> is less than 0 or greater than 23.-or- <paramref name=\"minute\" /> is less than 0 or greater than 59.-or- <paramref name=\"second\" /> is less than 0 or greater than 59.-or- <paramref name=\"millisecond\" /> is less than 0 or greater than 999. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"kind\" /> is not one of the <see cref=\"T:System.DateTimeKind\" /> values.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year (1 through 9999).",
                "ImportedHelp": "<param name=\"year\">The year (1 through 9999). </param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (1 through 12).",
                "ImportedHelp": "<param name=\"month\">The month (1 through 12). </param>"
              },
              "DotNetName": "month"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The day (1 through the number of days in Month).",
                "ImportedHelp": "<param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />). </param>"
              },
              "DotNetName": "day"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The hours (0 through 23).",
                "ImportedHelp": "<param name=\"hour\">The hours (0 through 23). </param>"
              },
              "DotNetName": "hour"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The minutes (0 through 59).",
                "ImportedHelp": "<param name=\"minute\">The minutes (0 through 59). </param>"
              },
              "DotNetName": "minute"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The seconds (0 through 59).",
                "ImportedHelp": "<param name=\"second\">The seconds (0 through 59). </param>"
              },
              "DotNetName": "second"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The milliseconds (0 through 999).",
                "ImportedHelp": "<param name=\"millisecond\">The milliseconds (0 through 999). </param>"
              },
              "DotNetName": "millisecond"
            },
            {
              "TypeFullName": "System.DateTimeKind",
              "PinAttribute": {
                "Help": "One of the enumeration values that indicates whether Year, Month, Day, Hour, Minute, Second, and Millisecond specify a local time, Coordinated Universal Time (UTC), or neither.",
                "ImportedHelp": "<param name=\"kind\">One of the enumeration values that indicates whether <paramref name=\"year\" />, <paramref name=\"month\" />, <paramref name=\"day\" />, <paramref name=\"hour\" />, <paramref name=\"minute\" />, <paramref name=\"second\" />, and <paramref name=\"millisecond\" /> specify a local time, Coordinated Universal Time (UTC), or neither.</param>"
              },
              "DotNetName": "kind"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Date",
            "ShowCategory": true,
            "Help": "Gets the date component of this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Date\">\r\n  <summary>Gets the date component of this instance.</summary>\r\n  <returns>A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Date"
        },
        {
          "NodeAttribute": {
            "Name": "Day",
            "ShowCategory": true,
            "Help": "Gets the day of the month represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Day\">\r\n  <summary>Gets the day of the month represented by this instance.</summary>\r\n  <returns>The day component, expressed as a value between 1 and 31.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Day"
        },
        {
          "NodeAttribute": {
            "Name": "DayOfWeek",
            "ShowCategory": true,
            "Help": "Gets the day of the week represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.DayOfWeek\">\r\n  <summary>Gets the day of the week represented by this instance.</summary>\r\n  <returns>An enumerated constant that indicates the day of the week of this <see cref=\"T:System.DateTime\" /> value. </returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "DayOfWeek"
        },
        {
          "NodeAttribute": {
            "Name": "DayOfYear",
            "ShowCategory": true,
            "Help": "Gets the day of the year represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.DayOfYear\">\r\n  <summary>Gets the day of the year represented by this instance.</summary>\r\n  <returns>The day of the year, expressed as a value between 1 and 366.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "DayOfYear"
        },
        {
          "NodeAttribute": {
            "Name": "DaysInMonth",
            "Help": "Returns the number of days in the specified month and year.",
            "ImportedHelp": "<member name=\"M:System.DateTime.DaysInMonth(System.Int32,System.Int32)\">\r\n  <summary>Returns the number of days in the specified month and year.</summary>\r\n  <returns>The number of days in <paramref name=\"month\" /> for the specified <paramref name=\"year\" />.For example, if <paramref name=\"month\" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name=\"year\" /> is a leap year.</returns>\r\n  <param name=\"year\">The year. </param>\r\n  <param name=\"month\">The month (a number ranging from 1 to 12). </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"month\" /> is less than 1 or greater than 12.-or-<paramref name=\"year\" /> is less than 1 or greater than 9999.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year.",
                "ImportedHelp": "<param name=\"year\">The year. </param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (a number ranging from 1 to 12).",
                "ImportedHelp": "<param name=\"month\">The month (a number ranging from 1 to 12). </param>"
              },
              "DotNetName": "month"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The number of days in Month for the specified Year.For example, if Month equals 2 for February, the return value is 28 or 29 depending upon whether Year is a leap year.",
              "ImportedHelp": "<returns>The number of days in <paramref name=\"month\" /> for the specified <paramref name=\"year\" />.For example, if <paramref name=\"month\" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name=\"year\" /> is a leap year.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DaysInMonth"
        },
        {
          "NodeAttribute": {
            "Name": "FromBinary",
            "Help": "Deserializes a 64-bit binary value and recreates an original serialized DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTime.FromBinary(System.Int64)\">\r\n  <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref=\"T:System.DateTime\" /> object.</summary>\r\n  <returns>An object that is equivalent to the <see cref=\"T:System.DateTime\" /> object that was serialized by the <see cref=\"M:System.DateTime.ToBinary\" /> method.</returns>\r\n  <param name=\"dateData\">A 64-bit signed integer that encodes the <see cref=\"P:System.DateTime.Kind\" /> property in a 2-bit field and the <see cref=\"P:System.DateTime.Ticks\" /> property in a 62-bit field. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"dateData\" /> is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A 64-bit signed integer that encodes the Kind property in a 2-bit field and the Ticks property in a 62-bit field.",
                "ImportedHelp": "<param name=\"dateData\">A 64-bit signed integer that encodes the <see cref=\"P:System.DateTime.Kind\" /> property in a 2-bit field and the <see cref=\"P:System.DateTime.Ticks\" /> property in a 62-bit field. </param>"
              },
              "DotNetName": "dateData"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object that is equivalent to the DateTime object that was serialized by the ToBinary method.",
              "ImportedHelp": "<returns>An object that is equivalent to the <see cref=\"T:System.DateTime\" /> object that was serialized by the <see cref=\"M:System.DateTime.ToBinary\" /> method.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromBinary"
        },
        {
          "NodeAttribute": {
            "Name": "FromFileTime",
            "Help": "Converts the specified Windows file time to an equivalent local time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.FromFileTime(System.Int64)\">\r\n  <summary>Converts the specified Windows file time to an equivalent local time.</summary>\r\n  <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name=\"fileTime\" /> parameter.</returns>\r\n  <param name=\"fileTime\">A Windows file time expressed in ticks. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"fileTime\" /> is less than 0 or represents a time greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A Windows file time expressed in ticks.",
                "ImportedHelp": "<param name=\"fileTime\">A Windows file time expressed in ticks. </param>"
              },
              "DotNetName": "fileTime"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object that represents the local time equivalent of the date and time represented by the File Time parameter.",
              "ImportedHelp": "<returns>An object that represents the local time equivalent of the date and time represented by the <paramref name=\"fileTime\" /> parameter.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromFileTime"
        },
        {
          "NodeAttribute": {
            "Name": "FromFileTimeUtc",
            "Help": "Converts the specified Windows file time to an equivalent UTC time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.FromFileTimeUtc(System.Int64)\">\r\n  <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>\r\n  <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name=\"fileTime\" /> parameter.</returns>\r\n  <param name=\"fileTime\">A Windows file time expressed in ticks. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"fileTime\" /> is less than 0 or represents a time greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A Windows file time expressed in ticks.",
                "ImportedHelp": "<param name=\"fileTime\">A Windows file time expressed in ticks. </param>"
              },
              "DotNetName": "fileTime"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object that represents the UTC time equivalent of the date and time represented by the File Time parameter.",
              "ImportedHelp": "<returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name=\"fileTime\" /> parameter.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromFileTimeUtc"
        },
        {
          "NodeAttribute": {
            "Name": "Hour",
            "ShowCategory": true,
            "Help": "Gets the hour component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Hour\">\r\n  <summary>Gets the hour component of the date represented by this instance.</summary>\r\n  <returns>The hour component, expressed as a value between 0 and 23.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Hour"
        },
        {
          "NodeAttribute": {
            "Name": "IsDaylightSavingTime",
            "Help": "Indicates whether this instance of DateTime is within the daylight saving time range for the current time zone.",
            "ImportedHelp": "<member name=\"M:System.DateTime.IsDaylightSavingTime\">\r\n  <summary>Indicates whether this instance of <see cref=\"T:System.DateTime\" /> is within the daylight saving time range for the current time zone.</summary>\r\n  <returns>true if the value of the <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Local\" /> or <see cref=\"F:System.DateTimeKind.Unspecified\" /> and the value of this instance of <see cref=\"T:System.DateTime\" /> is within the daylight saving time range for the local time zone; false if <see cref=\"P:System.DateTime.Kind\" /> is <see cref=\"F:System.DateTimeKind.Utc\" />.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of the Kind property is F:System.DateTimeKind.Local or F:System.DateTimeKind.Unspecified and the value of this instance of DateTime is within the daylight saving time range for the local time zone; false if Kind is F:System.DateTimeKind.Utc.",
              "ImportedHelp": "<returns>true if the value of the <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Local\" /> or <see cref=\"F:System.DateTimeKind.Unspecified\" /> and the value of this instance of <see cref=\"T:System.DateTime\" /> is within the daylight saving time range for the local time zone; false if <see cref=\"P:System.DateTime.Kind\" /> is <see cref=\"F:System.DateTimeKind.Utc\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsDaylightSavingTime"
        },
        {
          "NodeAttribute": {
            "Name": "IsLeapYear",
            "Help": "Returns an indication whether the specified year is a leap year.",
            "ImportedHelp": "<member name=\"M:System.DateTime.IsLeapYear(System.Int32)\">\r\n  <summary>Returns an indication whether the specified year is a leap year.</summary>\r\n  <returns>true if <paramref name=\"year\" /> is a leap year; otherwise, false.</returns>\r\n  <param name=\"year\">A 4-digit year. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than 1 or greater than 9999.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A 4-digit year.",
                "ImportedHelp": "<param name=\"year\">A 4-digit year. </param>"
              },
              "DotNetName": "year"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Year is a leap year; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"year\" /> is a leap year; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsLeapYear"
        },
        {
          "NodeAttribute": {
            "Name": "Kind",
            "ShowCategory": true,
            "Help": "Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Kind\">\r\n  <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>\r\n  <returns>One of the enumeration values that indicates what the current time represents. The default is <see cref=\"F:System.DateTimeKind.Unspecified\" />.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Kind"
        },
        {
          "NodeAttribute": {
            "Name": "Millisecond",
            "ShowCategory": true,
            "Help": "Gets the milliseconds component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Millisecond\">\r\n  <summary>Gets the milliseconds component of the date represented by this instance.</summary>\r\n  <returns>The milliseconds component, expressed as a value between 0 and 999.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Millisecond"
        },
        {
          "NodeAttribute": {
            "Name": "Minute",
            "ShowCategory": true,
            "Help": "Gets the minute component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Minute\">\r\n  <summary>Gets the minute component of the date represented by this instance.</summary>\r\n  <returns>The minute component, expressed as a value between 0 and 59.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Minute"
        },
        {
          "NodeAttribute": {
            "Name": "Month",
            "ShowCategory": true,
            "Help": "Gets the month component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Month\">\r\n  <summary>Gets the month component of the date represented by this instance.</summary>\r\n  <returns>The month component, expressed as a value between 1 and 12.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Month"
        },
        {
          "NodeAttribute": {
            "Name": "Now",
            "Help": "Gets a DateTime object that is set to the current date and time on this computer, expressed as the local time.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Now\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>\r\n  <returns>An object whose value is the current local date and time.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Now"
        },
        {
          "NodeAttribute": {
            "Name": "Second",
            "ShowCategory": true,
            "Help": "Gets the seconds component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Second\">\r\n  <summary>Gets the seconds component of the date represented by this instance.</summary>\r\n  <returns>The seconds component, expressed as a value between 0 and 59.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Second"
        },
        {
          "NodeAttribute": {
            "Name": "Subtract",
            "Help": "Subtracts the specified duration from this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTime.Subtract(System.TimeSpan)\">\r\n  <summary>Subtracts the specified duration from this instance.</summary>\r\n  <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">The time interval to subtract. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The result is less than <see cref=\"F:System.DateTime.MinValue\" /> or greater than <see cref=\"F:System.DateTime.MaxValue\" />. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time interval to subtract.",
                "ImportedHelp": "<param name=\"value\">The time interval to subtract. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object that is equal to the date and time represented by this instance minus the time interval represented by Value.",
              "ImportedHelp": "<returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "Ticks",
            "ShowCategory": true,
            "Help": "Gets the number of ticks that represent the date and time of this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Ticks\">\r\n  <summary>Gets the number of ticks that represent the date and time of this instance.</summary>\r\n  <returns>The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Ticks"
        },
        {
          "NodeAttribute": {
            "Name": "TimeOfDay",
            "ShowCategory": true,
            "Help": "Gets the time of day for this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.TimeOfDay\">\r\n  <summary>Gets the time of day for this instance.</summary>\r\n  <returns>A time interval that represents the fraction of the day that has elapsed since midnight.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TimeOfDay"
        },
        {
          "NodeAttribute": {
            "Name": "ToBinary",
            "Help": "Serializes the current DateTime object to a 64-bit binary value that subsequently can be used to recreate the DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToBinary\">\r\n  <summary>Serializes the current <see cref=\"T:System.DateTime\" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref=\"T:System.DateTime\" /> object.</summary>\r\n  <returns>A 64-bit signed integer that encodes the <see cref=\"P:System.DateTime.Kind\" /> and <see cref=\"P:System.DateTime.Ticks\" /> properties. </returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "A 64-bit signed integer that encodes the Kind and Ticks properties.",
              "ImportedHelp": "<returns>A 64-bit signed integer that encodes the <see cref=\"P:System.DateTime.Kind\" /> and <see cref=\"P:System.DateTime.Ticks\" /> properties. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToBinary"
        },
        {
          "NodeAttribute": {
            "Name": "ToFileTime",
            "Help": "Converts the value of the current DateTime object to a Windows file time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToFileTime\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to a Windows file time.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.DateTime\" /> object expressed as a Windows file time.</returns>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The value of the current DateTime object expressed as a Windows file time.",
              "ImportedHelp": "<returns>The value of the current <see cref=\"T:System.DateTime\" /> object expressed as a Windows file time.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToFileTime"
        },
        {
          "NodeAttribute": {
            "Name": "ToFileTimeUtc",
            "Help": "Converts the value of the current DateTime object to a Windows file time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToFileTimeUtc\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to a Windows file time.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.DateTime\" /> object expressed as a Windows file time.</returns>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The value of the current DateTime object expressed as a Windows file time.",
              "ImportedHelp": "<returns>The value of the current <see cref=\"T:System.DateTime\" /> object expressed as a Windows file time.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToFileTimeUtc"
        },
        {
          "NodeAttribute": {
            "Name": "ToLocalTime",
            "Help": "Converts the value of the current DateTime object to local time.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToLocalTime\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to local time.</summary>\r\n  <returns>An object whose <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Local\" />, and whose value is the local time equivalent to the value of the current <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MaxValue\" /> if the converted value is too large to be represented by a <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MinValue\" /> if the converted value is too small to be represented as a <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose Kind property is F:System.DateTimeKind.Local, and whose value is the local time equivalent to the value of the current DateTime object, or F:System.DateTime.MaxValue if the converted value is too large to be represented by a DateTime object, or F:System.DateTime.MinValue if the converted value is too small to be represented as a DateTime object.",
              "ImportedHelp": "<returns>An object whose <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Local\" />, and whose value is the local time equivalent to the value of the current <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MaxValue\" /> if the converted value is too large to be represented by a <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MinValue\" /> if the converted value is too small to be represented as a <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToLocalTime"
        },
        {
          "NodeAttribute": {
            "Name": "ToLongDateString",
            "Help": "Converts the value of the current DateTime object to its equivalent long date string representation.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToLongDateString\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to its equivalent long date string representation.</summary>\r\n  <returns>A string that contains the long date string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that contains the long date string representation of the current DateTime object.",
              "ImportedHelp": "<returns>A string that contains the long date string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToLongDateString"
        },
        {
          "NodeAttribute": {
            "Name": "ToLongTimeString",
            "Help": "Converts the value of the current DateTime object to its equivalent long time string representation.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToLongTimeString\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to its equivalent long time string representation.</summary>\r\n  <returns>A string that contains the long time string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that contains the long time string representation of the current DateTime object.",
              "ImportedHelp": "<returns>A string that contains the long time string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToLongTimeString"
        },
        {
          "NodeAttribute": {
            "Name": "ToShortDateString",
            "Help": "Converts the value of the current DateTime object to its equivalent short date string representation.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToShortDateString\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to its equivalent short date string representation.</summary>\r\n  <returns>A string that contains the short date string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that contains the short date string representation of the current DateTime object.",
              "ImportedHelp": "<returns>A string that contains the short date string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToShortDateString"
        },
        {
          "NodeAttribute": {
            "Name": "ToShortTimeString",
            "Help": "Converts the value of the current DateTime object to its equivalent short time string representation.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToShortTimeString\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to its equivalent short time string representation.</summary>\r\n  <returns>A string that contains the short time string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that contains the short time string representation of the current DateTime object.",
              "ImportedHelp": "<returns>A string that contains the short time string representation of the current <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToShortTimeString"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the value of the current DateTime object to its equivalent string representation using the specified format and the formatting conventions of the current culture.",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToString(System.String)\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture. </summary>\r\n  <returns>A string representation of value of the current <see cref=\"T:System.DateTime\" /> object as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A standard or custom date and time format string (see Remarks). </param>\r\n  <exception cref=\"T:System.FormatException\">The length of <paramref name=\"format\" /> is 1, and it is not one of the format specifier characters defined for <see cref=\"T:System.Globalization.DateTimeFormatInfo\" />.-or- <paramref name=\"format\" /> does not contain a valid custom format pattern. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A standard or custom date and time format string (see Remarks).",
                "ImportedHelp": "<param name=\"format\">A standard or custom date and time format string (see Remarks). </param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string representation of value of the current DateTime object as specified by Format.",
              "ImportedHelp": "<returns>A string representation of value of the current <see cref=\"T:System.DateTime\" /> object as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToUniversalTime",
            "Help": "Converts the value of the current DateTime object to Coordinated Universal Time (UTC).",
            "ImportedHelp": "<member name=\"M:System.DateTime.ToUniversalTime\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTime\" /> object to Coordinated Universal Time (UTC).</summary>\r\n  <returns>An object whose <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Utc\" />, and whose value is the UTC equivalent to the value of the current <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MaxValue\" /> if the converted value is too large to be represented by a <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MinValue\" /> if the converted value is too small to be represented by a <see cref=\"T:System.DateTime\" /> object.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.DateTime",
            "PinAttribute": {
              "Help": "An object whose Kind property is F:System.DateTimeKind.Utc, and whose value is the UTC equivalent to the value of the current DateTime object, or F:System.DateTime.MaxValue if the converted value is too large to be represented by a DateTime object, or F:System.DateTime.MinValue if the converted value is too small to be represented by a DateTime object.",
              "ImportedHelp": "<returns>An object whose <see cref=\"P:System.DateTime.Kind\" /> property is <see cref=\"F:System.DateTimeKind.Utc\" />, and whose value is the UTC equivalent to the value of the current <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MaxValue\" /> if the converted value is too large to be represented by a <see cref=\"T:System.DateTime\" /> object, or <see cref=\"F:System.DateTime.MinValue\" /> if the converted value is too small to be represented by a <see cref=\"T:System.DateTime\" /> object.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUniversalTime"
        },
        {
          "NodeAttribute": {
            "Name": "Today",
            "Help": "Gets the current date.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Today\">\r\n  <summary>Gets the current date.</summary>\r\n  <returns>An object that is set to today's date, with the time component set to 00:00:00.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Today"
        },
        {
          "NodeAttribute": {
            "Name": "UtcNow",
            "Help": "Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).",
            "ImportedHelp": "<member name=\"P:System.DateTime.UtcNow\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>\r\n  <returns>An object whose value is the current UTC date and time.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "UtcNow"
        },
        {
          "NodeAttribute": {
            "Name": "Year",
            "ShowCategory": true,
            "Help": "Gets the year component of the date represented by this instance.",
            "ImportedHelp": "<member name=\"P:System.DateTime.Year\">\r\n  <summary>Gets the year component of the date represented by this instance.</summary>\r\n  <returns>The year, between 1 and 9999.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Year"
        }
      ],
      "DotNetName": "System.DateTime"
    },
    {
      "TypeAttribute": {
        "Name": "DateTimeKind",
        "Category": "System",
        "Help": "Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.",
        "ImportedHelp": "<member name=\"T:System.DateTimeKind\">\r\n  <summary>Specifies whether a <see cref=\"T:System.DateTime\" /> object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.DateTimeKind"
    },
    {
      "TypeAttribute": {
        "Name": "DateTime",
        "Category": "System",
        "Version": "UTC",
        "Help": "Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).",
        "ImportedHelp": "<member name=\"T:System.DateTimeOffset\">\r\n  <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Determines whether two specified DateTime objects refer to different points in time.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether two specified <see cref=\"T:System.DateTimeOffset\" /> objects refer to different points in time.</summary>\r\n  <returns>true if <paramref name=\"left\" /> and <paramref name=\"right\" /> do not have the same <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input and Input 2 do not have the same UtcDateTime value; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"left\" /> and <paramref name=\"right\" /> do not have the same <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds a specified time interval to a DateTime object that has a specified date and time, and yields a DateTime object that has new a date and time.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)\">\r\n  <summary>Adds a specified time interval to a <see cref=\"T:System.DateTimeOffset\" /> object that has a specified date and time, and yields a <see cref=\"T:System.DateTimeOffset\" /> object that has new a date and time.</summary>\r\n  <returns>An object whose value is the sum of the values of <paramref name=\"dateTimeTz\" /> and <paramref name=\"timeSpan\" />.</returns>\r\n  <param name=\"dateTimeOffset\">The object to add the time interval to.</param>\r\n  <param name=\"timeSpan\">The time interval to add.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The object to add the time interval to.",
                "ImportedHelp": "<param name=\"dateTimeOffset\">The object to add the time interval to.</param>"
              },
              "DotNetName": "dateTimeOffset"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time interval to add.",
                "ImportedHelp": "<param name=\"timeSpan\">The time interval to add.</param>"
              },
              "DotNetName": "timeSpan"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the values of dateTimeTz and Input 2.",
              "ImportedHelp": "<returns>An object whose value is the sum of the values of <paramref name=\"dateTimeTz\" /> and <paramref name=\"timeSpan\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Addition"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Version": "DateTimeOffset DateTimeOffset",
            "Help": "Subtracts one DateTime object from another and yields a time interval.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Subtracts one <see cref=\"T:System.DateTimeOffset\" /> object from another and yields a time interval.</summary>\r\n  <returns>An object that represents the difference between <paramref name=\"left\" /> and <paramref name=\"right\" />.</returns>\r\n  <param name=\"left\">The minuend.   </param>\r\n  <param name=\"right\">The subtrahend.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The minuend.",
                "ImportedHelp": "<param name=\"left\">The minuend.   </param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The subtrahend.",
                "ImportedHelp": "<param name=\"right\">The subtrahend.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Name": "Output",
              "Help": "An object that represents the difference between Input and Input 2.",
              "ImportedHelp": "<returns>An object that represents the difference between <paramref name=\"left\" /> and <paramref name=\"right\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Subtraction"
        },
        {
          "NodeAttribute": {
            "Name": "<",
            "Help": "Determines whether one specified DateTime object is less than a second specified DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTimeOffset\" /> object is less than a second specified <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is earlier than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the UtcDateTime value of Input is earlier than the UtcDateTime value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is earlier than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThan"
        },
        {
          "NodeAttribute": {
            "Name": "<=",
            "Help": "Determines whether one specified DateTime object is less than a second specified DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTimeOffset\" /> object is less than a second specified <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is earlier than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the UtcDateTime value of Input is earlier than the UtcDateTime value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is earlier than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Determines whether two specified DateTime objects represent the same point in time.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether two specified <see cref=\"T:System.DateTimeOffset\" /> objects represent the same point in time.</summary>\r\n  <returns>true if both <see cref=\"T:System.DateTimeOffset\" /> objects have the same <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if both DateTime objects have the same UtcDateTime value; otherwise, false.",
              "ImportedHelp": "<returns>true if both <see cref=\"T:System.DateTimeOffset\" /> objects have the same <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": ">",
            "Help": "Determines whether one specified DateTime object is greater than (or later than) a second specified DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTimeOffset\" /> object is greater than (or later than) a second specified <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is later than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the UtcDateTime value of Input is later than the UtcDateTime value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is later than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThan"
        },
        {
          "NodeAttribute": {
            "Name": ">=",
            "Help": "Determines whether one specified DateTime object is greater than or equal to a second specified DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Determines whether one specified <see cref=\"T:System.DateTimeOffset\" /> object is greater than or equal to a second specified <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is the same as or later than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>\r\n  <param name=\"left\">The first object to compare.</param>\r\n  <param name=\"right\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"left\">The first object to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"right\">The second object to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the UtcDateTime value of Input is the same as or later than the UtcDateTime value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"left\" /> is the same as or later than the <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> value of <paramref name=\"right\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "Add",
            "Help": "Returns a new DateTime object that adds a specified time interval to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.Add(System.TimeSpan)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified time interval to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the time interval represented by <paramref name=\"timeSpan\" />.</returns>\r\n  <param name=\"timeSpan\">A <see cref=\"T:System.TimeSpan\" /> object that represents a positive or a negative time interval.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "A TimeSpan object that represents a positive or a negative time interval.",
                "ImportedHelp": "<param name=\"timeSpan\">A <see cref=\"T:System.TimeSpan\" /> object that represents a positive or a negative time interval.</param>"
              },
              "DotNetName": "timeSpan"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the time interval represented by Time Span.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the time interval represented by <paramref name=\"timeSpan\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "AddDays",
            "Help": "Returns a new DateTime object that adds a specified number of whole and fractional days to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddDays(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of days represented by <paramref name=\"days\" />.</returns>\r\n  <param name=\"days\">A number of whole and fractional days. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional days. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"days\">A number of whole and fractional days. The number can be negative or positive.</param>"
              },
              "DotNetName": "days"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of days represented by Days.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of days represented by <paramref name=\"days\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddDays"
        },
        {
          "NodeAttribute": {
            "Name": "AddHours",
            "Help": "Returns a new DateTime object that adds a specified number of whole and fractional hours to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddHours(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of hours represented by <paramref name=\"hours\" />.</returns>\r\n  <param name=\"hours\">A number of whole and fractional hours. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional hours. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"hours\">A number of whole and fractional hours. The number can be negative or positive.</param>"
              },
              "DotNetName": "hours"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of hours represented by Hours.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of hours represented by <paramref name=\"hours\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddHours"
        },
        {
          "NodeAttribute": {
            "Name": "AddMilliseconds",
            "ShowCategory": false,
            "Help": "Returns a new DateTime object that adds a specified number of milliseconds to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddMilliseconds(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of milliseconds to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of whole milliseconds represented by <paramref name=\"milliseconds\" />.</returns>\r\n  <param name=\"milliseconds\">A number of whole and fractional milliseconds. The number can be negative or positive.   </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional milliseconds. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"milliseconds\">A number of whole and fractional milliseconds. The number can be negative or positive.   </param>"
              },
              "DotNetName": "milliseconds"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of whole milliseconds represented by Milliseconds.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of whole milliseconds represented by <paramref name=\"milliseconds\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "AddMinutes",
            "Help": "Returns a new DateTime object that adds a specified number of whole and fractional minutes to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddMinutes(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of minutes represented by <paramref name=\"minutes\" />.</returns>\r\n  <param name=\"minutes\">A number of whole and fractional minutes. The number can be negative or positive.   </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional minutes. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"minutes\">A number of whole and fractional minutes. The number can be negative or positive.   </param>"
              },
              "DotNetName": "minutes"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of minutes represented by Minutes.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of minutes represented by <paramref name=\"minutes\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMinutes"
        },
        {
          "NodeAttribute": {
            "Name": "AddMonths",
            "Help": "Returns a new DateTime object that adds a specified number of months to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddMonths(System.Int32)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of months to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of months represented by <paramref name=\"months\" />.</returns>\r\n  <param name=\"months\">A number of whole months. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A number of whole months. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"months\">A number of whole months. The number can be negative or positive.</param>"
              },
              "DotNetName": "months"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of months represented by Months.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of months represented by <paramref name=\"months\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddMonths"
        },
        {
          "NodeAttribute": {
            "Name": "AddSeconds",
            "Help": "Returns a new DateTime object that adds a specified number of whole and fractional seconds to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddSeconds(System.Double)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of seconds represented by <paramref name=\"seconds\" />.</returns>\r\n  <param name=\"seconds\">A number of whole and fractional seconds. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of whole and fractional seconds. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"seconds\">A number of whole and fractional seconds. The number can be negative or positive.</param>"
              },
              "DotNetName": "seconds"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of seconds represented by Seconds.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of seconds represented by <paramref name=\"seconds\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "AddTicks",
            "Help": "Returns a new DateTime object that adds a specified number of ticks to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddTicks(System.Int64)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of ticks to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of ticks represented by <paramref name=\"ticks\" />.</returns>\r\n  <param name=\"ticks\">A number of 100-nanosecond ticks. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A number of 100-nanosecond ticks. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"ticks\">A number of 100-nanosecond ticks. The number can be negative or positive.</param>"
              },
              "DotNetName": "ticks"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of ticks represented by Ticks.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of ticks represented by <paramref name=\"ticks\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddTicks"
        },
        {
          "NodeAttribute": {
            "Name": "AddYears",
            "Help": "Returns a new DateTime object that adds a specified number of years to the value of this instance.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.AddYears(System.Int32)\">\r\n  <summary>Returns a new <see cref=\"T:System.DateTimeOffset\" /> object that adds a specified number of years to the value of this instance.</summary>\r\n  <returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of years represented by <paramref name=\"years\" />.</returns>\r\n  <param name=\"years\">A number of years. The number can be negative or positive.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A number of years. The number can be negative or positive.",
                "ImportedHelp": "<param name=\"years\">A number of years. The number can be negative or positive.</param>"
              },
              "DotNetName": "years"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the date and time represented by the current DateTime object and the number of years represented by Years.",
              "ImportedHelp": "<returns>An object whose value is the sum of the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object and the number of years represented by <paramref name=\"years\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "AddYears"
        },
        {
          "NodeAttribute": {
            "Name": "Compare",
            "Help": "Compares two DateTime objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)\">\r\n  <summary>Compares two <see cref=\"T:System.DateTimeOffset\" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>\r\n  <returns>A signed integer that indicates whether the value of the <paramref name=\"first\" /> parameter is earlier than, later than, or the same time as the value of the <paramref name=\"second\" /> parameter, as the following table shows.Return valueMeaningLess than zero<paramref name=\"first\" /> is earlier than <paramref name=\"second\" />.Zero<paramref name=\"first\" /> is equal to <paramref name=\"second\" />.Greater than zero<paramref name=\"first\" /> is later than <paramref name=\"second\" />.</returns>\r\n  <param name=\"first\">The first object to compare.</param>\r\n  <param name=\"second\">The second object to compare.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The first object to compare.",
                "ImportedHelp": "<param name=\"first\">The first object to compare.</param>"
              },
              "DotNetName": "first"
            },
            {
              "TypeFullName": "System.DateTimeOffset",
              "PinAttribute": {
                "Help": "The second object to compare.",
                "ImportedHelp": "<param name=\"second\">The second object to compare.</param>"
              },
              "DotNetName": "second"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A signed integer that indicates whether the value of the First parameter is earlier than, later than, or the same time as the value of the Second parameter, as the following table shows.Return valueMeaningLess than zeroFirst is earlier than Second.ZeroFirst is equal to Second.Greater than zeroFirst is later than Second.",
              "ImportedHelp": "<returns>A signed integer that indicates whether the value of the <paramref name=\"first\" /> parameter is earlier than, later than, or the same time as the value of the <paramref name=\"second\" /> parameter, as the following table shows.Return valueMeaningLess than zero<paramref name=\"first\" /> is earlier than <paramref name=\"second\" />.Zero<paramref name=\"first\" /> is equal to <paramref name=\"second\" />.Greater than zero<paramref name=\"first\" /> is later than <paramref name=\"second\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Compare"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Help": "Initializes a new instance of the DateTime structure using the specified number of ticks and offset.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTimeOffset\" /> structure using the specified number of ticks and offset.</summary>\r\n  <param name=\"ticks\">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>\r\n  <param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"offset\" /> is not specified in whole minutes.</exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> property is earlier than <see cref=\"F:System.DateTimeOffset.MinValue\" /> or later than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.-or-<paramref name=\"ticks\" /> is less than DateTimeOffset.MinValue.Ticks or greater than DateTimeOffset.MaxValue.Ticks.-or-<paramref name=\"Offset\" /> s less than -14 hours or greater than 14 hours.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.",
                "ImportedHelp": "<param name=\"ticks\">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>"
              },
              "DotNetName": "ticks"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time's offset from Coordinated Universal Time (UTC).",
                "ImportedHelp": "<param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>"
              },
              "DotNetName": "offset"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "DateTime Offset",
            "Help": "Initializes a new instance of the DateTime structure using the specified DateTime value and offset.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTimeOffset\" /> structure using the specified <see cref=\"T:System.DateTime\" /> value and offset.</summary>\r\n  <param name=\"dateTime\">A date and time.   </param>\r\n  <param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"dateTime.Kind\" /> equals <see cref=\"F:System.DateTimeKind.Utc\" /> and <paramref name=\"offset\" /> does not equal zero.-or-<paramref name=\"dateTime.Kind\" /> equals <see cref=\"F:System.DateTimeKind.Local\" /> and <paramref name=\"offset\" /> does not equal the offset of the system's local time zone.-or-<paramref name=\"offset\" /> is not specified in whole minutes.</exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"offset\" /> is less than -14 hours or greater than 14 hours.-or-<see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> is less than <see cref=\"F:System.DateTimeOffset.MinValue\" /> or greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.DateTime",
              "PinAttribute": {
                "Help": "A date and time.",
                "ImportedHelp": "<param name=\"dateTime\">A date and time.   </param>"
              },
              "DotNetName": "dateTime"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time's offset from Coordinated Universal Time (UTC).",
                "ImportedHelp": "<param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>"
              },
              "DotNetName": "offset"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Year Month Day Hour Minute Second Millisecond Offset",
            "Help": "Initializes a new instance of the DateTime structure using the specified year, month, day, hour, minute, second, millisecond, and offset.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTimeOffset\" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>\r\n  <param name=\"year\">The year (1 through 9999).</param>\r\n  <param name=\"month\">The month (1 through 12).</param>\r\n  <param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />).</param>\r\n  <param name=\"hour\">The hours (0 through 23).   </param>\r\n  <param name=\"minute\">The minutes (0 through 59).</param>\r\n  <param name=\"second\">The seconds (0 through 59).</param>\r\n  <param name=\"millisecond\">The milliseconds (0 through 999).</param>\r\n  <param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"offset\" /> does not represent whole minutes.</exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than one or greater than 9999.-or-<paramref name=\"month\" /> is less than one or greater than 12.-or-<paramref name=\"day\" /> is less than one or greater than the number of days in <paramref name=\"month\" />.-or-<paramref name=\"hour\" /> is less than zero or greater than 23.-or-<paramref name=\"minute\" /> is less than 0 or greater than 59.-or-<paramref name=\"second\" /> is less than 0 or greater than 59.-or-<paramref name=\"millisecond\" /> is less than 0 or greater than 999.-or-<paramref name=\"offset\" /> is less than -14 or greater than 14.-or-The <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> property is earlier than <see cref=\"F:System.DateTimeOffset.MinValue\" /> or later than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year (1 through 9999).",
                "ImportedHelp": "<param name=\"year\">The year (1 through 9999).</param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (1 through 12).",
                "ImportedHelp": "<param name=\"month\">The month (1 through 12).</param>"
              },
              "DotNetName": "month"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The day (1 through the number of days in Month).",
                "ImportedHelp": "<param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />).</param>"
              },
              "DotNetName": "day"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The hours (0 through 23).",
                "ImportedHelp": "<param name=\"hour\">The hours (0 through 23).   </param>"
              },
              "DotNetName": "hour"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The minutes (0 through 59).",
                "ImportedHelp": "<param name=\"minute\">The minutes (0 through 59).</param>"
              },
              "DotNetName": "minute"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The seconds (0 through 59).",
                "ImportedHelp": "<param name=\"second\">The seconds (0 through 59).</param>"
              },
              "DotNetName": "second"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The milliseconds (0 through 999).",
                "ImportedHelp": "<param name=\"millisecond\">The milliseconds (0 through 999).</param>"
              },
              "DotNetName": "millisecond"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time's offset from Coordinated Universal Time (UTC).",
                "ImportedHelp": "<param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>"
              },
              "DotNetName": "offset"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Year Month Day Hour Minute Second Offset",
            "Help": "Initializes a new instance of the DateTime structure using the specified year, month, day, hour, minute, second, and offset.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.DateTimeOffset\" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>\r\n  <param name=\"year\">The year (1 through 9999).</param>\r\n  <param name=\"month\">The month (1 through 12).</param>\r\n  <param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />).</param>\r\n  <param name=\"hour\">The hours (0 through 23).   </param>\r\n  <param name=\"minute\">The minutes (0 through 59).</param>\r\n  <param name=\"second\">The seconds (0 through 59).</param>\r\n  <param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"offset\" /> does not represent whole minutes.</exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"year\" /> is less than one or greater than 9999.-or-<paramref name=\"month\" /> is less than one or greater than 12.-or-<paramref name=\"day\" /> is less than one or greater than the number of days in <paramref name=\"month\" />.-or-<paramref name=\"hour\" /> is less than zero or greater than 23.-or-<paramref name=\"minute\" /> is less than 0 or greater than 59.-or-<paramref name=\"second\" /> is less than 0 or greater than 59.-or-<paramref name=\"offset\" /> is less than -14 hours or greater than 14 hours.-or-The <see cref=\"P:System.DateTimeOffset.UtcDateTime\" /> property is earlier than <see cref=\"F:System.DateTimeOffset.MinValue\" /> or later than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The year (1 through 9999).",
                "ImportedHelp": "<param name=\"year\">The year (1 through 9999).</param>"
              },
              "DotNetName": "year"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The month (1 through 12).",
                "ImportedHelp": "<param name=\"month\">The month (1 through 12).</param>"
              },
              "DotNetName": "month"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The day (1 through the number of days in Month).",
                "ImportedHelp": "<param name=\"day\">The day (1 through the number of days in <paramref name=\"month\" />).</param>"
              },
              "DotNetName": "day"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The hours (0 through 23).",
                "ImportedHelp": "<param name=\"hour\">The hours (0 through 23).   </param>"
              },
              "DotNetName": "hour"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The minutes (0 through 59).",
                "ImportedHelp": "<param name=\"minute\">The minutes (0 through 59).</param>"
              },
              "DotNetName": "minute"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The seconds (0 through 59).",
                "ImportedHelp": "<param name=\"second\">The seconds (0 through 59).</param>"
              },
              "DotNetName": "second"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time's offset from Coordinated Universal Time (UTC).",
                "ImportedHelp": "<param name=\"offset\">The time's offset from Coordinated Universal Time (UTC).</param>"
              },
              "DotNetName": "offset"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Date",
            "ShowCategory": true,
            "Help": "Gets a DateTime value that represents the date component of the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Date\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> value that represents the date component of the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>A <see cref=\"T:System.DateTime\" /> value that represents the date component of the current <see cref=\"T:System.DateTimeOffset\" /> object.</returns>\r\n</member>"
          },
          "DotNetName": "Date"
        },
        {
          "NodeAttribute": {
            "Name": "DateTime",
            "ShowCategory": true,
            "Help": "Gets a DateTime value that represents the date and time of the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.DateTime\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> value that represents the date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</returns>\r\n</member>"
          },
          "DotNetName": "DateTime"
        },
        {
          "NodeAttribute": {
            "Name": "Day",
            "ShowCategory": true,
            "Help": "Gets the day of the month represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Day\">\r\n  <summary>Gets the day of the month represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The day component of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as a value between 1 and 31.</returns>\r\n</member>"
          },
          "DotNetName": "Day"
        },
        {
          "NodeAttribute": {
            "Name": "DayOfWeek",
            "ShowCategory": true,
            "Help": "Gets the day of the week represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.DayOfWeek\">\r\n  <summary>Gets the day of the week represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>One of the enumeration values that indicates the day of the week of the current <see cref=\"T:System.DateTimeOffset\" /> object.</returns>\r\n</member>"
          },
          "DotNetName": "DayOfWeek"
        },
        {
          "NodeAttribute": {
            "Name": "DayOfYear",
            "ShowCategory": true,
            "Help": "Gets the day of the year represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.DayOfYear\">\r\n  <summary>Gets the day of the year represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The day of the year of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as a value between 1 and 366.</returns>\r\n</member>"
          },
          "DotNetName": "DayOfYear"
        },
        {
          "NodeAttribute": {
            "Name": "FromFileTime",
            "Help": "Converts the specified Windows file time to an equivalent local time.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.FromFileTime(System.Int64)\">\r\n  <summary>Converts the specified Windows file time to an equivalent local time.</summary>\r\n  <returns>An object that represents the date and time of <paramref name=\"fileTime\" /> with the offset set to the local time offset.</returns>\r\n  <param name=\"fileTime\">A Windows file time, expressed in ticks.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"filetime\" /> is less than zero.-or-<paramref name=\"filetime\" /> is greater than DateTimeOffset.MaxValue.Ticks.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A Windows file time, expressed in ticks.",
                "ImportedHelp": "<param name=\"fileTime\">A Windows file time, expressed in ticks.</param>"
              },
              "DotNetName": "fileTime"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object that represents the date and time of File Time with the offset set to the local time offset.",
              "ImportedHelp": "<returns>An object that represents the date and time of <paramref name=\"fileTime\" /> with the offset set to the local time offset.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromFileTime"
        },
        {
          "NodeAttribute": {
            "Name": "FromUnixTimeMilliseconds",
            "Help": "Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a DateTime value.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)\">\r\n  <summary>Converts a Unix time expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref=\"T:System.DateTimeOffset\" /> value.</summary>\r\n  <returns>A date and time value that represents the same moment in time as the Unix time. </returns>\r\n  <param name=\"milliseconds\">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"milliseconds\" /> is less than  -62,135,596,800,000. -or-<paramref name=\"milliseconds\" /> is greater than 253,402,300,799,999. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.",
                "ImportedHelp": "<param name=\"milliseconds\">A Unix time, expressed as the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </param>"
              },
              "DotNetName": "milliseconds"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "A date and time value that represents the same moment in time as the Unix time.",
              "ImportedHelp": "<returns>A date and time value that represents the same moment in time as the Unix time. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromUnixTimeMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "FromUnixTimeSeconds",
            "Help": "Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a DateTime value.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)\">\r\n  <summary>Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a <see cref=\"T:System.DateTimeOffset\" /> value. </summary>\r\n  <returns>A date and time value that represents the same moment in time as the Unix time. </returns>\r\n  <param name=\"seconds\">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"seconds\" /> is less than  -62,135,596,800. -or-<paramref name=\"seconds\" /> is greater than 253,402,300,799. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative.",
                "ImportedHelp": "<param name=\"seconds\">A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. </param>"
              },
              "DotNetName": "seconds"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "A date and time value that represents the same moment in time as the Unix time.",
              "ImportedHelp": "<returns>A date and time value that represents the same moment in time as the Unix time. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromUnixTimeSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "Hour",
            "ShowCategory": true,
            "Help": "Gets the hour component of the time represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Hour\">\r\n  <summary>Gets the hour component of the time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The hour component of the current <see cref=\"T:System.DateTimeOffset\" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</returns>\r\n</member>"
          },
          "DotNetName": "Hour"
        },
        {
          "NodeAttribute": {
            "Name": "LocalDateTime",
            "ShowCategory": true,
            "Help": "Gets a DateTime value that represents the local date and time of the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.LocalDateTime\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> value that represents the local date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The local date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</returns>\r\n</member>"
          },
          "DotNetName": "LocalDateTime"
        },
        {
          "NodeAttribute": {
            "Name": "Millisecond",
            "ShowCategory": true,
            "Help": "Gets the millisecond component of the time represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Millisecond\">\r\n  <summary>Gets the millisecond component of the time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The millisecond component of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as an integer between 0 and 999.</returns>\r\n</member>"
          },
          "DotNetName": "Millisecond"
        },
        {
          "NodeAttribute": {
            "Name": "Minute",
            "ShowCategory": true,
            "Help": "Gets the minute component of the time represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Minute\">\r\n  <summary>Gets the minute component of the time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The minute component of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as an integer between 0 and 59.</returns>\r\n</member>"
          },
          "DotNetName": "Minute"
        },
        {
          "NodeAttribute": {
            "Name": "Month",
            "ShowCategory": true,
            "Help": "Gets the month component of the date represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Month\">\r\n  <summary>Gets the month component of the date represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The month component of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as an integer between 1 and 12.</returns>\r\n</member>"
          },
          "DotNetName": "Month"
        },
        {
          "NodeAttribute": {
            "Name": "Now",
            "Help": "Gets a DateTime object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Now\">\r\n  <summary>Gets a <see cref=\"T:System.DateTimeOffset\" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>\r\n  <returns>A <see cref=\"T:System.DateTimeOffset\" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</returns>\r\n</member>"
          },
          "DotNetName": "Now"
        },
        {
          "NodeAttribute": {
            "Name": "Offset",
            "ShowCategory": true,
            "Help": "Gets the time's offset from Coordinated Universal Time (UTC).",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Offset\">\r\n  <summary>Gets the time's offset from Coordinated Universal Time (UTC). </summary>\r\n  <returns>The difference between the current <see cref=\"T:System.DateTimeOffset\" /> object's time value and Coordinated Universal Time (UTC).</returns>\r\n</member>"
          },
          "DotNetName": "Offset"
        },
        {
          "NodeAttribute": {
            "Name": "Second",
            "ShowCategory": true,
            "Help": "Gets the second component of the clock time represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Second\">\r\n  <summary>Gets the second component of the clock time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The second component of the <see cref=\"T:System.DateTimeOffset\" /> object, expressed as an integer value between 0 and 59.</returns>\r\n</member>"
          },
          "DotNetName": "Second"
        },
        {
          "NodeAttribute": {
            "Name": "Subtract",
            "Help": "Subtracts a specified time interval from the current DateTime object.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.Subtract(System.TimeSpan)\">\r\n  <summary>Subtracts a specified time interval from the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>An object that is equal to the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object, minus the time interval represented by <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">The time interval to subtract.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting <see cref=\"T:System.DateTimeOffset\" /> value is less than <see cref=\"F:System.DateTimeOffset.MinValue\" />.-or- The resulting <see cref=\"T:System.DateTimeOffset\" /> value is greater than <see cref=\"F:System.DateTimeOffset.MaxValue\" />.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The time interval to subtract.",
                "ImportedHelp": "<param name=\"value\">The time interval to subtract.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.DateTimeOffset",
            "PinAttribute": {
              "Help": "An object that is equal to the date and time represented by the current DateTime object, minus the time interval represented by Value.",
              "ImportedHelp": "<returns>An object that is equal to the date and time represented by the current <see cref=\"T:System.DateTimeOffset\" /> object, minus the time interval represented by <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "Ticks",
            "ShowCategory": true,
            "Help": "Gets the number of ticks that represents the date and time of the current DateTime object in clock time.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Ticks\">\r\n  <summary>Gets the number of ticks that represents the date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object in clock time.</summary>\r\n  <returns>The number of ticks in the <see cref=\"T:System.DateTimeOffset\" /> object's clock time.</returns>\r\n</member>"
          },
          "DotNetName": "Ticks"
        },
        {
          "NodeAttribute": {
            "Name": "TimeOfDay",
            "ShowCategory": true,
            "Help": "Gets the time of day for the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.TimeOfDay\">\r\n  <summary>Gets the time of day for the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The time interval of the current date that has elapsed since midnight.</returns>\r\n</member>"
          },
          "DotNetName": "TimeOfDay"
        },
        {
          "NodeAttribute": {
            "Name": "ToFileTime",
            "Help": "Converts the value of the current DateTime object to a Windows file time.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.ToFileTime\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTimeOffset\" /> object to a Windows file time.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as a Windows file time.</returns>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The value of the current DateTime object, expressed as a Windows file time.",
              "ImportedHelp": "<returns>The value of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as a Windows file time.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToFileTime"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "ShowCategory": false,
            "Help": "Converts the value of the current DateTime object to its equivalent string representation.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.ToString\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.DateTimeOffset\" /> object to its equivalent string representation.</summary>\r\n  <returns>A string representation of a <see cref=\"T:System.DateTimeOffset\" /> object that includes the offset appended at the end of the string.</returns>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The date and time is outside the range of dates supported by the calendar used by the current culture. </exception>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string representation of a DateTime object that includes the offset appended at the end of the string.",
              "ImportedHelp": "<returns>A string representation of a <see cref=\"T:System.DateTimeOffset\" /> object that includes the offset appended at the end of the string.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "ToUnixTimeMilliseconds",
            "Help": "Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.ToUnixTimeMilliseconds\">\r\n  <summary>Returns the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. </summary>\r\n  <returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. </returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z.",
              "ImportedHelp": "<returns>The number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUnixTimeMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "ToUnixTimeSeconds",
            "Help": "Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z.",
            "ImportedHelp": "<member name=\"M:System.DateTimeOffset.ToUnixTimeSeconds\">\r\n  <summary>Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z. </summary>\r\n  <returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z. </returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The number of seconds that have elapsed since 1970-01-01T00:00:00Z.",
              "ImportedHelp": "<returns>The number of seconds that have elapsed since 1970-01-01T00:00:00Z. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUnixTimeSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "UtcDateTime",
            "ShowCategory": true,
            "Help": "Gets a DateTime value that represents the Coordinated Universal Time (UTC) date and time of the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.UtcDateTime\">\r\n  <summary>Gets a <see cref=\"T:System.DateTime\" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The Coordinated Universal Time (UTC) date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object.</returns>\r\n</member>"
          },
          "DotNetName": "UtcDateTime"
        },
        {
          "NodeAttribute": {
            "Name": "UtcNow",
            "Help": "Gets a DateTime object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is Zero.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.UtcNow\">\r\n  <summary>Gets a <see cref=\"T:System.DateTimeOffset\" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref=\"F:System.TimeSpan.Zero\" />.</summary>\r\n  <returns>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref=\"F:System.TimeSpan.Zero\" />.</returns>\r\n</member>"
          },
          "DotNetName": "UtcNow"
        },
        {
          "NodeAttribute": {
            "Name": "UtcTicks",
            "ShowCategory": true,
            "Help": "Gets the number of ticks that represents the date and time of the current DateTime object in Coordinated Universal Time (UTC).",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.UtcTicks\">\r\n  <summary>Gets the number of ticks that represents the date and time of the current <see cref=\"T:System.DateTimeOffset\" /> object in Coordinated Universal Time (UTC).</summary>\r\n  <returns>The number of ticks in the <see cref=\"T:System.DateTimeOffset\" /> object's Coordinated Universal Time (UTC).</returns>\r\n</member>"
          },
          "DotNetName": "UtcTicks"
        },
        {
          "NodeAttribute": {
            "Name": "Year",
            "ShowCategory": true,
            "Help": "Gets the year component of the date represented by the current DateTime object.",
            "ImportedHelp": "<member name=\"P:System.DateTimeOffset.Year\">\r\n  <summary>Gets the year component of the date represented by the current <see cref=\"T:System.DateTimeOffset\" /> object.</summary>\r\n  <returns>The year component of the current <see cref=\"T:System.DateTimeOffset\" /> object, expressed as an integer value between 0 and 9999.</returns>\r\n</member>"
          },
          "DotNetName": "Year"
        }
      ],
      "DotNetName": "System.DateTimeOffset"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (0 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has no parameters and does not return a value.",
        "ImportedHelp": "<member name=\"T:System.Action\">\r\n  <summary>Encapsulates a method that has no parameters and does not return a value.</summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (0 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has no parameters and returns a value of the type specified by the  parameter.TResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`1\">\r\n  <summary>Encapsulates a method that has no parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`1"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (1 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has a single parameter and does not return a value.To browse the .NET Framework source code for this type, see the Reference Source.T: The type of the parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`1\">\r\n  <summary>Encapsulates a method that has a single parameter and does not return a value.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <param name=\"obj\">The parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T\">The type of the parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Name": "Arg"
              },
              "DotNetName": "obj"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`1"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (1 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has one parameter and returns a value of the type specified by the  parameter.To browse the .NET Framework source code for this type, see the Reference Source.T: The type of the parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`2\">\r\n  <summary>Encapsulates a method that has one parameter and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg\">The parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T\">The type of the parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "DotNetName": "arg"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`2"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (2 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has two parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`2\">\r\n  <summary>Encapsulates a method that has two parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`2"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (2 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has two parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`3\">\r\n  <summary>Encapsulates a method that has two parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`3"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (3 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has three parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`3\">\r\n  <summary>Encapsulates a method that has three parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`3"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (3 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has three parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`4\">\r\n  <summary>Encapsulates a method that has three parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`4"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (4 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has four parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`4\">\r\n  <summary>Encapsulates a method that has four parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`4"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (4 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has four parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`5\">\r\n  <summary>Encapsulates a method that has four parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`5"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (5 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has five parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`5\">\r\n  <summary>Encapsulates a method that has five parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`5"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (5 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has five parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`6\">\r\n  <summary>Encapsulates a method that has five parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`6"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (6 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has six parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`6\">\r\n  <summary>Encapsulates a method that has six parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`6"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (6 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has six parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`7\">\r\n  <summary>Encapsulates a method that has six parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`7"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (7 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has seven parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\nT7: The type of the seventh parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`7\">\r\n  <summary>Encapsulates a method that has seven parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg7\">The seventh parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T7\">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            },
            {
              "TypeFullName": "T7",
              "DotNetName": "arg7"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`7"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (7 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has seven parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\nT7: The type of the seventh parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`8\">\r\n  <summary>Encapsulates a method that has seven parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg7\">The seventh parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T7\">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            },
            {
              "TypeFullName": "T7",
              "DotNetName": "arg7"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`8"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (8 -> 0)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has eight parameters and does not return a value.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\nT7: The type of the seventh parameter of the method that this delegate encapsulates.\r\nT8: The type of the eighth parameter of the method that this delegate encapsulates.\r\n",
        "ImportedHelp": "<member name=\"T:System.Action`8\">\r\n  <summary>Encapsulates a method that has eight parameters and does not return a value.</summary>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg7\">The seventh parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg8\">The eighth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T7\">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T8\">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            },
            {
              "TypeFullName": "T7",
              "DotNetName": "arg7"
            },
            {
              "TypeFullName": "T8",
              "DotNetName": "arg8"
            }
          ],
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Action`8"
    },
    {
      "TypeAttribute": {
        "Name": "Delegate (8 -> 1)",
        "Category": "Primitive",
        "Help": "Encapsulates a method that has eight parameters and returns a value of the type specified by the  parameter.T1: The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\nT2: The type of the second parameter of the method that this delegate encapsulates.\r\nT3: The type of the third parameter of the method that this delegate encapsulates.\r\nT4: The type of the fourth parameter of the method that this delegate encapsulates.\r\nT5: The type of the fifth parameter of the method that this delegate encapsulates.\r\nT6: The type of the sixth parameter of the method that this delegate encapsulates.\r\nT7: The type of the seventh parameter of the method that this delegate encapsulates.\r\nT8: The type of the eighth parameter of the method that this delegate encapsulates.\r\nTResult: The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Func`9\">\r\n  <summary>Encapsulates a method that has eight parameters and returns a value of the type specified by the <paramref name=\"TResult\" /> parameter.</summary>\r\n  <returns>The return value of the method that this delegate encapsulates.</returns>\r\n  <param name=\"arg1\">The first parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg2\">The second parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg3\">The third parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg4\">The fourth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg5\">The fifth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg6\">The sixth parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg7\">The seventh parameter of the method that this delegate encapsulates.</param>\r\n  <param name=\"arg8\">The eighth parameter of the method that this delegate encapsulates.</param>\r\n  <typeparam name=\"T1\">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <typeparam name=\"T2\">The type of the second parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T3\">The type of the third parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T4\">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T5\">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T6\">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T7\">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"T8\">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>\r\n  <typeparam name=\"TResult\">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Invoke"
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "DotNetName": "arg1"
            },
            {
              "TypeFullName": "T2",
              "DotNetName": "arg2"
            },
            {
              "TypeFullName": "T3",
              "DotNetName": "arg3"
            },
            {
              "TypeFullName": "T4",
              "DotNetName": "arg4"
            },
            {
              "TypeFullName": "T5",
              "DotNetName": "arg5"
            },
            {
              "TypeFullName": "T6",
              "DotNetName": "arg6"
            },
            {
              "TypeFullName": "T7",
              "DotNetName": "arg7"
            },
            {
              "TypeFullName": "T8",
              "DotNetName": "arg8"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TResult",
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Invoke"
        }
      ],
      "DotNetName": "System.Func`9"
    },
    {
      "TypeAttribute": {
        "Name": "Disposable",
        "Category": "Primitive",
        "Help": "Provides a mechanism for releasing unmanaged resources.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.IDisposable\">\r\n  <summary>Provides a mechanism for releasing unmanaged resources.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsBuiltin": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Destroy",
            "ShowCategory": false,
            "Help": "Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.",
            "ImportedHelp": "<member name=\"M:System.IDisposable.Dispose\">\r\n  <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
            "Hidden": true
          },
          "DotNetName": "Dispose"
        }
      ],
      "DotNetName": "System.IDisposable"
    },
    {
      "TypeAttribute": {
        "Name": "Enum",
        "Category": "Primitive",
        "Help": "Provides the base class for enumerations.",
        "ImportedHelp": "<member name=\"T:System.Enum\">\r\n  <summary>Provides the base class for enumerations.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "TryParse",
            "Help": "Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.TEnum: The enumeration type to which to convert String.\r\n",
            "ImportedHelp": "<member name=\"M:System.Enum.TryParse``1(System.String,``0@)\">\r\n  <summary>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</summary>\r\n  <returns>true if the <paramref name=\"value\" /> parameter was converted successfully; otherwise, false.</returns>\r\n  <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n  <param name=\"result\">When this method returns, <paramref name=\"result\" /> contains an object of type <paramref name=\"TEnum\" /> whose value is represented by <paramref name=\"value\" /> if the parse operation succeeds. If the parse operation fails, <paramref name=\"result\" /> contains the default value of the underlying type of <paramref name=\"TEnum\" />. Note that this value need not be a member of the <paramref name=\"TEnum\" /> enumeration. This parameter is passed uninitialized.</param>\r\n  <typeparam name=\"TEnum\">The enumeration type to which to convert <paramref name=\"value\" />.</typeparam>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"TEnum\" /> is not an enumeration type.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "String",
                "Help": "The string representation of the enumeration name or underlying value to convert.",
                "ImportedHelp": "<param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out TEnum",
              "PinAttribute": {
                "Name": "Value",
                "Help": "When this method returns, Value contains an object of type TEnum whose value is represented by String if the parse operation succeeds. If the parse operation fails, Value contains the default value of the underlying type of TEnum. Note that this value need not be a member of the TEnum enumeration. This parameter is passed uninitialized.",
                "ImportedHelp": "<param name=\"result\">When this method returns, <paramref name=\"result\" /> contains an object of type <paramref name=\"TEnum\" /> whose value is represented by <paramref name=\"value\" /> if the parse operation succeeds. If the parse operation fails, <paramref name=\"result\" /> contains the default value of the underlying type of <paramref name=\"TEnum\" />. Note that this value need not be a member of the <paramref name=\"TEnum\" /> enumeration. This parameter is passed uninitialized.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Success",
              "Help": "true if the String parameter was converted successfully; otherwise, false.",
              "ImportedHelp": "<returns>true if the <paramref name=\"value\" /> parameter was converted successfully; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TryParse"
        }
      ],
      "DotNetName": "System.Enum"
    },
    {
      "TypeAttribute": {
        "Name": "Exception",
        "Category": "Primitive",
        "Help": "Represents errors that occur during application execution.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.Exception\">\r\n  <summary>Represents errors that occur during application execution.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "",
            "Help": "Initializes a new instance of the Exception class.",
            "ImportedHelp": "<member name=\"M:System.Exception.#ctor\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.Exception\" /> class.</summary>\r\n</member>"
          },
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Message",
            "Help": "Initializes a new instance of the Exception class with a specified error message.",
            "ImportedHelp": "<member name=\"M:System.Exception.#ctor(System.String)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.Exception\" /> class with a specified error message.</summary>\r\n  <param name=\"message\">The message that describes the error. </param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The message that describes the error.",
                "ImportedHelp": "<param name=\"message\">The message that describes the error. </param>"
              },
              "DotNetName": "message"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Data",
            "ShowCategory": true,
            "Help": "Gets a collection of key/value pairs that provide additional user-defined information about the exception.",
            "ImportedHelp": "<member name=\"P:System.Exception.Data\">\r\n  <summary>Gets a collection of key/value pairs that provide additional user-defined information about the exception.</summary>\r\n  <returns>An object that implements the <see cref=\"T:System.Collections.IDictionary\" /> interface and contains a collection of user-defined key/value pairs. The default is an empty collection.</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "DotNetName": "Data"
        },
        {
          "NodeAttribute": {
            "Name": "HelpLink",
            "ShowCategory": true,
            "Help": "Gets or sets a link to the help file associated with this exception.",
            "ImportedHelp": "<member name=\"P:System.Exception.HelpLink\">\r\n  <summary>Gets or sets a link to the help file associated with this exception.</summary>\r\n  <returns>The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</returns>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "DotNetName": "HelpLink"
        },
        {
          "NodeAttribute": {
            "Name": "InnerException",
            "ShowCategory": true,
            "Help": "Gets the Exception instance that caused the current exception.",
            "ImportedHelp": "<member name=\"P:System.Exception.InnerException\">\r\n  <summary>Gets the <see cref=\"T:System.Exception\" /> instance that caused the current exception.</summary>\r\n  <returns>An object that describes the error that caused the current exception. The <see cref=\"P:System.Exception.InnerException\" /> property returns the same value as was passed into the <see cref=\"M:System.Exception.#ctor(System.String,System.Exception)\" /> constructor, or null if the inner exception value was not supplied to the constructor. This property is read-only.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "InnerException"
        },
        {
          "NodeAttribute": {
            "Name": "Message",
            "ShowCategory": true,
            "Help": "Gets a message that describes the current exception.",
            "ImportedHelp": "<member name=\"P:System.Exception.Message\">\r\n  <summary>Gets a message that describes the current exception.</summary>\r\n  <returns>The error message that explains the reason for the exception, or an empty string (\"\").</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Message"
        },
        {
          "NodeAttribute": {
            "Name": "Source",
            "ShowCategory": true,
            "Help": "Gets or sets the name of the application or the object that causes the error.",
            "ImportedHelp": "<member name=\"P:System.Exception.Source\">\r\n  <summary>Gets or sets the name of the application or the object that causes the error.</summary>\r\n  <returns>The name of the application or the object that causes the error.</returns>\r\n  <exception cref=\"T:System.ArgumentException\">The object must be a runtime <see cref=\"N:System.Reflection\" /> object</exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "DotNetName": "Source"
        },
        {
          "NodeAttribute": {
            "Name": "StackTrace",
            "ShowCategory": true,
            "Help": "Gets a string representation of the immediate frames on the call stack.",
            "ImportedHelp": "<member name=\"P:System.Exception.StackTrace\">\r\n  <summary>Gets a string representation of the immediate frames on the call stack.</summary>\r\n  <returns>A string that describes the immediate frames of the call stack.</returns>\r\n  <filterpriority>2</filterpriority>\r\n  <PermissionSet>\r\n    <IPermission class=\"System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" PathDiscovery=\"*AllFiles*\" />\r\n  </PermissionSet>\r\n</member>"
          },
          "DotNetName": "StackTrace"
        }
      ],
      "DotNetName": "System.Exception"
    },
    {
      "TypeAttribute": {
        "Name": "FileAccess",
        "Category": "IO",
        "Help": "Defines constants for read, write, or read/write access to a file.",
        "ImportedHelp": "<member name=\"T:System.IO.FileAccess\">\r\n  <summary>Defines constants for read, write, or read/write access to a file.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.IO.FileAccess"
    },
    {
      "TypeAttribute": {
        "Name": "FileMode",
        "Category": "IO",
        "Help": "Specifies how the operating system should open a file.",
        "ImportedHelp": "<member name=\"T:System.IO.FileMode\">\r\n  <summary>Specifies how the operating system should open a file.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.IO.FileMode"
    },
    {
      "TypeAttribute": {
        "Name": "FileShare",
        "Category": "IO",
        "Help": "Contains constants for controlling the kind of access other T:System.IO.FileStream objects can have to the same file.",
        "ImportedHelp": "<member name=\"T:System.IO.FileShare\">\r\n  <summary>Contains constants for controlling the kind of access other <see cref=\"T:System.IO.FileStream\" /> objects can have to the same file.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.IO.FileShare"
    },
    {
      "TypeAttribute": {
        "Name": "Float32",
        "Category": "Primitive",
        "KnownTypeStructure": 2,
        "Help": "Represents a single-precision floating-point number.",
        "ImportedHelp": "<member name=\"T:System.Single\">\r\n  <summary>Represents a single-precision floating-point number.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Epsilon",
            "Help": "Represents the smallest positive Float32 value that is greater than zero. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.Epsilon\">\r\n  <summary>Represents the smallest positive <see cref=\"T:System.Single\" /> value that is greater than zero. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Epsilon"
        },
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of Float32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.MaxValue\">\r\n  <summary>Represents the largest possible value of <see cref=\"T:System.Single\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Float32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.Single\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "NaN",
            "Help": "Represents not a number (NaN). This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.NaN\">\r\n  <summary>Represents not a number (NaN). This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "NaN"
        },
        {
          "NodeAttribute": {
            "Name": "NegativeInfinity",
            "Help": "Represents negative infinity. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.NegativeInfinity\">\r\n  <summary>Represents negative infinity. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "NegativeInfinity"
        },
        {
          "NodeAttribute": {
            "Name": "PositiveInfinity",
            "Help": "Represents positive infinity. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Single.PositiveInfinity\">\r\n  <summary>Represents positive infinity. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "PositiveInfinity"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Single.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Single"
    },
    {
      "TypeAttribute": {
        "Name": "Float64",
        "Category": "Primitive",
        "KnownTypeStructure": 2,
        "Help": "Represents a double-precision floating-point number.",
        "ImportedHelp": "<member name=\"T:System.Double\">\r\n  <summary>Represents a double-precision floating-point number.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Epsilon",
            "Help": "Represents the smallest positive Float64 value that is greater than zero. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.Epsilon\">\r\n  <summary>Represents the smallest positive <see cref=\"T:System.Double\" /> value that is greater than zero. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Epsilon"
        },
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of a Float64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.MaxValue\">\r\n  <summary>Represents the largest possible value of a <see cref=\"T:System.Double\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of a Float64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.MinValue\">\r\n  <summary>Represents the smallest possible value of a <see cref=\"T:System.Double\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "NaN",
            "Help": "Represents a value that is not a number (NaN). This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.NaN\">\r\n  <summary>Represents a value that is not a number (NaN). This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "NaN"
        },
        {
          "NodeAttribute": {
            "Name": "NegativeInfinity",
            "Help": "Represents negative infinity. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.NegativeInfinity\">\r\n  <summary>Represents negative infinity. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "NegativeInfinity"
        },
        {
          "NodeAttribute": {
            "Name": "PositiveInfinity",
            "Help": "Represents positive infinity. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Double.PositiveInfinity\">\r\n  <summary>Represents positive infinity. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "PositiveInfinity"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Double.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Double"
    },
    {
      "TypeAttribute": {
        "Name": "Integer16",
        "Category": "Primitive",
        "KnownTypeStructure": 1,
        "Help": "Represents a 16-bit signed integer.",
        "ImportedHelp": "<member name=\"T:System.Int16\">\r\n  <summary>Represents a 16-bit signed integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of an Integer16. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int16.MaxValue\">\r\n  <summary>Represents the largest possible value of an <see cref=\"T:System.Int16\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer16. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int16.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.Int16\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Int16.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Int16"
    },
    {
      "TypeAttribute": {
        "Name": "Integer16",
        "Category": "Primitive",
        "Version": "Unsigned",
        "KnownTypeStructure": 1,
        "Help": "Represents a 16-bit unsigned integer.",
        "ImportedHelp": "<member name=\"T:System.UInt16\">\r\n  <summary>Represents a 16-bit unsigned integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of Integer16. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt16.MaxValue\">\r\n  <summary>Represents the largest possible value of <see cref=\"T:System.UInt16\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer16. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt16.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.UInt16\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation using the specified format.",
            "ImportedHelp": "<member name=\"M:System.UInt16.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">The <paramref name=\"format\" /> parameter is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.UInt16"
    },
    {
      "TypeAttribute": {
        "Name": "Integer32",
        "Category": "Primitive",
        "KnownTypeStructure": 1,
        "Help": "Represents a 32-bit signed integer.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.Int32\">\r\n  <summary>Represents a 32-bit signed integer.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of an Integer32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int32.MaxValue\">\r\n  <summary>Represents the largest possible value of an <see cref=\"T:System.Int32\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int32.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.Int32\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Int32.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A standard or custom numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> is invalid or not supported. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A standard or custom numeric format string.",
                "ImportedHelp": "<param name=\"format\">A standard or custom numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Int32"
    },
    {
      "TypeAttribute": {
        "Name": "Integer32",
        "Category": "Primitive",
        "Version": "Unsigned",
        "KnownTypeStructure": 1,
        "Help": "Represents a 32-bit unsigned integer.",
        "ImportedHelp": "<member name=\"T:System.UInt32\">\r\n  <summary>Represents a 32-bit unsigned integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of Integer32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt32.MaxValue\">\r\n  <summary>Represents the largest possible value of <see cref=\"T:System.UInt32\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer32. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt32.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.UInt32\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation using the specified format.",
            "ImportedHelp": "<member name=\"M:System.UInt32.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">The <paramref name=\"format\" /> parameter is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.UInt32"
    },
    {
      "TypeAttribute": {
        "Name": "Integer64",
        "Category": "Primitive",
        "KnownTypeStructure": 1,
        "Help": "Represents a 64-bit signed integer.",
        "ImportedHelp": "<member name=\"T:System.Int64\">\r\n  <summary>Represents a 64-bit signed integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of an Int64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int64.MaxValue\">\r\n  <summary>Represents the largest possible value of an Int64. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of an Int64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.Int64.MinValue\">\r\n  <summary>Represents the smallest possible value of an Int64. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.Int64.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> is invalid or not supported.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.Int64"
    },
    {
      "TypeAttribute": {
        "Name": "Integer64",
        "Category": "Primitive",
        "Version": "Unsigned",
        "KnownTypeStructure": 1,
        "Help": "Represents a 64-bit unsigned integer.",
        "ImportedHelp": "<member name=\"T:System.UInt64\">\r\n  <summary>Represents a 64-bit unsigned integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of Integer64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt64.MaxValue\">\r\n  <summary>Represents the largest possible value of <see cref=\"T:System.UInt64\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer64. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.UInt64.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.UInt64\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation using the specified format.",
            "ImportedHelp": "<member name=\"M:System.UInt64.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">The <paramref name=\"format\" /> parameter is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A numeric format string.",
                "ImportedHelp": "<param name=\"format\">A numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.UInt64"
    },
    {
      "TypeAttribute": {
        "Name": "Integer8",
        "Category": "Primitive",
        "KnownTypeStructure": 1,
        "Help": "Represents an 8-bit signed integer.",
        "ImportedHelp": "<member name=\"T:System.SByte\">\r\n  <summary>Represents an 8-bit signed integer.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "MaxValue",
            "Help": "Represents the largest possible value of Integer8. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.SByte.MaxValue\">\r\n  <summary>Represents the largest possible value of <see cref=\"T:System.SByte\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MaxValue"
        },
        {
          "NodeAttribute": {
            "Name": "MinValue",
            "Help": "Represents the smallest possible value of Integer8. This field is constant.",
            "ImportedHelp": "<member name=\"F:System.SByte.MinValue\">\r\n  <summary>Represents the smallest possible value of <see cref=\"T:System.SByte\" />. This field is constant.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "MinValue"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the numeric value of this instance to its equivalent string representation, using the specified format.",
            "ImportedHelp": "<member name=\"M:System.SByte.ToString(System.String)\">\r\n  <summary>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</summary>\r\n  <returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>\r\n  <param name=\"format\">A standard or custom numeric format string.</param>\r\n  <exception cref=\"T:System.FormatException\">\r\n    <paramref name=\"format\" /> is invalid. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A standard or custom numeric format string.",
                "ImportedHelp": "<param name=\"format\">A standard or custom numeric format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the value of this instance as specified by Format.",
              "ImportedHelp": "<returns>The string representation of the value of this instance as specified by <paramref name=\"format\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        }
      ],
      "DotNetName": "System.SByte"
    },
    {
      "TypeAttribute": {
        "Name": "List",
        "Category": "Collections",
        "Help": "Represents a read-only collection of elements that can be accessed by index.T: The type of elements in the read-only list. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Collections.Generic.IReadOnlyList`1\">\r\n  <summary>Represents a read-only collection of elements that can be accessed by index. </summary>\r\n  <typeparam name=\"T\">The type of elements in the read-only list. This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n</member>",
        "IsBuiltin": true
      },
      "Members": [],
      "DotNetName": "System.Collections.Generic.IReadOnlyList`1"
    },
    {
      "TypeAttribute": {
        "Name": "Math",
        "Category": "Math",
        "Help": "Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.Math\">\r\n  <summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "Hidden": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Abs",
            "Category": "Primitive.Integer8",
            "Help": "Returns the absolute value of an 8-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.Math.Abs(System.SByte)\">\r\n  <summary>Returns the absolute value of an 8-bit signed integer.</summary>\r\n  <returns>An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.SByte.MaxValue\" />.</returns>\r\n  <param name=\"value\">A number that is greater than <see cref=\"F:System.SByte.MinValue\" />, but less than or equal to <see cref=\"F:System.SByte.MaxValue\" />.</param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> equals <see cref=\"F:System.SByte.MinValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.SByte",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number that is greater than MinValue, but less than or equal to MaxValue.",
                "ImportedHelp": "<param name=\"value\">A number that is greater than <see cref=\"F:System.SByte.MinValue\" />, but less than or equal to <see cref=\"F:System.SByte.MaxValue\" />.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.SByte",
            "PinAttribute": {
              "Help": "An 8-bit signed integer, x, such that 0 ≤ x ≤MaxValue.",
              "ImportedHelp": "<returns>An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.SByte.MaxValue\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Abs"
        },
        {
          "NodeAttribute": {
            "Name": "Abs",
            "Category": "Primitive.Integer16",
            "Help": "Returns the absolute value of a 16-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.Math.Abs(System.Int16)\">\r\n  <summary>Returns the absolute value of a 16-bit signed integer.</summary>\r\n  <returns>A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int16.MaxValue\" />.</returns>\r\n  <param name=\"value\">A number that is greater than <see cref=\"F:System.Int16.MinValue\" />, but less than or equal to <see cref=\"F:System.Int16.MaxValue\" />.</param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> equals <see cref=\"F:System.Int16.MinValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int16",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number that is greater than MinValue, but less than or equal to MaxValue.",
                "ImportedHelp": "<param name=\"value\">A number that is greater than <see cref=\"F:System.Int16.MinValue\" />, but less than or equal to <see cref=\"F:System.Int16.MaxValue\" />.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int16",
            "PinAttribute": {
              "Help": "A 16-bit signed integer, x, such that 0 ≤ x ≤MaxValue.",
              "ImportedHelp": "<returns>A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int16.MaxValue\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Abs"
        },
        {
          "NodeAttribute": {
            "Name": "Abs",
            "Category": "Primitive.Integer32",
            "Help": "Returns the absolute value of a 32-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.Math.Abs(System.Int32)\">\r\n  <summary>Returns the absolute value of a 32-bit signed integer.</summary>\r\n  <returns>A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int32.MaxValue\" />.</returns>\r\n  <param name=\"value\">A number that is greater than <see cref=\"F:System.Int32.MinValue\" />, but less than or equal to <see cref=\"F:System.Int32.MaxValue\" />.</param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> equals <see cref=\"F:System.Int32.MinValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number that is greater than MinValue, but less than or equal to MaxValue.",
                "ImportedHelp": "<param name=\"value\">A number that is greater than <see cref=\"F:System.Int32.MinValue\" />, but less than or equal to <see cref=\"F:System.Int32.MaxValue\" />.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A 32-bit signed integer, x, such that 0 ≤ x ≤MaxValue.",
              "ImportedHelp": "<returns>A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int32.MaxValue\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Abs"
        },
        {
          "NodeAttribute": {
            "Name": "Abs",
            "Category": "Primitive.Integer64",
            "Help": "Returns the absolute value of a 64-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.Math.Abs(System.Int64)\">\r\n  <summary>Returns the absolute value of a 64-bit signed integer.</summary>\r\n  <returns>A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int64.MaxValue\" />.</returns>\r\n  <param name=\"value\">A number that is greater than <see cref=\"F:System.Int64.MinValue\" />, but less than or equal to <see cref=\"F:System.Int64.MaxValue\" />.</param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> equals <see cref=\"F:System.Int64.MinValue\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number that is greater than MinValue, but less than or equal to MaxValue.",
                "ImportedHelp": "<param name=\"value\">A number that is greater than <see cref=\"F:System.Int64.MinValue\" />, but less than or equal to <see cref=\"F:System.Int64.MaxValue\" />.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "A 64-bit signed integer, x, such that 0 ≤ x ≤MaxValue.",
              "ImportedHelp": "<returns>A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref=\"F:System.Int64.MaxValue\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Abs"
        },
        {
          "NodeAttribute": {
            "Name": "Acos",
            "Category": "Primitive.Float64",
            "Help": "Returns the angle whose cosine is the specified number.",
            "ImportedHelp": "<member name=\"M:System.Math.Acos(System.Double)\">\r\n  <summary>Returns the angle whose cosine is the specified number.</summary>\r\n  <returns>An angle, θ, measured in radians, such that 0 ≤θ≤π-or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> &lt; -1 or <paramref name=\"d\" /> &gt; 1 or <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"d\">A number representing a cosine, where <paramref name=\"d\" /> must be greater than or equal to -1, but less than or equal to 1. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number representing a cosine, where Input must be greater than or equal to -1, but less than or equal to 1.",
                "ImportedHelp": "<param name=\"d\">A number representing a cosine, where <paramref name=\"d\" /> must be greater than or equal to -1, but less than or equal to 1. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "An angle, θ, measured in radians, such that 0 ≤θ≤π-or- NaN if Input < -1 or Input > 1 or Input equals NaN.",
              "ImportedHelp": "<returns>An angle, θ, measured in radians, such that 0 ≤θ≤π-or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> &lt; -1 or <paramref name=\"d\" /> &gt; 1 or <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Acos"
        },
        {
          "NodeAttribute": {
            "Name": "Asin",
            "Category": "Primitive.Float64",
            "Help": "Returns the angle whose sine is the specified number.",
            "ImportedHelp": "<member name=\"M:System.Math.Asin(System.Double)\">\r\n  <summary>Returns the angle whose sine is the specified number.</summary>\r\n  <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> &lt; -1 or <paramref name=\"d\" /> &gt; 1 or <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"d\">A number representing a sine, where <paramref name=\"d\" /> must be greater than or equal to -1, but less than or equal to 1. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number representing a sine, where Input must be greater than or equal to -1, but less than or equal to 1.",
                "ImportedHelp": "<param name=\"d\">A number representing a sine, where <paramref name=\"d\" /> must be greater than or equal to -1, but less than or equal to 1. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- NaN if Input < -1 or Input > 1 or Input equals NaN.",
              "ImportedHelp": "<returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> &lt; -1 or <paramref name=\"d\" /> &gt; 1 or <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Asin"
        },
        {
          "NodeAttribute": {
            "Name": "Atan",
            "Category": "Primitive.Float64",
            "Help": "Returns the angle whose tangent is the specified number.",
            "ImportedHelp": "<member name=\"M:System.Math.Atan(System.Double)\">\r\n  <summary>Returns the angle whose tangent is the specified number.</summary>\r\n  <returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NegativeInfinity\" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.PositiveInfinity\" />.</returns>\r\n  <param name=\"d\">A number representing a tangent. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number representing a tangent.",
                "ImportedHelp": "<param name=\"d\">A number representing a tangent. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- NaN if Input equals NaN, -π/2 rounded to double precision (-1.5707963267949) if Input equals NegativeInfinity, or π/2 rounded to double precision (1.5707963267949) if Input equals PositiveInfinity.",
              "ImportedHelp": "<returns>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <see cref=\"F:System.Double.NaN\" /> if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NegativeInfinity\" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name=\"d\" /> equals <see cref=\"F:System.Double.PositiveInfinity\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Atan"
        },
        {
          "NodeAttribute": {
            "Name": "Atan2",
            "Category": "Primitive.Float64",
            "Help": "Returns the angle whose tangent is the quotient of two specified numbers.",
            "ImportedHelp": "<member name=\"M:System.Math.Atan2(System.Double,System.Double)\">\r\n  <summary>Returns the angle whose tangent is the quotient of two specified numbers.</summary>\r\n  <returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name=\"y\" /> / <paramref name=\"x\" />, where (<paramref name=\"x\" />, <paramref name=\"y\" />) is a point in the Cartesian plane. Observe the following: For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 1, 0 &lt; θ &lt; π/2.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 2, π/2 &lt; θ≤π.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 3, -π &lt; θ &lt; -π/2.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If <paramref name=\"x\" /> or <paramref name=\"y\" /> is <see cref=\"F:System.Double.NaN\" />, or if <paramref name=\"x\" /> and <paramref name=\"y\" /> are either <see cref=\"F:System.Double.PositiveInfinity\" /> or <see cref=\"F:System.Double.NegativeInfinity\" />, the method returns <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"y\">The y coordinate of a point. </param>\r\n  <param name=\"x\">The x coordinate of a point. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "The y coordinate of a point.",
                "ImportedHelp": "<param name=\"y\">The y coordinate of a point. </param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "The x coordinate of a point.",
                "ImportedHelp": "<param name=\"x\">The x coordinate of a point. </param>"
              },
              "DotNetName": "x"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = Y / X, where (X, Y) is a point in the Cartesian plane. Observe the following: For (X, Y) in quadrant 1, 0 < θ < π/2.For (X, Y) in quadrant 2, π/2 < θ≤π.For (X, Y) in quadrant 3, -π < θ < -π/2.For (X, Y) in quadrant 4, -π/2 < θ < 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If X or Y is NaN, or if X and Y are either PositiveInfinity or NegativeInfinity, the method returns NaN.",
              "ImportedHelp": "<returns>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name=\"y\" /> / <paramref name=\"x\" />, where (<paramref name=\"x\" />, <paramref name=\"y\" />) is a point in the Cartesian plane. Observe the following: For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 1, 0 &lt; θ &lt; π/2.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 2, π/2 &lt; θ≤π.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 3, -π &lt; θ &lt; -π/2.For (<paramref name=\"x\" />, <paramref name=\"y\" />) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If <paramref name=\"x\" /> or <paramref name=\"y\" /> is <see cref=\"F:System.Double.NaN\" />, or if <paramref name=\"x\" /> and <paramref name=\"y\" /> are either <see cref=\"F:System.Double.PositiveInfinity\" /> or <see cref=\"F:System.Double.NegativeInfinity\" />, the method returns <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Atan2"
        },
        {
          "NodeAttribute": {
            "Name": "Cos",
            "Category": "Primitive.Float64",
            "Help": "Returns the cosine of the specified angle.",
            "ImportedHelp": "<member name=\"M:System.Math.Cos(System.Double)\">\r\n  <summary>Returns the cosine of the specified angle.</summary>\r\n  <returns>The cosine of <paramref name=\"d\" />. If <paramref name=\"d\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"d\">An angle, measured in radians. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "An angle, measured in radians.",
                "ImportedHelp": "<param name=\"d\">An angle, measured in radians. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "The cosine of Input. If Input is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.",
              "ImportedHelp": "<returns>The cosine of <paramref name=\"d\" />. If <paramref name=\"d\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Cos"
        },
        {
          "NodeAttribute": {
            "Name": "DIVMOD",
            "Category": "Primitive.Integer64",
            "Tags": "/ Integer",
            "Help": "Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.",
            "ImportedHelp": "<member name=\"M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)\">\r\n  <summary>Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</summary>\r\n  <returns>The quotient of the specified numbers.</returns>\r\n  <param name=\"a\">The dividend. </param>\r\n  <param name=\"b\">The divisor. </param>\r\n  <param name=\"result\">The remainder. </param>\r\n  <exception cref=\"T:System.DivideByZeroException\">\r\n    <paramref name=\"b\" /> is zero.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The dividend.",
                "ImportedHelp": "<param name=\"a\">The dividend. </param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The divisor.",
                "ImportedHelp": "<param name=\"b\">The divisor. </param>"
              },
              "DotNetName": "b"
            },
            {
              "TypeFullName": "out System.Int64",
              "PinAttribute": {
                "Name": "Remainder",
                "Help": "The remainder.",
                "ImportedHelp": "<param name=\"result\">The remainder. </param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int64",
            "PinAttribute": {
              "Help": "The quotient of the specified numbers.",
              "ImportedHelp": "<returns>The quotient of the specified numbers.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DivRem"
        },
        {
          "NodeAttribute": {
            "Name": "DIVMOD",
            "Category": "Primitive.Integer32",
            "Tags": "/ Integer",
            "Help": "Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.",
            "ImportedHelp": "<member name=\"M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)\">\r\n  <summary>Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</summary>\r\n  <returns>The quotient of the specified numbers.</returns>\r\n  <param name=\"a\">The dividend. </param>\r\n  <param name=\"b\">The divisor. </param>\r\n  <param name=\"result\">The remainder. </param>\r\n  <exception cref=\"T:System.DivideByZeroException\">\r\n    <paramref name=\"b\" /> is zero.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The dividend.",
                "ImportedHelp": "<param name=\"a\">The dividend. </param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The divisor.",
                "ImportedHelp": "<param name=\"b\">The divisor. </param>"
              },
              "DotNetName": "b"
            },
            {
              "TypeFullName": "out System.Int32",
              "PinAttribute": {
                "Name": "Remainder",
                "Help": "The remainder.",
                "ImportedHelp": "<param name=\"result\">The remainder. </param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The quotient of the specified numbers.",
              "ImportedHelp": "<returns>The quotient of the specified numbers.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DivRem"
        },
        {
          "NodeAttribute": {
            "Name": "Exp",
            "Category": "Primitive.Float64",
            "Help": "Returns e raised to the specified power.",
            "ImportedHelp": "<member name=\"M:System.Math.Exp(System.Double)\">\r\n  <summary>Returns e raised to the specified power.</summary>\r\n  <returns>The number e raised to the power <paramref name=\"d\" />. If <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" /> or <see cref=\"F:System.Double.PositiveInfinity\" />, that value is returned. If <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NegativeInfinity\" />, 0 is returned.</returns>\r\n  <param name=\"d\">A number specifying a power. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A number specifying a power.",
                "ImportedHelp": "<param name=\"d\">A number specifying a power. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "The number e raised to the power Input. If Input equals NaN or PositiveInfinity, that value is returned. If Input equals NegativeInfinity, 0 is returned.",
              "ImportedHelp": "<returns>The number e raised to the power <paramref name=\"d\" />. If <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NaN\" /> or <see cref=\"F:System.Double.PositiveInfinity\" />, that value is returned. If <paramref name=\"d\" /> equals <see cref=\"F:System.Double.NegativeInfinity\" />, 0 is returned.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Exp"
        },
        {
          "NodeAttribute": {
            "Name": "Ln",
            "Category": "Primitive.Float64",
            "Help": "Returns the natural (base e) logarithm of a specified number.",
            "ImportedHelp": "<member name=\"M:System.Math.Log(System.Double)\">\r\n  <summary>Returns the natural (base e) logarithm of a specified number.</summary>\r\n  <returns>One of the values in the following table. <paramref name=\"d\" /> parameterReturn value Positive The natural logarithm of <paramref name=\"d\" />; that is, ln <paramref name=\"d\" />, or log e<paramref name=\"d\" />Zero <see cref=\"F:System.Double.NegativeInfinity\" />Negative <see cref=\"F:System.Double.NaN\" />Equal to <see cref=\"F:System.Double.NaN\" /><see cref=\"F:System.Double.NaN\" />Equal to <see cref=\"F:System.Double.PositiveInfinity\" /><see cref=\"F:System.Double.PositiveInfinity\" /></returns>\r\n  <param name=\"d\">The number whose logarithm is to be found. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The number whose logarithm is to be found.",
                "ImportedHelp": "<param name=\"d\">The number whose logarithm is to be found. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "One of the values in the following table. Input parameterReturn value Positive The natural logarithm of Input; that is, ln Input, or log eInputZero NegativeInfinityNegative NaNEqual to NaNNaNEqual to PositiveInfinityPositiveInfinity",
              "ImportedHelp": "<returns>One of the values in the following table. <paramref name=\"d\" /> parameterReturn value Positive The natural logarithm of <paramref name=\"d\" />; that is, ln <paramref name=\"d\" />, or log e<paramref name=\"d\" />Zero <see cref=\"F:System.Double.NegativeInfinity\" />Negative <see cref=\"F:System.Double.NaN\" />Equal to <see cref=\"F:System.Double.NaN\" /><see cref=\"F:System.Double.NaN\" />Equal to <see cref=\"F:System.Double.PositiveInfinity\" /><see cref=\"F:System.Double.PositiveInfinity\" /></returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Log"
        },
        {
          "NodeAttribute": {
            "Name": "Log",
            "Category": "Primitive.Float64",
            "Help": "Returns the logarithm of a specified number in a specified base.",
            "ImportedHelp": "<member name=\"M:System.Math.Log(System.Double,System.Double)\">\r\n  <summary>Returns the logarithm of a specified number in a specified base.</summary>\r\n  <returns>One of the values in the following table. (+Infinity denotes <see cref=\"F:System.Double.PositiveInfinity\" />, -Infinity denotes <see cref=\"F:System.Double.NegativeInfinity\" />, and NaN denotes <see cref=\"F:System.Double.NaN\" />.)<paramref name=\"a\" /><paramref name=\"newBase\" />Return value<paramref name=\"a\" />&gt; 0(0 &lt;<paramref name=\"newBase\" />&lt; 1) -or-(<paramref name=\"newBase\" />&gt; 1)lognewBase(a)<paramref name=\"a\" />&lt; 0(any value)NaN(any value)<paramref name=\"newBase\" />&lt; 0NaN<paramref name=\"a\" /> != 1<paramref name=\"newBase\" /> = 0NaN<paramref name=\"a\" /> != 1<paramref name=\"newBase\" /> = +InfinityNaN<paramref name=\"a\" /> = NaN(any value)NaN(any value)<paramref name=\"newBase\" /> = NaNNaN(any value)<paramref name=\"newBase\" /> = 1NaN<paramref name=\"a\" /> = 00 &lt;<paramref name=\"newBase\" />&lt; 1 +Infinity<paramref name=\"a\" /> = 0<paramref name=\"newBase\" />&gt; 1-Infinity<paramref name=\"a\" /> =  +Infinity0 &lt;<paramref name=\"newBase\" />&lt; 1-Infinity<paramref name=\"a\" /> =  +Infinity<paramref name=\"newBase\" />&gt; 1+Infinity<paramref name=\"a\" /> = 1<paramref name=\"newBase\" /> = 00<paramref name=\"a\" /> = 1<paramref name=\"newBase\" /> = +Infinity0</returns>\r\n  <param name=\"a\">The number whose logarithm is to be found. </param>\r\n  <param name=\"newBase\">The base of the logarithm. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The number whose logarithm is to be found.",
                "ImportedHelp": "<param name=\"a\">The number whose logarithm is to be found. </param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "The base of the logarithm.",
                "ImportedHelp": "<param name=\"newBase\">The base of the logarithm. </param>"
              },
              "DotNetName": "newBase"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "One of the values in the following table. (+Infinity denotes PositiveInfinity, -Infinity denotes NegativeInfinity, and NaN denotes NaN.)InputNew BaseReturn valueInput> 0(0 <New Base< 1) -or-(New Base> 1)lognewBase(a)Input< 0(any value)NaN(any value)New Base< 0NaNInput != 1New Base = 0NaNInput != 1New Base = +InfinityNaNInput = NaN(any value)NaN(any value)New Base = NaNNaN(any value)New Base = 1NaNInput = 00 <New Base< 1 +InfinityInput = 0New Base> 1-InfinityInput =  +Infinity0 <New Base< 1-InfinityInput =  +InfinityNew Base> 1+InfinityInput = 1New Base = 00Input = 1New Base = +Infinity0",
              "ImportedHelp": "<returns>One of the values in the following table. (+Infinity denotes <see cref=\"F:System.Double.PositiveInfinity\" />, -Infinity denotes <see cref=\"F:System.Double.NegativeInfinity\" />, and NaN denotes <see cref=\"F:System.Double.NaN\" />.)<paramref name=\"a\" /><paramref name=\"newBase\" />Return value<paramref name=\"a\" />&gt; 0(0 &lt;<paramref name=\"newBase\" />&lt; 1) -or-(<paramref name=\"newBase\" />&gt; 1)lognewBase(a)<paramref name=\"a\" />&lt; 0(any value)NaN(any value)<paramref name=\"newBase\" />&lt; 0NaN<paramref name=\"a\" /> != 1<paramref name=\"newBase\" /> = 0NaN<paramref name=\"a\" /> != 1<paramref name=\"newBase\" /> = +InfinityNaN<paramref name=\"a\" /> = NaN(any value)NaN(any value)<paramref name=\"newBase\" /> = NaNNaN(any value)<paramref name=\"newBase\" /> = 1NaN<paramref name=\"a\" /> = 00 &lt;<paramref name=\"newBase\" />&lt; 1 +Infinity<paramref name=\"a\" /> = 0<paramref name=\"newBase\" />&gt; 1-Infinity<paramref name=\"a\" /> =  +Infinity0 &lt;<paramref name=\"newBase\" />&lt; 1-Infinity<paramref name=\"a\" /> =  +Infinity<paramref name=\"newBase\" />&gt; 1+Infinity<paramref name=\"a\" /> = 1<paramref name=\"newBase\" /> = 00<paramref name=\"a\" /> = 1<paramref name=\"newBase\" /> = +Infinity0</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Log"
        },
        {
          "NodeAttribute": {
            "Name": "Pow",
            "Category": "Primitive.Float64",
            "Help": "Returns a specified number raised to the specified power.",
            "ImportedHelp": "<member name=\"M:System.Math.Pow(System.Double,System.Double)\">\r\n  <summary>Returns a specified number raised to the specified power.</summary>\r\n  <returns>The number <paramref name=\"x\" /> raised to the power <paramref name=\"y\" />.</returns>\r\n  <param name=\"x\">A double-precision floating-point number to be raised to a power. </param>\r\n  <param name=\"y\">A double-precision floating-point number that specifies a power. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A double-precision floating-point number to be raised to a power.",
                "ImportedHelp": "<param name=\"x\">A double-precision floating-point number to be raised to a power. </param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Exponent",
                "Help": "A double-precision floating-point number that specifies a power.",
                "ImportedHelp": "<param name=\"y\">A double-precision floating-point number that specifies a power. </param>"
              },
              "DotNetName": "y"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "The number Input raised to the power Exponent.",
              "ImportedHelp": "<returns>The number <paramref name=\"x\" /> raised to the power <paramref name=\"y\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Pow"
        },
        {
          "NodeAttribute": {
            "Name": "Sign",
            "Category": "Primitive.Integer32",
            "Help": "Returns a value indicating the sign of a 32-bit signed integer.",
            "ImportedHelp": "<member name=\"M:System.Math.Sign(System.Int32)\">\r\n  <summary>Returns a value indicating the sign of a 32-bit signed integer.</summary>\r\n  <returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>\r\n  <param name=\"value\">A signed number. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A signed number.",
                "ImportedHelp": "<param name=\"value\">A signed number. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Name": "Result",
              "Help": "A number that indicates the sign of Input, as shown in the following table.Return value Meaning -1 Input is less than zero. 0 Input is equal to zero. 1 Input is greater than zero.",
              "ImportedHelp": "<returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Sign"
        },
        {
          "NodeAttribute": {
            "Name": "Sign",
            "Category": "Primitive.Float32",
            "Help": "Returns a value indicating the sign of a single-precision floating-point number.",
            "ImportedHelp": "<member name=\"M:System.Math.Sign(System.Single)\">\r\n  <summary>Returns a value indicating the sign of a single-precision floating-point number.</summary>\r\n  <returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>\r\n  <param name=\"value\">A signed number. </param>\r\n  <exception cref=\"T:System.ArithmeticException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Single.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A signed number.",
                "ImportedHelp": "<param name=\"value\">A signed number. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A number that indicates the sign of Input, as shown in the following table.Return value Meaning -1 Input is less than zero. 0 Input is equal to zero. 1 Input is greater than zero.",
              "ImportedHelp": "<returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Sign"
        },
        {
          "NodeAttribute": {
            "Name": "Sign",
            "Category": "Primitive.Float64",
            "Help": "Returns a value indicating the sign of a double-precision floating-point number.",
            "ImportedHelp": "<member name=\"M:System.Math.Sign(System.Double)\">\r\n  <summary>Returns a value indicating the sign of a double-precision floating-point number.</summary>\r\n  <returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>\r\n  <param name=\"value\">A signed number. </param>\r\n  <exception cref=\"T:System.ArithmeticException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "A signed number.",
                "ImportedHelp": "<param name=\"value\">A signed number. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A number that indicates the sign of Input, as shown in the following table.Return value Meaning -1 Input is less than zero. 0 Input is equal to zero. 1 Input is greater than zero.",
              "ImportedHelp": "<returns>A number that indicates the sign of <paramref name=\"value\" />, as shown in the following table.Return value Meaning -1 <paramref name=\"value\" /> is less than zero. 0 <paramref name=\"value\" /> is equal to zero. 1 <paramref name=\"value\" /> is greater than zero. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Sign"
        },
        {
          "NodeAttribute": {
            "Name": "Sin",
            "Category": "Primitive.Float64",
            "Help": "Returns the sine of the specified angle.",
            "ImportedHelp": "<member name=\"M:System.Math.Sin(System.Double)\">\r\n  <summary>Returns the sine of the specified angle.</summary>\r\n  <returns>The sine of <paramref name=\"a\" />. If <paramref name=\"a\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"a\">An angle, measured in radians. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "An angle, measured in radians.",
                "ImportedHelp": "<param name=\"a\">An angle, measured in radians. </param>"
              },
              "DotNetName": "a"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "The sine of Input. If Input is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.",
              "ImportedHelp": "<returns>The sine of <paramref name=\"a\" />. If <paramref name=\"a\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Sin"
        },
        {
          "NodeAttribute": {
            "Name": "Sqrt",
            "Category": "Primitive.Float64",
            "Help": "Returns the square root of a specified number.",
            "ImportedHelp": "<member name=\"M:System.Math.Sqrt(System.Double)\">\r\n  <summary>Returns the square root of a specified number.</summary>\r\n  <returns>One of the values in the following table. <paramref name=\"d\" /> parameter Return value Zero or positive The positive square root of <paramref name=\"d\" />. Negative <see cref=\"F:System.Double.NaN\" />Equals <see cref=\"F:System.Double.NaN\" /><see cref=\"F:System.Double.NaN\" />Equals <see cref=\"F:System.Double.PositiveInfinity\" /><see cref=\"F:System.Double.PositiveInfinity\" /></returns>\r\n  <param name=\"d\">The number whose square root is to be found. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The number whose square root is to be found.",
                "ImportedHelp": "<param name=\"d\">The number whose square root is to be found. </param>"
              },
              "DotNetName": "d"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "One of the values in the following table. Input parameter Return value Zero or positive The positive square root of Input. Negative NaNEquals NaNNaNEquals PositiveInfinityPositiveInfinity",
              "ImportedHelp": "<returns>One of the values in the following table. <paramref name=\"d\" /> parameter Return value Zero or positive The positive square root of <paramref name=\"d\" />. Negative <see cref=\"F:System.Double.NaN\" />Equals <see cref=\"F:System.Double.NaN\" /><see cref=\"F:System.Double.NaN\" />Equals <see cref=\"F:System.Double.PositiveInfinity\" /><see cref=\"F:System.Double.PositiveInfinity\" /></returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Sqrt"
        },
        {
          "NodeAttribute": {
            "Name": "Tan",
            "Category": "Primitive.Float64",
            "Help": "Returns the tangent of the specified angle.",
            "ImportedHelp": "<member name=\"M:System.Math.Tan(System.Double)\">\r\n  <summary>Returns the tangent of the specified angle.</summary>\r\n  <returns>The tangent of <paramref name=\"a\" />. If <paramref name=\"a\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>\r\n  <param name=\"a\">An angle, measured in radians. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Name": "Input",
                "Help": "An angle, measured in radians.",
                "ImportedHelp": "<param name=\"a\">An angle, measured in radians. </param>"
              },
              "DotNetName": "a"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Double",
            "PinAttribute": {
              "Help": "The tangent of Input. If Input is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN.",
              "ImportedHelp": "<returns>The tangent of <paramref name=\"a\" />. If <paramref name=\"a\" /> is equal to <see cref=\"F:System.Double.NaN\" />, <see cref=\"F:System.Double.NegativeInfinity\" />, or <see cref=\"F:System.Double.PositiveInfinity\" />, this method returns <see cref=\"F:System.Double.NaN\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Tan"
        }
      ],
      "DotNetName": "System.Math"
    },
    {
      "TypeAttribute": {
        "Name": "Object",
        "Category": "Primitive",
        "Help": "Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.Object\">\r\n  <summary>Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsBuiltin": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Create",
            "Help": "Initializes a new instance of the Object class.",
            "ImportedHelp": "<member name=\"M:System.Object.#ctor\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.Object\" /> class.</summary>\r\n</member>",
            "Hidden": true,
            "IsDefaultValue": true
          },
          "DotNetName": ".ctor"
        }
      ],
      "DotNetName": "System.Object"
    },
    {
      "TypeAttribute": {
        "Name": "Observable",
        "Category": "Reactive",
        "Help": "Defines a provider for push-based notification.T: The object that provides notification information.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.IObservable`1\">\r\n  <summary>Defines a provider for push-based notification.</summary>\r\n  <typeparam name=\"T\">The object that provides notification information.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.IObservable`1"
    },
    {
      "TypeAttribute": {
        "Name": "Observer",
        "Category": "Reactive",
        "Help": "Provides a mechanism for receiving push-based notifications.T: The object that provides notification information.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.IObserver`1\">\r\n  <summary>Provides a mechanism for receiving push-based notifications.</summary>\r\n  <typeparam name=\"T\">The object that provides notification information.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n</member>"
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "OnCompleted",
            "Help": "Notifies the observer that the provider has finished sending push-based notifications.",
            "ImportedHelp": "<member name=\"M:System.IObserver`1.OnCompleted\">\r\n  <summary>Notifies the observer that the provider has finished sending push-based notifications.</summary>\r\n</member>"
          },
          "DotNetName": "OnCompleted"
        },
        {
          "NodeAttribute": {
            "Name": "OnError",
            "Help": "Notifies the observer that the provider has experienced an error condition.",
            "ImportedHelp": "<member name=\"M:System.IObserver`1.OnError(System.Exception)\">\r\n  <summary>Notifies the observer that the provider has experienced an error condition.</summary>\r\n  <param name=\"error\">An object that provides additional information about the error.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Exception",
              "PinAttribute": {
                "Help": "An object that provides additional information about the error.",
                "ImportedHelp": "<param name=\"error\">An object that provides additional information about the error.</param>"
              },
              "DotNetName": "error"
            }
          ],
          "DotNetName": "OnError"
        },
        {
          "NodeAttribute": {
            "Name": "OnNext",
            "Help": "Provides the observer with new data.",
            "ImportedHelp": "<member name=\"M:System.IObserver`1.OnNext(`0)\">\r\n  <summary>Provides the observer with new data.</summary>\r\n  <param name=\"value\">The current notification information.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Help": "The current notification information.",
                "ImportedHelp": "<param name=\"value\">The current notification information.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "DotNetName": "OnNext"
        }
      ],
      "DotNetName": "System.IObserver`1"
    },
    {
      "TypeAttribute": {
        "Name": "Sequence",
        "Category": "Collections",
        "Help": "Exposes the enumerator, which supports a simple iteration over a collection of a specified type.To browse the .NET Framework source code for this type, see the Reference Source.T: The type of objects to enumerate.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.\r\n",
        "ImportedHelp": "<member name=\"T:System.Collections.Generic.IEnumerable`1\">\r\n  <summary>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <typeparam name=\"T\">The type of objects to enumerate.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsBuiltin": true
      },
      "Members": [],
      "DotNetName": "System.Collections.Generic.IEnumerable`1"
    },
    {
      "TypeAttribute": {
        "Name": "Sequence",
        "Category": "Collections",
        "Version": "UnTyped",
        "Help": "Exposes an enumerator, which supports a simple iteration over a non-generic collection.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.Collections.IEnumerable\">\r\n  <summary>Exposes an enumerator, which supports a simple iteration over a non-generic collection.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsBuiltin": true
      },
      "Members": [],
      "DotNetName": "System.Collections.IEnumerable"
    },
    {
      "TypeAttribute": {
        "Name": "Stream",
        "Category": "IO",
        "Help": "Provides a generic view of a sequence of bytes. This is an abstract class.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.IO.Stream\">\r\n  <summary>Provides a generic view of a sequence of bytes. This is an abstract class.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Null",
            "Help": "A Stream with no backing store.",
            "ImportedHelp": "<member name=\"F:System.IO.Stream.Null\">\r\n  <summary>A Stream with no backing store.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
            "Hidden": true,
            "IsDefaultValue": true
          },
          "DotNetName": "Null"
        }
      ],
      "DotNetName": "System.IO.Stream"
    },
    {
      "TypeAttribute": {
        "Name": "String",
        "Category": "Primitive",
        "Help": "Represents text as a series of Unicode characters.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.String\">\r\n  <summary>Represents text as a series of Unicode characters.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Determines whether two specified strings have different values.",
            "ImportedHelp": "<member name=\"M:System.String.op_Inequality(System.String,System.String)\">\r\n  <summary>Determines whether two specified strings have different values.</summary>\r\n  <returns>true if the value of <paramref name=\"a\" /> is different from the value of <paramref name=\"b\" />; otherwise, false.</returns>\r\n  <param name=\"a\">The first string to compare, or null. </param>\r\n  <param name=\"b\">The second string to compare, or null. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The first string to compare, or null.",
                "ImportedHelp": "<param name=\"a\">The first string to compare, or null. </param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The second string to compare, or null.",
                "ImportedHelp": "<param name=\"b\">The second string to compare, or null. </param>"
              },
              "DotNetName": "b"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is different from the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"a\" /> is different from the value of <paramref name=\"b\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Determines whether two specified strings have the same value.",
            "ImportedHelp": "<member name=\"M:System.String.op_Equality(System.String,System.String)\">\r\n  <summary>Determines whether two specified strings have the same value.</summary>\r\n  <returns>true if the value of <paramref name=\"a\" /> is the same as the value of <paramref name=\"b\" />; otherwise, false.</returns>\r\n  <param name=\"a\">The first string to compare, or null. </param>\r\n  <param name=\"b\">The second string to compare, or null. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The first string to compare, or null.",
                "ImportedHelp": "<param name=\"a\">The first string to compare, or null. </param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The second string to compare, or null.",
                "ImportedHelp": "<param name=\"b\">The second string to compare, or null. </param>"
              },
              "DotNetName": "b"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is the same as the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"a\" /> is the same as the value of <paramref name=\"b\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Chars",
            "ShowCategory": true,
            "Help": "Gets the Char object at a specified position in the current String object.",
            "ImportedHelp": "<member name=\"P:System.String.Chars(System.Int32)\">\r\n  <summary>Gets the <see cref=\"T:System.Char\" /> object at a specified position in the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The object at position <paramref name=\"index\" />.</returns>\r\n  <param name=\"index\">A position in the current string. </param>\r\n  <exception cref=\"T:System.IndexOutOfRangeException\">\r\n    <paramref name=\"index\" /> is greater than or equal to the length of this object or less than zero. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "DotNetName": "Chars"
        },
        {
          "NodeAttribute": {
            "Name": "Compare",
            "ShowCategory": true,
            "Help": "Compares two specified String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.",
            "ImportedHelp": "<member name=\"M:System.String.Compare(System.String,System.String,System.StringComparison)\">\r\n  <summary>Compares two specified <see cref=\"T:System.String\" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</summary>\r\n  <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero <paramref name=\"strA\" /> precedes <paramref name=\"strB\" /> in the sort order. Zero <paramref name=\"strA\" /> is in the same position as <paramref name=\"strB\" /> in the sort order. Greater than zero <paramref name=\"strA\" /> follows <paramref name=\"strB\" /> in the sort order. </returns>\r\n  <param name=\"strA\">The first string to compare.</param>\r\n  <param name=\"strB\">The second string to compare. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules to use in the comparison. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a <see cref=\"T:System.StringComparison\" /> value. </exception>\r\n  <exception cref=\"T:System.NotSupportedException\">\r\n    <see cref=\"T:System.StringComparison\" /> is not supported.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first string to compare.",
                "ImportedHelp": "<param name=\"strA\">The first string to compare.</param>"
              },
              "DotNetName": "strA"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second string to compare.",
                "ImportedHelp": "<param name=\"strB\">The second string to compare. </param>"
              },
              "DotNetName": "strB"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules to use in the comparison.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules to use in the comparison. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero Input precedes Input 2 in the sort order. Zero Input is in the same position as Input 2 in the sort order. Greater than zero Input follows Input 2 in the sort order.",
              "ImportedHelp": "<returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero <paramref name=\"strA\" /> precedes <paramref name=\"strB\" /> in the sort order. Zero <paramref name=\"strA\" /> is in the same position as <paramref name=\"strB\" /> in the sort order. Greater than zero <paramref name=\"strA\" /> follows <paramref name=\"strB\" /> in the sort order. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Compare"
        },
        {
          "NodeAttribute": {
            "Name": "Compare",
            "Version": "Start Count",
            "ShowCategory": true,
            "Help": "Compares substrings of two specified String objects using the specified rules, and returns an integer that indicates their relative position in the sort order.",
            "ImportedHelp": "<member name=\"M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)\">\r\n  <summary>Compares substrings of two specified <see cref=\"T:System.String\" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order. </summary>\r\n  <returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero The substring in <paramref name=\"strA\" /> precedes the substring in <paramref name=\"strB\" /> in the sort order.Zero The substrings occur in the same position in the sort order, or the <paramref name=\"length\" /> parameter is zero. Greater than zero The substring in <paramref name=\"strA\" /> follllows the substring in <paramref name=\"strB\" /> in the sort order. </returns>\r\n  <param name=\"strA\">The first string to use in the comparison. </param>\r\n  <param name=\"indexA\">The position of the substring within <paramref name=\"strA\" />. </param>\r\n  <param name=\"strB\">The second string to use in the comparison.</param>\r\n  <param name=\"indexB\">The position of the substring within <paramref name=\"strB\" />. </param>\r\n  <param name=\"length\">The maximum number of characters in the substrings to compare. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules to use in the comparison. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"indexA\" /> is greater than <paramref name=\"strA\" />.<see cref=\"P:System.String.Length\" />.-or- <paramref name=\"indexB\" /> is greater than <paramref name=\"strB\" />.<see cref=\"P:System.String.Length\" />.-or- <paramref name=\"indexA\" />, <paramref name=\"indexB\" />, or <paramref name=\"length\" /> is negative. -or-Either <paramref name=\"indexA\" /> or <paramref name=\"indexB\" /> is null, and <paramref name=\"length\" /> is greater than zero.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a <see cref=\"T:System.StringComparison\" /> value. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first string to use in the comparison.",
                "ImportedHelp": "<param name=\"strA\">The first string to use in the comparison. </param>"
              },
              "DotNetName": "strA"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Index",
                "Help": "The position of the substring within Input.",
                "ImportedHelp": "<param name=\"indexA\">The position of the substring within <paramref name=\"strA\" />. </param>"
              },
              "DotNetName": "indexA"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second string to use in the comparison.",
                "ImportedHelp": "<param name=\"strB\">The second string to use in the comparison.</param>"
              },
              "DotNetName": "strB"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Index 2",
                "Help": "The position of the substring within Input 2.",
                "ImportedHelp": "<param name=\"indexB\">The position of the substring within <paramref name=\"strB\" />. </param>"
              },
              "DotNetName": "indexB"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Maximum Count",
                "Help": "The maximum number of characters in the substrings to compare.",
                "ImportedHelp": "<param name=\"length\">The maximum number of characters in the substrings to compare. </param>"
              },
              "DotNetName": "length"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules to use in the comparison.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules to use in the comparison. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero The substring in Input precedes the substring in Input 2 in the sort order.Zero The substrings occur in the same position in the sort order, or the Maximum Count parameter is zero. Greater than zero The substring in Input follllows the substring in Input 2 in the sort order.",
              "ImportedHelp": "<returns>A 32-bit signed integer that indicates the lexical relationship between the two comparands.Value Condition Less than zero The substring in <paramref name=\"strA\" /> precedes the substring in <paramref name=\"strB\" /> in the sort order.Zero The substrings occur in the same position in the sort order, or the <paramref name=\"length\" /> parameter is zero. Greater than zero The substring in <paramref name=\"strA\" /> follllows the substring in <paramref name=\"strB\" /> in the sort order. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Compare"
        },
        {
          "NodeAttribute": {
            "Name": "Concat",
            "ShowCategory": true,
            "Help": "Concatenates two specified instances of String.",
            "ImportedHelp": "<member name=\"M:System.String.Concat(System.String,System.String)\">\r\n  <summary>Concatenates two specified instances of <see cref=\"T:System.String\" />.</summary>\r\n  <returns>The concatenation of <paramref name=\"str0\" /> and <paramref name=\"str1\" />.</returns>\r\n  <param name=\"str0\">The first string to concatenate. </param>\r\n  <param name=\"str1\">The second string to concatenate. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first string to concatenate.",
                "ImportedHelp": "<param name=\"str0\">The first string to concatenate. </param>"
              },
              "DotNetName": "str0"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second string to concatenate.",
                "ImportedHelp": "<param name=\"str1\">The second string to concatenate. </param>"
              },
              "DotNetName": "str1"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The concatenation of Input and Input 2.",
              "ImportedHelp": "<returns>The concatenation of <paramref name=\"str0\" /> and <paramref name=\"str1\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Concat"
        },
        {
          "NodeAttribute": {
            "Name": "Concat",
            "Version": "Spectral",
            "ShowCategory": true,
            "Help": "Concatenates the members of a constructed Sequence collection of type String.",
            "ImportedHelp": "<member name=\"M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})\">\r\n  <summary>Concatenates the members of a constructed <see cref=\"T:System.Collections.Generic.IEnumerable`1\" /> collection of type <see cref=\"T:System.String\" />.</summary>\r\n  <returns>The concatenated strings in <paramref name=\"values\" />.</returns>\r\n  <param name=\"values\">A collection object that implements <see cref=\"T:System.Collections.Generic.IEnumerable`1\" /> and whose generic type argument is <see cref=\"T:System.String\" />.</param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"values\" /> is null. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<System.String>",
              "PinAttribute": {
                "Help": "A collection object that implements Sequence and whose generic type argument is String.",
                "ImportedHelp": "<param name=\"values\">A collection object that implements <see cref=\"T:System.Collections.Generic.IEnumerable`1\" /> and whose generic type argument is <see cref=\"T:System.String\" />.</param>"
              },
              "DotNetName": "values"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The concatenated strings in Values.",
              "ImportedHelp": "<returns>The concatenated strings in <paramref name=\"values\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Concat"
        },
        {
          "NodeAttribute": {
            "Name": "Contains",
            "ShowCategory": false,
            "Help": "Returns a value indicating whether a specified substring occurs within this string.",
            "ImportedHelp": "<member name=\"M:System.String.Contains(System.String)\">\r\n  <summary>Returns a value indicating whether a specified substring occurs within this string.</summary>\r\n  <returns>true if the <paramref name=\"value\" /> parameter occurs within this string, or if <paramref name=\"value\" /> is the empty string (\"\"); otherwise, false.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the Value parameter occurs within this string, or if Value is the empty string (\"\"); otherwise, false.",
              "ImportedHelp": "<returns>true if the <paramref name=\"value\" /> parameter occurs within this string, or if <paramref name=\"value\" /> is the empty string (\"\"); otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "Empty",
            "ShowCategory": true,
            "Help": "Represents the empty string. This field is read-only.",
            "ImportedHelp": "<member name=\"F:System.String.Empty\">\r\n  <summary>Represents the empty string. This field is read-only.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Empty"
        },
        {
          "NodeAttribute": {
            "Name": "EndsWith",
            "ShowCategory": false,
            "Help": "Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.",
            "ImportedHelp": "<member name=\"M:System.String.EndsWith(System.String,System.StringComparison)\">\r\n  <summary>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</summary>\r\n  <returns>true if the <paramref name=\"value\" /> parameter matches the end of this string; otherwise, false.</returns>\r\n  <param name=\"value\">The string to compare to the substring at the end of this instance. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that determines how this string and <paramref name=\"value\" /> are compared. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to compare to the substring at the end of this instance.",
                "ImportedHelp": "<param name=\"value\">The string to compare to the substring at the end of this instance. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that determines how this string and Value are compared.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that determines how this string and <paramref name=\"value\" /> are compared. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the Value parameter matches the end of this string; otherwise, false.",
              "ImportedHelp": "<returns>true if the <paramref name=\"value\" /> parameter matches the end of this string; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "EndsWith"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Help": "Reports the zero-based index of the first occurrence of the specified string in the current String object. A parameter specifies the type of search to use for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.String,System.StringComparison)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref=\"T:System.String\" /> object. A parameter specifies the type of search to use for the specified string.</summary>\r\n  <returns>The index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is 0.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The index position of the Value parameter if that string is found, or -1 if it is not. If Value is Empty, the return value is 0.",
              "ImportedHelp": "<returns>The index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is 0.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Version": "Char",
            "Help": "Reports the zero-based index of the first occurrence of the specified Unicode character in this string.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.Char)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>\r\n  <param name=\"value\">A Unicode character to seek. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">A Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Version": "Char Start",
            "Help": "Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.Char,System.Int32)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>\r\n  <param name=\"value\">A Unicode character to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than 0 (zero) or greater than the length of the string. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">A Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Version": "Char Start Count",
            "Help": "Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.Char,System.Int32,System.Int32)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>\r\n  <param name=\"value\">A Unicode character to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. </param>\r\n  <param name=\"count\">The number of character positions to examine. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"count\" /> or <paramref name=\"startIndex\" /> is negative.-or- <paramref name=\"startIndex\" /> is greater than the length of this string.-or-<paramref name=\"count\" /> is greater than the length of this string minus <paramref name=\"startIndex\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">A Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of character positions to examine.",
                "ImportedHelp": "<param name=\"count\">The number of character positions to examine. </param>"
              },
              "DotNetName": "count"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Version": "Start",
            "Help": "Reports the zero-based index of the first occurrence of the specified string in the current String object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref=\"T:System.String\" /> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</summary>\r\n  <returns>The zero-based index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than 0 (zero) or greater than the length of this string. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of the Value parameter if that string is found, or -1 if it is not. If Value is Empty, the return value is Start Index.",
              "ImportedHelp": "<returns>The zero-based index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "IndexOf",
            "Version": "Start Count",
            "Help": "Reports the zero-based index of the first occurrence of the specified string in the current String object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\">\r\n  <summary>Reports the zero-based index of the first occurrence of the specified string in the current <see cref=\"T:System.String\" /> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</summary>\r\n  <returns>The zero-based index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. </param>\r\n  <param name=\"count\">The number of character positions to examine. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"count\" /> or <paramref name=\"startIndex\" /> is negative.-or- <paramref name=\"startIndex\" /> is greater than the length of this instance.-or-<paramref name=\"count\" /> is greater than the length of this string minus <paramref name=\"startIndex\" />.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of character positions to examine.",
                "ImportedHelp": "<param name=\"count\">The number of character positions to examine. </param>"
              },
              "DotNetName": "count"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of the Value parameter if that string is found, or -1 if it is not. If Value is Empty, the return value is Start Index.",
              "ImportedHelp": "<returns>The zero-based index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "Insert",
            "Help": "Returns a new string in which a specified string is inserted at a specified index position in this instance.",
            "ImportedHelp": "<member name=\"M:System.String.Insert(System.Int32,System.String)\">\r\n  <summary>Returns a new string in which a specified string is inserted at a specified index position in this instance. </summary>\r\n  <returns>A new string that is equivalent to this instance, but with <paramref name=\"value\" /> inserted at position <paramref name=\"startIndex\" />.</returns>\r\n  <param name=\"startIndex\">The zero-based index position of the insertion. </param>\r\n  <param name=\"value\">The string to insert. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is negative or greater than the length of this instance. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The zero-based index position of the insertion.",
                "ImportedHelp": "<param name=\"startIndex\">The zero-based index position of the insertion. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to insert.",
                "ImportedHelp": "<param name=\"value\">The string to insert. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance, but with Value inserted at position Start Index.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance, but with <paramref name=\"value\" /> inserted at position <paramref name=\"startIndex\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Insert"
        },
        {
          "NodeAttribute": {
            "Name": "IsNullOrEmpty",
            "Help": "Indicates whether the specified string is null or an Empty string.",
            "ImportedHelp": "<member name=\"M:System.String.IsNullOrEmpty(System.String)\">\r\n  <summary>Indicates whether the specified string is null or an <see cref=\"F:System.String.Empty\" /> string.</summary>\r\n  <returns>true if the <paramref name=\"value\" /> parameter is null or an empty string (\"\"); otherwise, false.</returns>\r\n  <param name=\"value\">The string to test. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The string to test.",
                "ImportedHelp": "<param name=\"value\">The string to test. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the Input parameter is null or an empty string (\"\"); otherwise, false.",
              "ImportedHelp": "<returns>true if the <paramref name=\"value\" /> parameter is null or an empty string (\"\"); otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsNullOrEmpty"
        },
        {
          "NodeAttribute": {
            "Name": "IsNullOrWhiteSpace",
            "Help": "Indicates whether a specified string is null, empty, or consists only of white-space characters.",
            "ImportedHelp": "<member name=\"M:System.String.IsNullOrWhiteSpace(System.String)\">\r\n  <summary>Indicates whether a specified string is null, empty, or consists only of white-space characters.</summary>\r\n  <returns>true if the <paramref name=\"value\" /> parameter is null or <see cref=\"F:System.String.Empty\" />, or if <paramref name=\"value\" /> consists exclusively of white-space characters. </returns>\r\n  <param name=\"value\">The string to test.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The string to test.",
                "ImportedHelp": "<param name=\"value\">The string to test.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the Input parameter is null or Empty, or if Input consists exclusively of white-space characters.",
              "ImportedHelp": "<returns>true if the <paramref name=\"value\" /> parameter is null or <see cref=\"F:System.String.Empty\" />, or if <paramref name=\"value\" /> consists exclusively of white-space characters. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsNullOrWhiteSpace"
        },
        {
          "NodeAttribute": {
            "Name": "Join",
            "ShowCategory": true,
            "Help": "Concatenates the members of a constructed Sequence collection of type String, using the specified separator between each member.",
            "ImportedHelp": "<member name=\"M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})\">\r\n  <summary>Concatenates the members of a constructed <see cref=\"T:System.Collections.Generic.IEnumerable`1\" /> collection of type <see cref=\"T:System.String\" />, using the specified separator between each member.</summary>\r\n  <returns>A string that consists of the members of <paramref name=\"values\" /> delimited by the <paramref name=\"separator\" /> string. If <paramref name=\"values\" /> has no members, the method returns <see cref=\"F:System.String.Empty\" />.</returns>\r\n  <param name=\"separator\">The string to use as a separator. <paramref name=\"separator\" /> is included in the returned string only if <paramref name=\"values\" /> has more than one element.</param>\r\n  <param name=\"values\">A collection that contains the strings to concatenate.</param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"values\" /> is null. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to use as a separator. Separator is included in the returned string only if Values has more than one element.",
                "ImportedHelp": "<param name=\"separator\">The string to use as a separator. <paramref name=\"separator\" /> is included in the returned string only if <paramref name=\"values\" /> has more than one element.</param>"
              },
              "DotNetName": "separator"
            },
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<System.String>",
              "PinAttribute": {
                "Help": "A collection that contains the strings to concatenate.",
                "ImportedHelp": "<param name=\"values\">A collection that contains the strings to concatenate.</param>"
              },
              "DotNetName": "values"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that consists of the members of Values delimited by the Separator string. If Values has no members, the method returns Empty.",
              "ImportedHelp": "<returns>A string that consists of the members of <paramref name=\"values\" /> delimited by the <paramref name=\"separator\" /> string. If <paramref name=\"values\" /> has no members, the method returns <see cref=\"F:System.String.Empty\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Join"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Help": "Reports the zero-based index of the last occurrence of a specified string within the current String object. A parameter specifies the type of search to use for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.String,System.StringComparison)\">\r\n  <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref=\"T:System.String\" /> object. A parameter specifies the type of search to use for the specified string.</summary>\r\n  <returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the last index position in this instance.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based starting index position of the Value parameter if that string is found, or -1 if it is not. If Value is Empty, the return value is the last index position in this instance.",
              "ImportedHelp": "<returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the last index position in this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Version": "Char",
            "Help": "Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.Char)\">\r\n  <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>\r\n  <param name=\"value\">The Unicode character to seek. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "The Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">The Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Version": "Char Start",
            "Help": "Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.Char,System.Int32)\">\r\n  <summary>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />.</returns>\r\n  <param name=\"value\">The Unicode character to seek. </param>\r\n  <param name=\"startIndex\">The starting position of the search. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is less than zero or greater than or equal to the length of this instance.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "The Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">The Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position of the search. The search proceeds from Start Index toward the beginning of this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position of the search. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not found or if the current instance equals Empty.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Version": "Char Start Count",
            "Help": "Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)\">\r\n  <summary>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</summary>\r\n  <returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />.</returns>\r\n  <param name=\"value\">The Unicode character to seek. </param>\r\n  <param name=\"startIndex\">The starting position of the search. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>\r\n  <param name=\"count\">The number of character positions to examine. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is less than zero or greater than or equal to the length of this instance.-or-The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> - <paramref name=\"count\" /> + 1 is less than zero.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "The Unicode character to seek.",
                "ImportedHelp": "<param name=\"value\">The Unicode character to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The starting position of the search. The search proceeds from Start Index toward the beginning of this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The starting position of the search. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of character positions to examine.",
                "ImportedHelp": "<param name=\"count\">The number of character positions to examine. </param>"
              },
              "DotNetName": "count"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based index position of Value if that character is found, or -1 if it is not found or if the current instance equals Empty.",
              "ImportedHelp": "<returns>The zero-based index position of <paramref name=\"value\" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Version": "Start",
            "Help": "Reports the zero-based index of the last occurrence of a specified string within the current String object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)\">\r\n  <summary>Reports the zero-based index of the last occurrence of a specified string within the current <see cref=\"T:System.String\" /> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>\r\n  <returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the smaller of <paramref name=\"startIndex\" /> and the last index position in this instance.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is less than zero or greater than the length of the current instance. -or-The current instance equals <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is less than -1 or greater than zero.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position. The search proceeds from Start Index toward the beginning of this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based starting index position of the Value parameter if that string is found, or -1 if it is not found or if the current instance equals Empty. If Value is Empty, the return value is the smaller of Start Index and the last index position in this instance.",
              "ImportedHelp": "<returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the smaller of <paramref name=\"startIndex\" /> and the last index position in this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "LastIndexOf",
            "Version": "Start Count",
            "Help": "Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.",
            "ImportedHelp": "<member name=\"M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\">\r\n  <summary>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</summary>\r\n  <returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the smaller of <paramref name=\"startIndex\" /> and the last index position in this instance.</returns>\r\n  <param name=\"value\">The string to seek. </param>\r\n  <param name=\"startIndex\">The search starting position. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>\r\n  <param name=\"count\">The number of character positions to examine. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"count\" /> is negative.-or-The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is negative.-or- The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> is greater than the length of this instance.-or-The current instance does not equal <see cref=\"F:System.String.Empty\" />, and <paramref name=\"startIndex\" /> + 1 - <paramref name=\"count\" /> specifies a position that is not within this instance. -or-The current instance equals <see cref=\"F:System.String.Empty\" /> and <paramref name=\"start\" /> is less than -1 or greater than zero. -or-The current instance equals <see cref=\"F:System.String.Empty\" /> and <paramref name=\"count\" /> is greater than 1. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a valid <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to seek.",
                "ImportedHelp": "<param name=\"value\">The string to seek. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The search starting position. The search proceeds from Start Index toward the beginning of this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The search starting position. The search proceeds from <paramref name=\"startIndex\" /> toward the beginning of this instance.</param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of character positions to examine.",
                "ImportedHelp": "<param name=\"count\">The number of character positions to examine. </param>"
              },
              "DotNetName": "count"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that specifies the rules for the search.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that specifies the rules for the search. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "The zero-based starting index position of the Value parameter if that string is found, or -1 if it is not found or if the current instance equals Empty. If Value is Empty, the return value is the smaller of Start Index and the last index position in this instance.",
              "ImportedHelp": "<returns>The zero-based starting index position of the <paramref name=\"value\" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref=\"F:System.String.Empty\" />. If <paramref name=\"value\" /> is <see cref=\"F:System.String.Empty\" />, the return value is the smaller of <paramref name=\"startIndex\" /> and the last index position in this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LastIndexOf"
        },
        {
          "NodeAttribute": {
            "Name": "Length",
            "ShowCategory": true,
            "Help": "Gets the number of characters in the current String object.",
            "ImportedHelp": "<member name=\"P:System.String.Length\">\r\n  <summary>Gets the number of characters in the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The number of characters in the current string.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Length"
        },
        {
          "NodeAttribute": {
            "Name": "Normalize",
            "Help": "Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.",
            "ImportedHelp": "<member name=\"M:System.String.Normalize\">\r\n  <summary>Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</summary>\r\n  <returns>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</returns>\r\n  <exception cref=\"T:System.ArgumentException\">The current instance contains invalid Unicode characters.</exception>\r\n  <filterpriority>2</filterpriority>\r\n  <PermissionSet>\r\n    <IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"UnmanagedCode\" />\r\n  </PermissionSet>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.",
              "ImportedHelp": "<returns>A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Normalize"
        },
        {
          "NodeAttribute": {
            "Name": "PadLeft",
            "ShowCategory": false,
            "Help": "Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.",
            "ImportedHelp": "<member name=\"M:System.String.PadLeft(System.Int32)\">\r\n  <summary>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</summary>\r\n  <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>\r\n  <param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"totalWidth\" /> is less than zero. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.",
                "ImportedHelp": "<param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>"
              },
              "DotNetName": "totalWidth"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of Total Width. However, if Total Width is less than the length of this instance, the method returns a reference to the existing instance. If Total Width is equal to the length of this instance, the method returns a new string that is identical to this instance.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PadLeft"
        },
        {
          "NodeAttribute": {
            "Name": "PadLeft",
            "Version": "Char",
            "ShowCategory": false,
            "Help": "Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.",
            "ImportedHelp": "<member name=\"M:System.String.PadLeft(System.Int32,System.Char)\">\r\n  <summary>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</summary>\r\n  <returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name=\"paddingChar\" /> characters as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>\r\n  <param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>\r\n  <param name=\"paddingChar\">A Unicode padding character. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"totalWidth\" /> is less than zero. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.",
                "ImportedHelp": "<param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>"
              },
              "DotNetName": "totalWidth"
            },
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A Unicode padding character.",
                "ImportedHelp": "<param name=\"paddingChar\">A Unicode padding character. </param>"
              },
              "DotNetName": "paddingChar"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance, but right-aligned and padded on the left with as many Padding Char characters as needed to create a length of Total Width. However, if Total Width is less than the length of this instance, the method returns a reference to the existing instance. If Total Width is equal to the length of this instance, the method returns a new string that is identical to this instance.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name=\"paddingChar\" /> characters as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PadLeft"
        },
        {
          "NodeAttribute": {
            "Name": "PadRight",
            "ShowCategory": false,
            "Help": "Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.",
            "ImportedHelp": "<member name=\"M:System.String.PadRight(System.Int32)\">\r\n  <summary>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</summary>\r\n  <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>\r\n  <param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"totalWidth\" /> is less than zero. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.",
                "ImportedHelp": "<param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>"
              },
              "DotNetName": "totalWidth"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of Total Width. However, if Total Width is less than the length of this instance, the method returns a reference to the existing instance. If Total Width is equal to the length of this instance, the method returns a new string that is identical to this instance.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name=\"totalWidth\" />. However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PadRight"
        },
        {
          "NodeAttribute": {
            "Name": "PadRight",
            "Version": "Char",
            "ShowCategory": false,
            "Help": "Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.",
            "ImportedHelp": "<member name=\"M:System.String.PadRight(System.Int32,System.Char)\">\r\n  <summary>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</summary>\r\n  <returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name=\"paddingChar\" /> characters as needed to create a length of <paramref name=\"totalWidth\" />.  However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>\r\n  <param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>\r\n  <param name=\"paddingChar\">A Unicode padding character. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"totalWidth\" /> is less than zero. </exception>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.",
                "ImportedHelp": "<param name=\"totalWidth\">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </param>"
              },
              "DotNetName": "totalWidth"
            },
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "A Unicode padding character.",
                "ImportedHelp": "<param name=\"paddingChar\">A Unicode padding character. </param>"
              },
              "DotNetName": "paddingChar"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance, but left-aligned and padded on the right with as many Padding Char characters as needed to create a length of Total Width.  However, if Total Width is less than the length of this instance, the method returns a reference to the existing instance. If Total Width is equal to the length of this instance, the method returns a new string that is identical to this instance.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name=\"paddingChar\" /> characters as needed to create a length of <paramref name=\"totalWidth\" />.  However, if <paramref name=\"totalWidth\" /> is less than the length of this instance, the method returns a reference to the existing instance. If <paramref name=\"totalWidth\" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PadRight"
        },
        {
          "NodeAttribute": {
            "Name": "Remove",
            "Help": "Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.",
            "ImportedHelp": "<member name=\"M:System.String.Remove(System.Int32)\">\r\n  <summary>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</summary>\r\n  <returns>A new string that is equivalent to this string except for the removed characters.</returns>\r\n  <param name=\"startIndex\">The zero-based position to begin deleting characters. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero.-or- <paramref name=\"startIndex\" /> specifies a position that is not within this string. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The zero-based position to begin deleting characters.",
                "ImportedHelp": "<param name=\"startIndex\">The zero-based position to begin deleting characters. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this string except for the removed characters.",
              "ImportedHelp": "<returns>A new string that is equivalent to this string except for the removed characters.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Remove"
        },
        {
          "NodeAttribute": {
            "Name": "Remove",
            "Version": "Count",
            "Help": "Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.",
            "ImportedHelp": "<member name=\"M:System.String.Remove(System.Int32,System.Int32)\">\r\n  <summary>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</summary>\r\n  <returns>A new string that is equivalent to this instance except for the removed characters.</returns>\r\n  <param name=\"startIndex\">The zero-based position to begin deleting characters. </param>\r\n  <param name=\"count\">The number of characters to delete. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">Either <paramref name=\"startIndex\" /> or <paramref name=\"count\" /> is less than zero.-or- <paramref name=\"startIndex\" /> plus <paramref name=\"count\" /> specify a position outside this instance. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The zero-based position to begin deleting characters.",
                "ImportedHelp": "<param name=\"startIndex\">The zero-based position to begin deleting characters. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters to delete.",
                "ImportedHelp": "<param name=\"count\">The number of characters to delete. </param>"
              },
              "DotNetName": "count"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A new string that is equivalent to this instance except for the removed characters.",
              "ImportedHelp": "<returns>A new string that is equivalent to this instance except for the removed characters.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Remove"
        },
        {
          "NodeAttribute": {
            "Name": "Replace",
            "Help": "Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.",
            "ImportedHelp": "<member name=\"M:System.String.Replace(System.String,System.String)\">\r\n  <summary>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</summary>\r\n  <returns>A string that is equivalent to the current string except that all instances of <paramref name=\"oldValue\" /> are replaced with <paramref name=\"newValue\" />. If <paramref name=\"oldValue\" /> is not found in the current instance, the method returns the current instance unchanged. </returns>\r\n  <param name=\"oldValue\">The string to be replaced. </param>\r\n  <param name=\"newValue\">The string to replace all occurrences of <paramref name=\"oldValue\" />. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"oldValue\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"oldValue\" /> is the empty string (\"\"). </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to be replaced.",
                "ImportedHelp": "<param name=\"oldValue\">The string to be replaced. </param>"
              },
              "DotNetName": "oldValue"
            },
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to replace all occurrences of Old Value.",
                "ImportedHelp": "<param name=\"newValue\">The string to replace all occurrences of <paramref name=\"oldValue\" />. </param>"
              },
              "DotNetName": "newValue"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that is equivalent to the current string except that all instances of Old Value are replaced with New Value. If Old Value is not found in the current instance, the method returns the current instance unchanged.",
              "ImportedHelp": "<returns>A string that is equivalent to the current string except that all instances of <paramref name=\"oldValue\" /> are replaced with <paramref name=\"newValue\" />. If <paramref name=\"oldValue\" /> is not found in the current instance, the method returns the current instance unchanged. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Replace"
        },
        {
          "NodeAttribute": {
            "Name": "Replace",
            "Version": "Char",
            "Help": "Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.",
            "ImportedHelp": "<member name=\"M:System.String.Replace(System.Char,System.Char)\">\r\n  <summary>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</summary>\r\n  <returns>A string that is equivalent to this instance except that all instances of <paramref name=\"oldChar\" /> are replaced with <paramref name=\"newChar\" />. If <paramref name=\"oldChar\" /> is not found in the current instance, the method returns the current instance unchanged. </returns>\r\n  <param name=\"oldChar\">The Unicode character to be replaced. </param>\r\n  <param name=\"newChar\">The Unicode character to replace all occurrences of <paramref name=\"oldChar\" />. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "The Unicode character to be replaced.",
                "ImportedHelp": "<param name=\"oldChar\">The Unicode character to be replaced. </param>"
              },
              "DotNetName": "oldChar"
            },
            {
              "TypeFullName": "System.Char",
              "PinAttribute": {
                "Help": "The Unicode character to replace all occurrences of Old Char.",
                "ImportedHelp": "<param name=\"newChar\">The Unicode character to replace all occurrences of <paramref name=\"oldChar\" />. </param>"
              },
              "DotNetName": "newChar"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that is equivalent to this instance except that all instances of Old Char are replaced with New Char. If Old Char is not found in the current instance, the method returns the current instance unchanged.",
              "ImportedHelp": "<returns>A string that is equivalent to this instance except that all instances of <paramref name=\"oldChar\" /> are replaced with <paramref name=\"newChar\" />. If <paramref name=\"oldChar\" /> is not found in the current instance, the method returns the current instance unchanged. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Replace"
        },
        {
          "NodeAttribute": {
            "Name": "Split",
            "Help": "Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.",
            "ImportedHelp": "<member name=\"M:System.String.Split(System.String[],System.StringSplitOptions)\">\r\n  <summary>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements. </summary>\r\n  <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name=\"separator\" />. For more information, see the Remarks section.</returns>\r\n  <param name=\"separator\">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>\r\n  <param name=\"options\">\r\n    <see cref=\"F:System.StringSplitOptions.RemoveEmptyEntries\" /> to omit empty array elements from the array returned; or <see cref=\"F:System.StringSplitOptions.None\" /> to include empty array elements in the array returned. </param>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"options\" /> is not one of the <see cref=\"T:System.StringSplitOptions\" /> values.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String[]",
              "PinAttribute": {
                "Help": "A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null.",
                "ImportedHelp": "<param name=\"separator\">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>"
              },
              "DotNetName": "separator"
            },
            {
              "TypeFullName": "System.StringSplitOptions",
              "PinAttribute": {
                "Help": "F:System.StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or F:System.StringSplitOptions.None to include empty array elements in the array returned.",
                "ImportedHelp": "<param name=\"options\">\r\n  <see cref=\"F:System.StringSplitOptions.RemoveEmptyEntries\" /> to omit empty array elements from the array returned; or <see cref=\"F:System.StringSplitOptions.None\" /> to include empty array elements in the array returned. </param>"
              },
              "DotNetName": "options"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String[]",
            "PinAttribute": {
              "Help": "An array whose elements contain the substrings in this string that are delimited by one or more strings in Separator. For more information, see the Remarks section.",
              "ImportedHelp": "<returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name=\"separator\" />. For more information, see the Remarks section.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Split"
        },
        {
          "NodeAttribute": {
            "Name": "Split",
            "Version": "Maximum Count",
            "Help": "Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.",
            "ImportedHelp": "<member name=\"M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)\">\r\n  <summary>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements. </summary>\r\n  <returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name=\"separator\" />. For more information, see the Remarks section.</returns>\r\n  <param name=\"separator\">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>\r\n  <param name=\"count\">The maximum number of substrings to return. </param>\r\n  <param name=\"options\">\r\n    <see cref=\"F:System.StringSplitOptions.RemoveEmptyEntries\" /> to omit empty array elements from the array returned; or <see cref=\"F:System.StringSplitOptions.None\" /> to include empty array elements in the array returned. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"count\" /> is negative. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"options\" /> is not one of the <see cref=\"T:System.StringSplitOptions\" /> values.</exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String[]",
              "PinAttribute": {
                "Help": "A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null.",
                "ImportedHelp": "<param name=\"separator\">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or null. </param>"
              },
              "DotNetName": "separator"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Name": "Maximum Count",
                "Help": "The maximum number of substrings to return.",
                "ImportedHelp": "<param name=\"count\">The maximum number of substrings to return. </param>"
              },
              "DotNetName": "count"
            },
            {
              "TypeFullName": "System.StringSplitOptions",
              "PinAttribute": {
                "Help": "F:System.StringSplitOptions.RemoveEmptyEntries to omit empty array elements from the array returned; or F:System.StringSplitOptions.None to include empty array elements in the array returned.",
                "ImportedHelp": "<param name=\"options\">\r\n  <see cref=\"F:System.StringSplitOptions.RemoveEmptyEntries\" /> to omit empty array elements from the array returned; or <see cref=\"F:System.StringSplitOptions.None\" /> to include empty array elements in the array returned. </param>"
              },
              "DotNetName": "options"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String[]",
            "PinAttribute": {
              "Help": "An array whose elements contain the substrings in this string that are delimited by one or more strings in Separator. For more information, see the Remarks section.",
              "ImportedHelp": "<returns>An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name=\"separator\" />. For more information, see the Remarks section.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Split"
        },
        {
          "NodeAttribute": {
            "Name": "StartsWith",
            "ShowCategory": false,
            "Help": "Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.",
            "ImportedHelp": "<member name=\"M:System.String.StartsWith(System.String,System.StringComparison)\">\r\n  <summary>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</summary>\r\n  <returns>true if this instance begins with <paramref name=\"value\" />; otherwise, false.</returns>\r\n  <param name=\"value\">The string to compare. </param>\r\n  <param name=\"comparisonType\">One of the enumeration values that determines how this string and <paramref name=\"value\" /> are compared. </param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"value\" /> is null. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"comparisonType\" /> is not a <see cref=\"T:System.StringComparison\" /> value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "The string to compare.",
                "ImportedHelp": "<param name=\"value\">The string to compare. </param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.StringComparison",
              "PinAttribute": {
                "Help": "One of the enumeration values that determines how this string and Value are compared.",
                "ImportedHelp": "<param name=\"comparisonType\">One of the enumeration values that determines how this string and <paramref name=\"value\" /> are compared. </param>"
              },
              "DotNetName": "comparisonType"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if this instance begins with Value; otherwise, false.",
              "ImportedHelp": "<returns>true if this instance begins with <paramref name=\"value\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "StartsWith"
        },
        {
          "NodeAttribute": {
            "Name": "Substring",
            "ShowCategory": false,
            "Help": "Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.",
            "ImportedHelp": "<member name=\"M:System.String.Substring(System.Int32)\">\r\n  <summary>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</summary>\r\n  <returns>A string that is equivalent to the substring that begins at <paramref name=\"startIndex\" /> in this instance, or <see cref=\"F:System.String.Empty\" /> if <paramref name=\"startIndex\" /> is equal to the length of this instance.</returns>\r\n  <param name=\"startIndex\">The zero-based starting character position of a substring in this instance. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> is less than zero or greater than the length of this instance. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The zero-based starting character position of a substring in this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The zero-based starting character position of a substring in this instance. </param>"
              },
              "DotNetName": "startIndex"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that is equivalent to the substring that begins at Start Index in this instance, or Empty if Start Index is equal to the length of this instance.",
              "ImportedHelp": "<returns>A string that is equivalent to the substring that begins at <paramref name=\"startIndex\" /> in this instance, or <see cref=\"F:System.String.Empty\" /> if <paramref name=\"startIndex\" /> is equal to the length of this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Substring"
        },
        {
          "NodeAttribute": {
            "Name": "Substring",
            "Version": "Length",
            "ShowCategory": false,
            "Help": "Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.",
            "ImportedHelp": "<member name=\"M:System.String.Substring(System.Int32,System.Int32)\">\r\n  <summary>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</summary>\r\n  <returns>A string that is equivalent to the substring of length <paramref name=\"length\" /> that begins at <paramref name=\"startIndex\" /> in this instance, or <see cref=\"F:System.String.Empty\" /> if <paramref name=\"startIndex\" /> is equal to the length of this instance and <paramref name=\"length\" /> is zero.</returns>\r\n  <param name=\"startIndex\">The zero-based starting character position of a substring in this instance. </param>\r\n  <param name=\"length\">The number of characters in the substring. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">\r\n    <paramref name=\"startIndex\" /> plus <paramref name=\"length\" /> indicates a position not within this instance.-or- <paramref name=\"startIndex\" /> or <paramref name=\"length\" /> is less than zero. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The zero-based starting character position of a substring in this instance.",
                "ImportedHelp": "<param name=\"startIndex\">The zero-based starting character position of a substring in this instance. </param>"
              },
              "DotNetName": "startIndex"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "The number of characters in the substring.",
                "ImportedHelp": "<param name=\"length\">The number of characters in the substring. </param>"
              },
              "DotNetName": "length"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "A string that is equivalent to the substring of length Length that begins at Start Index in this instance, or Empty if Start Index is equal to the length of this instance and Length is zero.",
              "ImportedHelp": "<returns>A string that is equivalent to the substring of length <paramref name=\"length\" /> that begins at <paramref name=\"startIndex\" /> in this instance, or <see cref=\"F:System.String.Empty\" /> if <paramref name=\"startIndex\" /> is equal to the length of this instance and <paramref name=\"length\" /> is zero.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Substring"
        },
        {
          "NodeAttribute": {
            "Name": "ToLower",
            "ShowCategory": false,
            "Help": "Returns a copy of this String object converted to lowercase using the casing rules of the invariant culture.",
            "ImportedHelp": "<member name=\"M:System.String.ToLowerInvariant\">\r\n  <summary>Returns a copy of this <see cref=\"T:System.String\" /> object converted to lowercase using the casing rules of the invariant culture.</summary>\r\n  <returns>The lowercase equivalent of the current string.</returns>\r\n  <filterpriority>2</filterpriority>\r\n  <PermissionSet>\r\n    <IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"UnmanagedCode\" />\r\n  </PermissionSet>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The lowercase equivalent of the current string.",
              "ImportedHelp": "<returns>The lowercase equivalent of the current string.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToLowerInvariant"
        },
        {
          "NodeAttribute": {
            "Name": "ToUpper",
            "ShowCategory": false,
            "Help": "Returns a copy of this String object converted to uppercase using the casing rules of the invariant culture.",
            "ImportedHelp": "<member name=\"M:System.String.ToUpperInvariant\">\r\n  <summary>Returns a copy of this <see cref=\"T:System.String\" /> object converted to uppercase using the casing rules of the invariant culture.</summary>\r\n  <returns>The uppercase equivalent of the current string.</returns>\r\n  <filterpriority>2</filterpriority>\r\n  <PermissionSet>\r\n    <IPermission class=\"System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" version=\"1\" Flags=\"UnmanagedCode\" />\r\n  </PermissionSet>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The uppercase equivalent of the current string.",
              "ImportedHelp": "<returns>The uppercase equivalent of the current string.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToUpperInvariant"
        },
        {
          "NodeAttribute": {
            "Name": "Trim",
            "Help": "Removes all leading and trailing white-space characters from the current String object.",
            "ImportedHelp": "<member name=\"M:System.String.Trim\">\r\n  <summary>Removes all leading and trailing white-space characters from the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.",
              "ImportedHelp": "<returns>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Trim"
        },
        {
          "NodeAttribute": {
            "Name": "Trim",
            "Version": "Char[]",
            "Help": "Removes all leading and trailing occurrences of a set of characters specified in an array from the current String object.",
            "ImportedHelp": "<member name=\"M:System.String.Trim(System.Char[])\">\r\n  <summary>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The string that remains after all occurrences of the characters in the <paramref name=\"trimChars\" /> parameter are removed from the start and end of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>\r\n  <param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char[]",
              "PinAttribute": {
                "Help": "An array of Unicode characters to remove, or null.",
                "ImportedHelp": "<param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>"
              },
              "DotNetName": "trimChars"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string that remains after all occurrences of the characters in the Trim Chars parameter are removed from the start and end of the current string. If Trim Chars is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.",
              "ImportedHelp": "<returns>The string that remains after all occurrences of the characters in the <paramref name=\"trimChars\" /> parameter are removed from the start and end of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Trim"
        },
        {
          "NodeAttribute": {
            "Name": "TrimEnd",
            "Help": "Removes all trailing occurrences of a set of characters specified in an array from the current String object.",
            "ImportedHelp": "<member name=\"M:System.String.TrimEnd(System.Char[])\">\r\n  <summary>Removes all trailing occurrences of a set of characters specified in an array from the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The string that remains after all occurrences of the characters in the <paramref name=\"trimChars\" /> parameter are removed from the end of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>\r\n  <param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char[]",
              "PinAttribute": {
                "Help": "An array of Unicode characters to remove, or null.",
                "ImportedHelp": "<param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>"
              },
              "DotNetName": "trimChars"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string that remains after all occurrences of the characters in the Trim Chars parameter are removed from the end of the current string. If Trim Chars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.",
              "ImportedHelp": "<returns>The string that remains after all occurrences of the characters in the <paramref name=\"trimChars\" /> parameter are removed from the end of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TrimEnd"
        },
        {
          "NodeAttribute": {
            "Name": "TrimStart",
            "Help": "Removes all leading occurrences of a set of characters specified in an array from the current String object.",
            "ImportedHelp": "<member name=\"M:System.String.TrimStart(System.Char[])\">\r\n  <summary>Removes all leading occurrences of a set of characters specified in an array from the current <see cref=\"T:System.String\" /> object.</summary>\r\n  <returns>The string that remains after all occurrences of characters in the <paramref name=\"trimChars\" /> parameter are removed from the start of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, white-space characters are removed instead.</returns>\r\n  <param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>\r\n  <filterpriority>2</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Char[]",
              "PinAttribute": {
                "Help": "An array of Unicode characters to remove, or null.",
                "ImportedHelp": "<param name=\"trimChars\">An array of Unicode characters to remove, or null. </param>"
              },
              "DotNetName": "trimChars"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string that remains after all occurrences of characters in the Trim Chars parameter are removed from the start of the current string. If Trim Chars is null or an empty array, white-space characters are removed instead.",
              "ImportedHelp": "<returns>The string that remains after all occurrences of characters in the <paramref name=\"trimChars\" /> parameter are removed from the start of the current string. If <paramref name=\"trimChars\" /> is null or an empty array, white-space characters are removed instead.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TrimStart"
        }
      ],
      "DotNetName": "System.String"
    },
    {
      "TypeAttribute": {
        "Name": "StringComparison",
        "Category": "Primitive.String",
        "Help": "Specifies the culture, case, and sort rules to be used by certain overloads of the M:System.String.Compare(System.String,System.String) and M:System.String.Equals(System.Object) methods.",
        "ImportedHelp": "<member name=\"T:System.StringComparison\">\r\n  <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref=\"M:System.String.Compare(System.String,System.String)\" /> and <see cref=\"M:System.String.Equals(System.Object)\" /> methods.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.StringComparison"
    },
    {
      "TypeAttribute": {
        "Name": "StringSplitOptions",
        "Category": "Primitive.String",
        "Help": "Specifies whether applicable Overload:System.String.Split method overloads include or omit empty substrings from the return value.",
        "ImportedHelp": "<member name=\"T:System.StringSplitOptions\">\r\n  <summary>Specifies whether applicable <see cref=\"Overload:System.String.Split\" /> method overloads include or omit empty substrings from the return value.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.StringSplitOptions"
    },
    {
      "TypeAttribute": {
        "Name": "TimeSpan",
        "Category": "System",
        "Help": "Represents a time interval.To browse the .NET Framework source code for this type, see the Reference Source.",
        "ImportedHelp": "<member name=\"T:System.TimeSpan\">\r\n  <summary>Represents a time interval.To browse the .NET Framework source code for this type, see the Reference Source.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Indicates whether two TimeSpan instances are not equal.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether two <see cref=\"T:System.TimeSpan\" /> instances are not equal.</summary>\r\n  <returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are not equal; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare.</param>\r\n  <param name=\"t2\">The second time interval to compare.</param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare.</param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare.</param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the values of Input and Input 2 are not equal; otherwise, false.",
              "ImportedHelp": "<returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are not equal; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds two specified TimeSpan instances.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Adds two specified <see cref=\"T:System.TimeSpan\" /> instances.</summary>\r\n  <returns>An object whose value is the sum of the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" />.</returns>\r\n  <param name=\"t1\">The first time interval to add. </param>\r\n  <param name=\"t2\">The second time interval to add.</param>\r\n  <exception cref=\"T:System.OverflowException\">The resulting <see cref=\"T:System.TimeSpan\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. </exception>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to add.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to add. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to add.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to add.</param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object whose value is the sum of the values of Input and Input 2.",
              "ImportedHelp": "<returns>An object whose value is the sum of the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Addition"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts a specified TimeSpan from another specified TimeSpan.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Subtracts a specified <see cref=\"T:System.TimeSpan\" /> from another specified <see cref=\"T:System.TimeSpan\" />.</summary>\r\n  <returns>An object whose value is the result of the value of <paramref name=\"t1\" /> minus the value of <paramref name=\"t2\" />.</returns>\r\n  <param name=\"t1\">The minuend. </param>\r\n  <param name=\"t2\">The subtrahend. </param>\r\n  <exception cref=\"T:System.OverflowException\">The return value is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. </exception>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The minuend.",
                "ImportedHelp": "<param name=\"t1\">The minuend. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The subtrahend.",
                "ImportedHelp": "<param name=\"t2\">The subtrahend. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object whose value is the result of the value of Input minus the value of Input 2.",
              "ImportedHelp": "<returns>An object whose value is the result of the value of <paramref name=\"t1\" /> minus the value of <paramref name=\"t2\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Subtraction"
        },
        {
          "NodeAttribute": {
            "Name": "<",
            "Help": "Indicates whether a specified TimeSpan is less than another specified TimeSpan.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether a specified <see cref=\"T:System.TimeSpan\" /> is less than another specified <see cref=\"T:System.TimeSpan\" />.</summary>\r\n  <returns>true if the value of <paramref name=\"t1\" /> is less than the value of <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare.</param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare.</param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is less than the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"t1\" /> is less than the value of <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThan"
        },
        {
          "NodeAttribute": {
            "Name": "<=",
            "Help": "Indicates whether a specified TimeSpan is less than or equal to another specified TimeSpan.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether a specified <see cref=\"T:System.TimeSpan\" /> is less than or equal to another specified <see cref=\"T:System.TimeSpan\" />.</summary>\r\n  <returns>true if the value of <paramref name=\"t1\" /> is less than or equal to the value of <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare. </param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is less than or equal to the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"t1\" /> is less than or equal to the value of <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_LessThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Indicates whether two TimeSpan instances are equal.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether two <see cref=\"T:System.TimeSpan\" /> instances are equal.</summary>\r\n  <returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are equal; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare. </param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the values of Input and Input 2 are equal; otherwise, false.",
              "ImportedHelp": "<returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are equal; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": ">",
            "Help": "Indicates whether a specified TimeSpan is greater than another specified TimeSpan.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether a specified <see cref=\"T:System.TimeSpan\" /> is greater than another specified <see cref=\"T:System.TimeSpan\" />.</summary>\r\n  <returns>true if the value of <paramref name=\"t1\" /> is greater than the value of <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare. </param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is greater than the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"t1\" /> is greater than the value of <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThan"
        },
        {
          "NodeAttribute": {
            "Name": ">=",
            "Help": "Indicates whether a specified TimeSpan is greater than or equal to another specified TimeSpan.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Indicates whether a specified <see cref=\"T:System.TimeSpan\" /> is greater than or equal to another specified <see cref=\"T:System.TimeSpan\" />.</summary>\r\n  <returns>true if the value of <paramref name=\"t1\" /> is greater than or equal to the value of <paramref name=\"t2\" />; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare.</param>\r\n  <param name=\"t2\">The second time interval to compare.</param>\r\n  <filterpriority>3</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare.</param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare.</param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the value of Input is greater than or equal to the value of Input 2; otherwise, false.",
              "ImportedHelp": "<returns>true if the value of <paramref name=\"t1\" /> is greater than or equal to the value of <paramref name=\"t2\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_GreaterThanOrEqual"
        },
        {
          "NodeAttribute": {
            "Name": "Compare",
            "Help": "Compares two TimeSpan values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Compares two <see cref=\"T:System.TimeSpan\" /> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</summary>\r\n  <returns>One of the following values.Value Description -1 <paramref name=\"t1\" /> is shorter than <paramref name=\"t2\" />. 0 <paramref name=\"t1\" /> is equal to <paramref name=\"t2\" />. 1 <paramref name=\"t1\" /> is longer than <paramref name=\"t2\" />. </returns>\r\n  <param name=\"t1\">The first time interval to compare. </param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "One of the following values.Value Description -1 T 1 is shorter than T 2. 0 T 1 is equal to T 2. 1 T 1 is longer than T 2.",
              "ImportedHelp": "<returns>One of the following values.Value Description -1 <paramref name=\"t1\" /> is shorter than <paramref name=\"t2\" />. 0 <paramref name=\"t1\" /> is equal to <paramref name=\"t2\" />. 1 <paramref name=\"t1\" /> is longer than <paramref name=\"t2\" />. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Compare"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Days Hours Minutes Seconds",
            "Help": "Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, and seconds.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.TimeSpan\" /> structure to a specified number of days, hours, minutes, and seconds.</summary>\r\n  <param name=\"days\">Number of days. </param>\r\n  <param name=\"hours\">Number of hours. </param>\r\n  <param name=\"minutes\">Number of minutes. </param>\r\n  <param name=\"seconds\">Number of seconds. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The parameters specify a <see cref=\"T:System.TimeSpan\" /> value less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of days.",
                "ImportedHelp": "<param name=\"days\">Number of days. </param>"
              },
              "DotNetName": "days"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of hours.",
                "ImportedHelp": "<param name=\"hours\">Number of hours. </param>"
              },
              "DotNetName": "hours"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of minutes.",
                "ImportedHelp": "<param name=\"minutes\">Number of minutes. </param>"
              },
              "DotNetName": "minutes"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of seconds.",
                "ImportedHelp": "<param name=\"seconds\">Number of seconds. </param>"
              },
              "DotNetName": "seconds"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Days Hours Minutes Seconds Milliseconds",
            "Help": "Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, seconds, and milliseconds.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.TimeSpan\" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>\r\n  <param name=\"days\">Number of days. </param>\r\n  <param name=\"hours\">Number of hours. </param>\r\n  <param name=\"minutes\">Number of minutes. </param>\r\n  <param name=\"seconds\">Number of seconds. </param>\r\n  <param name=\"milliseconds\">Number of milliseconds. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The parameters specify a <see cref=\"T:System.TimeSpan\" /> value less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of days.",
                "ImportedHelp": "<param name=\"days\">Number of days. </param>"
              },
              "DotNetName": "days"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of hours.",
                "ImportedHelp": "<param name=\"hours\">Number of hours. </param>"
              },
              "DotNetName": "hours"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of minutes.",
                "ImportedHelp": "<param name=\"minutes\">Number of minutes. </param>"
              },
              "DotNetName": "minutes"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of seconds.",
                "ImportedHelp": "<param name=\"seconds\">Number of seconds. </param>"
              },
              "DotNetName": "seconds"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of milliseconds.",
                "ImportedHelp": "<param name=\"milliseconds\">Number of milliseconds. </param>"
              },
              "DotNetName": "milliseconds"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Create",
            "Version": "Hours Minutes Seconds",
            "Help": "Initializes a new instance of the TimeSpan structure to a specified number of hours, minutes, and seconds.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.TimeSpan\" /> structure to a specified number of hours, minutes, and seconds.</summary>\r\n  <param name=\"hours\">Number of hours. </param>\r\n  <param name=\"minutes\">Number of minutes. </param>\r\n  <param name=\"seconds\">Number of seconds. </param>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">The parameters specify a <see cref=\"T:System.TimeSpan\" /> value less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. </exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of hours.",
                "ImportedHelp": "<param name=\"hours\">Number of hours. </param>"
              },
              "DotNetName": "hours"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of minutes.",
                "ImportedHelp": "<param name=\"minutes\">Number of minutes. </param>"
              },
              "DotNetName": "minutes"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Number of seconds.",
                "ImportedHelp": "<param name=\"seconds\">Number of seconds. </param>"
              },
              "DotNetName": "seconds"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Days",
            "ShowCategory": true,
            "Help": "Gets the days component of the time interval represented by the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Days\">\r\n  <summary>Gets the days component of the time interval represented by the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The day component of this instance. The return value can be positive or negative.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Days"
        },
        {
          "NodeAttribute": {
            "Name": "Equals",
            "Help": "Returns a value that indicates whether two specified instances of TimeSpan are equal.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)\">\r\n  <summary>Returns a value that indicates whether two specified instances of <see cref=\"T:System.TimeSpan\" /> are equal.</summary>\r\n  <returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are equal; otherwise, false.</returns>\r\n  <param name=\"t1\">The first time interval to compare. </param>\r\n  <param name=\"t2\">The second time interval to compare. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The first time interval to compare.",
                "ImportedHelp": "<param name=\"t1\">The first time interval to compare. </param>"
              },
              "DotNetName": "t1"
            },
            {
              "TypeFullName": "System.TimeSpan",
              "PinAttribute": {
                "Help": "The second time interval to compare.",
                "ImportedHelp": "<param name=\"t2\">The second time interval to compare. </param>"
              },
              "DotNetName": "t2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the values of T 1 and T 2 are equal; otherwise, false.",
              "ImportedHelp": "<returns>true if the values of <paramref name=\"t1\" /> and <paramref name=\"t2\" /> are equal; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Equals"
        },
        {
          "NodeAttribute": {
            "Name": "FromDays",
            "Help": "Returns a TimeSpan that represents a specified number of days, where the specification is accurate to the nearest millisecond.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromDays(System.Double)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of days, accurate to the nearest millisecond. </param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. -or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.PositiveInfinity\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.NegativeInfinity\" />.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of days, accurate to the nearest millisecond.",
                "ImportedHelp": "<param name=\"value\">A number of days, accurate to the nearest millisecond. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromDays"
        },
        {
          "NodeAttribute": {
            "Name": "FromHours",
            "Help": "Returns a TimeSpan that represents a specified number of hours, where the specification is accurate to the nearest millisecond.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromHours(System.Double)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of hours accurate to the nearest millisecond. </param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />. -or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.PositiveInfinity\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.NegativeInfinity\" />.</exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of hours accurate to the nearest millisecond.",
                "ImportedHelp": "<param name=\"value\">A number of hours accurate to the nearest millisecond. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromHours"
        },
        {
          "NodeAttribute": {
            "Name": "FromMilliseconds",
            "Help": "Returns a TimeSpan that represents a specified number of milliseconds.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromMilliseconds(System.Double)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified number of milliseconds.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of milliseconds. </param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.PositiveInfinity\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.NegativeInfinity\" />. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of milliseconds.",
                "ImportedHelp": "<param name=\"value\">A number of milliseconds. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "FromMinutes",
            "Help": "Returns a TimeSpan that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromMinutes(System.Double)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of minutes, accurate to the nearest millisecond. </param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.PositiveInfinity\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.NegativeInfinity\" />. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of minutes, accurate to the nearest millisecond.",
                "ImportedHelp": "<param name=\"value\">A number of minutes, accurate to the nearest millisecond. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromMinutes"
        },
        {
          "NodeAttribute": {
            "Name": "FromSeconds",
            "Help": "Returns a TimeSpan that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromSeconds(System.Double)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of seconds, accurate to the nearest millisecond. </param>\r\n  <exception cref=\"T:System.OverflowException\">\r\n    <paramref name=\"value\" /> is less than <see cref=\"F:System.TimeSpan.MinValue\" /> or greater than <see cref=\"F:System.TimeSpan.MaxValue\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.PositiveInfinity\" />.-or-<paramref name=\"value\" /> is <see cref=\"F:System.Double.NegativeInfinity\" />. </exception>\r\n  <exception cref=\"T:System.ArgumentException\">\r\n    <paramref name=\"value\" /> is equal to <see cref=\"F:System.Double.NaN\" />. </exception>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Double",
              "PinAttribute": {
                "Help": "A number of seconds, accurate to the nearest millisecond.",
                "ImportedHelp": "<param name=\"value\">A number of seconds, accurate to the nearest millisecond. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "FromTicks",
            "Help": "Returns a TimeSpan that represents a specified time, where the specification is in units of ticks.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.FromTicks(System.Int64)\">\r\n  <summary>Returns a <see cref=\"T:System.TimeSpan\" /> that represents a specified time, where the specification is in units of ticks.</summary>\r\n  <returns>An object that represents <paramref name=\"value\" />.</returns>\r\n  <param name=\"value\">A number of ticks that represent a time. </param>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int64",
              "PinAttribute": {
                "Help": "A number of ticks that represent a time.",
                "ImportedHelp": "<param name=\"value\">A number of ticks that represent a time. </param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.TimeSpan",
            "PinAttribute": {
              "Help": "An object that represents Value.",
              "ImportedHelp": "<returns>An object that represents <paramref name=\"value\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromTicks"
        },
        {
          "NodeAttribute": {
            "Name": "Hours",
            "ShowCategory": true,
            "Help": "Gets the hours component of the time interval represented by the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Hours\">\r\n  <summary>Gets the hours component of the time interval represented by the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The hour component of the current <see cref=\"T:System.TimeSpan\" /> structure. The return value ranges from -23 through 23.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Hours"
        },
        {
          "NodeAttribute": {
            "Name": "Milliseconds",
            "ShowCategory": true,
            "Help": "Gets the milliseconds component of the time interval represented by the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Milliseconds\">\r\n  <summary>Gets the milliseconds component of the time interval represented by the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The millisecond component of the current <see cref=\"T:System.TimeSpan\" /> structure. The return value ranges from -999 through 999.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Milliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "Minutes",
            "ShowCategory": true,
            "Help": "Gets the minutes component of the time interval represented by the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Minutes\">\r\n  <summary>Gets the minutes component of the time interval represented by the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The minute component of the current <see cref=\"T:System.TimeSpan\" /> structure. The return value ranges from -59 through 59.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Minutes"
        },
        {
          "NodeAttribute": {
            "Name": "Seconds",
            "ShowCategory": true,
            "Help": "Gets the seconds component of the time interval represented by the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Seconds\">\r\n  <summary>Gets the seconds component of the time interval represented by the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The second component of the current <see cref=\"T:System.TimeSpan\" /> structure. The return value ranges from -59 through 59.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Seconds"
        },
        {
          "NodeAttribute": {
            "Name": "Ticks",
            "ShowCategory": true,
            "Help": "Gets the number of ticks that represent the value of the current TimeSpan structure.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.Ticks\">\r\n  <summary>Gets the number of ticks that represent the value of the current <see cref=\"T:System.TimeSpan\" /> structure.</summary>\r\n  <returns>The number of ticks contained in this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "Ticks"
        },
        {
          "NodeAttribute": {
            "Name": "ToString",
            "Version": "Format",
            "Help": "Converts the value of the current TimeSpan object to its equivalent string representation by using the specified format.",
            "ImportedHelp": "<member name=\"M:System.TimeSpan.ToString(System.String)\">\r\n  <summary>Converts the value of the current <see cref=\"T:System.TimeSpan\" /> object to its equivalent string representation by using the specified format.</summary>\r\n  <returns>The string representation of the current <see cref=\"T:System.TimeSpan\" /> value in the format specified by the <paramref name=\"format\" /> parameter.</returns>\r\n  <param name=\"format\">A standard or custom <see cref=\"T:System.TimeSpan\" /> format string.</param>\r\n  <exception cref=\"T:System.FormatException\">The <paramref name=\"format\" /> parameter is not recognized or is not supported.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.String",
              "PinAttribute": {
                "Help": "A standard or custom TimeSpan format string.",
                "ImportedHelp": "<param name=\"format\">A standard or custom <see cref=\"T:System.TimeSpan\" /> format string.</param>"
              },
              "DotNetName": "format"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.String",
            "PinAttribute": {
              "Help": "The string representation of the current TimeSpan value in the format specified by the Format parameter.",
              "ImportedHelp": "<returns>The string representation of the current <see cref=\"T:System.TimeSpan\" /> value in the format specified by the <paramref name=\"format\" /> parameter.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToString"
        },
        {
          "NodeAttribute": {
            "Name": "TotalDays",
            "ShowCategory": true,
            "Help": "Gets the value of the current TimeSpan structure expressed in whole and fractional days.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.TotalDays\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.TimeSpan\" /> structure expressed in whole and fractional days.</summary>\r\n  <returns>The total number of days represented by this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TotalDays"
        },
        {
          "NodeAttribute": {
            "Name": "TotalHours",
            "ShowCategory": true,
            "Help": "Gets the value of the current TimeSpan structure expressed in whole and fractional hours.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.TotalHours\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.TimeSpan\" /> structure expressed in whole and fractional hours.</summary>\r\n  <returns>The total number of hours represented by this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TotalHours"
        },
        {
          "NodeAttribute": {
            "Name": "TotalMilliseconds",
            "ShowCategory": true,
            "Help": "Gets the value of the current TimeSpan structure expressed in whole and fractional milliseconds.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.TotalMilliseconds\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.TimeSpan\" /> structure expressed in whole and fractional milliseconds.</summary>\r\n  <returns>The total number of milliseconds represented by this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TotalMilliseconds"
        },
        {
          "NodeAttribute": {
            "Name": "TotalMinutes",
            "ShowCategory": true,
            "Help": "Gets the value of the current TimeSpan structure expressed in whole and fractional minutes.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.TotalMinutes\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.TimeSpan\" /> structure expressed in whole and fractional minutes.</summary>\r\n  <returns>The total number of minutes represented by this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TotalMinutes"
        },
        {
          "NodeAttribute": {
            "Name": "TotalSeconds",
            "ShowCategory": true,
            "Help": "Gets the value of the current TimeSpan structure expressed in whole and fractional seconds.",
            "ImportedHelp": "<member name=\"P:System.TimeSpan.TotalSeconds\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.TimeSpan\" /> structure expressed in whole and fractional seconds.</summary>\r\n  <returns>The total number of seconds represented by this instance.</returns>\r\n  <filterpriority>1</filterpriority>\r\n</member>"
          },
          "DotNetName": "TotalSeconds"
        },
        {
          "NodeAttribute": {
            "Name": "Zero",
            "Help": "Represents the zero TimeSpan value. This field is read-only.",
            "ImportedHelp": "<member name=\"F:System.TimeSpan.Zero\">\r\n  <summary>Represents the zero <see cref=\"T:System.TimeSpan\" /> value. This field is read-only.</summary>\r\n  <filterpriority>1</filterpriority>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Zero"
        }
      ],
      "DotNetName": "System.TimeSpan"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "2 Items",
        "Help": "Represents a 2-tuple, or pair.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`2\">\r\n  <summary>Represents a 2-tuple, or pair. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Item1",
            "ShowCategory": true,
            "Help": "Gets the value of the current Tuple object's first component.",
            "ImportedHelp": "<member name=\"P:System.Tuple`2.Item1\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.Tuple`2\" /> object's first component.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.Tuple`2\" /> object's first component.</returns>\r\n</member>"
          },
          "DotNetName": "Item1"
        },
        {
          "NodeAttribute": {
            "Name": "Item2",
            "ShowCategory": true,
            "Help": "Gets the value of the current Tuple object's second component.",
            "ImportedHelp": "<member name=\"P:System.Tuple`2.Item2\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.Tuple`2\" /> object's second component.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.Tuple`2\" /> object's second component.</returns>\r\n</member>"
          },
          "DotNetName": "Item2"
        },
        {
          "NodeAttribute": {
            "Name": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Tuple class.",
            "ImportedHelp": "<member name=\"M:System.Tuple`2.#ctor(`0,`1)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.Tuple`2\" /> class.</summary>\r\n  <param name=\"item1\">The value of the tuple's first component.</param>\r\n  <param name=\"item2\">The value of the tuple's second component.</param>\r\n</member>",
            "IsDefaultValue": true
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "PinAttribute": {
                "Help": "The value of the tuple's first component.",
                "ImportedHelp": "<param name=\"item1\">The value of the tuple's first component.</param>"
              },
              "DotNetName": "item1"
            },
            {
              "TypeFullName": "T2",
              "PinAttribute": {
                "Help": "The value of the tuple's second component.",
                "ImportedHelp": "<param name=\"item2\">The value of the tuple's second component.</param>"
              },
              "DotNetName": "item2"
            }
          ],
          "DotNetName": ".ctor"
        }
      ],
      "DotNetName": "System.Tuple`2"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "3 Items",
        "Help": "Represents a 3-tuple, or triple.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`3\">\r\n  <summary>Represents a 3-tuple, or triple. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Item1",
            "ShowCategory": true,
            "Help": "Gets the value of the current Tuple object's first component.",
            "ImportedHelp": "<member name=\"P:System.Tuple`3.Item1\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.Tuple`3\" /> object's first component.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.Tuple`3\" /> object's first component.</returns>\r\n</member>"
          },
          "DotNetName": "Item1"
        },
        {
          "NodeAttribute": {
            "Name": "Item2",
            "ShowCategory": true,
            "Help": "Gets the value of the current Tuple object's second component.",
            "ImportedHelp": "<member name=\"P:System.Tuple`3.Item2\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.Tuple`3\" /> object's second component.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.Tuple`3\" /> object's second component.</returns>\r\n</member>"
          },
          "DotNetName": "Item2"
        },
        {
          "NodeAttribute": {
            "Name": "Item3",
            "ShowCategory": true,
            "Help": "Gets the value of the current Tuple object's third component.",
            "ImportedHelp": "<member name=\"P:System.Tuple`3.Item3\">\r\n  <summary>Gets the value of the current <see cref=\"T:System.Tuple`3\" /> object's third component.</summary>\r\n  <returns>The value of the current <see cref=\"T:System.Tuple`3\" /> object's third component.</returns>\r\n</member>"
          },
          "DotNetName": "Item3"
        },
        {
          "NodeAttribute": {
            "Name": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Tuple class.",
            "ImportedHelp": "<member name=\"M:System.Tuple`3.#ctor(`0,`1,`2)\">\r\n  <summary>Initializes a new instance of the <see cref=\"T:System.Tuple`3\" /> class.</summary>\r\n  <param name=\"item1\">The value of the tuple's first component.</param>\r\n  <param name=\"item2\">The value of the tuple's second component.</param>\r\n  <param name=\"item3\">The value of the tuple's third component.</param>\r\n</member>",
            "IsDefaultValue": true
          },
          "Parameters": [
            {
              "TypeFullName": "T1",
              "PinAttribute": {
                "Help": "The value of the tuple's first component.",
                "ImportedHelp": "<param name=\"item1\">The value of the tuple's first component.</param>"
              },
              "DotNetName": "item1"
            },
            {
              "TypeFullName": "T2",
              "PinAttribute": {
                "Help": "The value of the tuple's second component.",
                "ImportedHelp": "<param name=\"item2\">The value of the tuple's second component.</param>"
              },
              "DotNetName": "item2"
            },
            {
              "TypeFullName": "T3",
              "PinAttribute": {
                "Help": "The value of the tuple's third component.",
                "ImportedHelp": "<param name=\"item3\">The value of the tuple's third component.</param>"
              },
              "DotNetName": "item3"
            }
          ],
          "DotNetName": ".ctor"
        }
      ],
      "DotNetName": "System.Tuple`3"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "4 Items Hidden",
        "Help": "Represents a 4-tuple, or quadruple.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\nT4: The type of the tuple's fourth component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`4\">\r\n  <summary>Represents a 4-tuple, or quadruple. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <typeparam name=\"T4\">The type of the tuple's fourth component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Tuple`4"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "5 Items Hidden",
        "Help": "Represents a 5-tuple, or quintuple.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\nT4: The type of the tuple's fourth component.\r\nT5: The type of the tuple's fifth component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`5\">\r\n  <summary>Represents a 5-tuple, or quintuple. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <typeparam name=\"T4\">The type of the tuple's fourth component.</typeparam>\r\n  <typeparam name=\"T5\">The type of the tuple's fifth component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Tuple`5"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "6 Items Hidden",
        "Help": "Represents a 6-tuple, or sextuple.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\nT4: The type of the tuple's fourth component.\r\nT5: The type of the tuple's fifth component.\r\nT6: The type of the tuple's sixth component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`6\">\r\n  <summary>Represents a 6-tuple, or sextuple. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <typeparam name=\"T4\">The type of the tuple's fourth component.</typeparam>\r\n  <typeparam name=\"T5\">The type of the tuple's fifth component.</typeparam>\r\n  <typeparam name=\"T6\">The type of the tuple's sixth component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Tuple`6"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "7 Items Hidden",
        "Help": "Represents a 7-tuple, or septuple.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\nT4: The type of the tuple's fourth component.\r\nT5: The type of the tuple's fifth component.\r\nT6: The type of the tuple's sixth component.\r\nT7: The type of the tuple's seventh component.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`7\">\r\n  <summary>Represents a 7-tuple, or septuple. </summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <typeparam name=\"T4\">The type of the tuple's fourth component.</typeparam>\r\n  <typeparam name=\"T5\">The type of the tuple's fifth component.</typeparam>\r\n  <typeparam name=\"T6\">The type of the tuple's sixth component.</typeparam>\r\n  <typeparam name=\"T7\">The type of the tuple's seventh component.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Tuple`7"
    },
    {
      "TypeAttribute": {
        "Name": "Tuple",
        "Category": "Primitive",
        "Version": "8 Items Hidden",
        "Help": "Represents an n-tuple, where n is 8 or greater.T1: The type of the tuple's first component.\r\nT2: The type of the tuple's second component.\r\nT3: The type of the tuple's third component.\r\nT4: The type of the tuple's fourth component.\r\nT5: The type of the tuple's fifth component.\r\nT6: The type of the tuple's sixth component.\r\nT7: The type of the tuple's seventh component.\r\nTRest: Any generic Tuple object that defines the types of the tuple's remaining components.\r\n",
        "ImportedHelp": "<member name=\"T:System.Tuple`8\">\r\n  <summary>Represents an n-tuple, where n is 8 or greater.</summary>\r\n  <typeparam name=\"T1\">The type of the tuple's first component.</typeparam>\r\n  <typeparam name=\"T2\">The type of the tuple's second component.</typeparam>\r\n  <typeparam name=\"T3\">The type of the tuple's third component.</typeparam>\r\n  <typeparam name=\"T4\">The type of the tuple's fourth component.</typeparam>\r\n  <typeparam name=\"T5\">The type of the tuple's fifth component.</typeparam>\r\n  <typeparam name=\"T6\">The type of the tuple's sixth component.</typeparam>\r\n  <typeparam name=\"T7\">The type of the tuple's seventh component.</typeparam>\r\n  <typeparam name=\"TRest\">Any generic Tuple object that defines the types of the tuple's remaining components.</typeparam>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Tuple`8"
    },
    {
      "TypeAttribute": {
        "Name": "Void",
        "Category": "Primitive",
        "Help": "Specifies a return value type for a method that does not return a value.",
        "ImportedHelp": "<member name=\"T:System.Void\">\r\n  <summary>Specifies a return value type for a method that does not return a value.</summary>\r\n  <filterpriority>2</filterpriority>\r\n</member>",
        "Hidden": true
      },
      "Members": [],
      "DotNetName": "System.Void"
    }
  ],
  "IsGAC": true,
  "DotNetName": "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
}