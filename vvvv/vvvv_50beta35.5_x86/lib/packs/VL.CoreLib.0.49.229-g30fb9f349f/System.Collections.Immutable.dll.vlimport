{
  "Version": 2,
  "Types": [
    {
      "TypeAttribute": {
        "Name": "IDictionary",
        "Category": "Collections.Abstract",
        "Help": "Represents an immutable collection of key/value pairs.TKey: The type of keys in the dictionary.\r\nTValue: The type of values in the dictionary.\r\n",
        "ImportedHelp": "<member name=\"T:System.Collections.Immutable.IImmutableDictionary`2\">\r\n  <summary>Represents an immutable collection of key/value pairs.</summary>\r\n  <typeparam name=\"TKey\">The type of keys in the dictionary.</typeparam>\r\n  <typeparam name=\"TValue\">The type of values in the dictionary.</typeparam>\r\n</member>",
        "Hidden": true,
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "System.Collections.Immutable.IImmutableDictionary`2"
    },
    {
      "TypeAttribute": {
        "Name": "Dictionary",
        "Category": "Collections",
        "Help": "Represents an immutable, unordered collection of keys and values.TKey: The type of the keys in the dictionary.\r\nTValue: The type of the values in the dictionary.\r\n",
        "ImportedHelp": "<member name=\"T:System.Collections.Immutable.ImmutableDictionary`2\">\r\n  <summary>Represents an immutable, unordered collection of keys and values.</summary>\r\n  <typeparam name=\"TKey\">The type of the keys in the dictionary.</typeparam>\r\n  <typeparam name=\"TValue\">The type of the values in the dictionary.</typeparam>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Add",
            "Help": "Adds an element with the specified key and value to the immutable dictionary.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)\">\r\n  <summary>Adds an element with the specified key and value to the immutable dictionary.</summary>\r\n  <returns>A new immutable dictionary that contains the additional key/value pair.</returns>\r\n  <param name=\"key\">The key of the element to add.</param>\r\n  <param name=\"value\">The value of the element to add.</param>\r\n  <exception cref=\"T:System.ArgumentException\">The given key already exists in the dictionary but has a different value.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key of the element to add.",
                "ImportedHelp": "<param name=\"key\">The key of the element to add.</param>"
              },
              "DotNetName": "key"
            },
            {
              "TypeFullName": "TValue",
              "PinAttribute": {
                "Help": "The value of the element to add.",
                "ImportedHelp": "<param name=\"value\">The value of the element to add.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "A new immutable dictionary that contains the additional key/value pair.",
              "ImportedHelp": "<returns>A new immutable dictionary that contains the additional key/value pair.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "Clear",
            "Help": "Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.Clear\">\r\n  <summary>Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.</summary>\r\n  <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "An empty dictionary with equivalent ordering and key/value comparison rules.",
              "ImportedHelp": "<returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Clear"
        },
        {
          "NodeAttribute": {
            "Name": "ContainsKey",
            "Help": "Determines whether the immutable dictionary contains an element with the specified key.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)\">\r\n  <summary>Determines whether the immutable dictionary contains an element with the specified key.</summary>\r\n  <returns>true if the immutable dictionary contains an element with the specified key; otherwise, false.</returns>\r\n  <param name=\"key\">The key to locate.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key to locate.",
                "ImportedHelp": "<param name=\"key\">The key to locate.</param>"
              },
              "DotNetName": "key"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the immutable dictionary contains an element with the specified key; otherwise, false.",
              "ImportedHelp": "<returns>true if the immutable dictionary contains an element with the specified key; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ContainsKey"
        },
        {
          "NodeAttribute": {
            "Name": "ContainsValue",
            "Help": "Determines whether the immutable dictionary contains an element with the specified value.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)\">\r\n  <summary>Determines whether the immutable dictionary contains an element with the specified value.</summary>\r\n  <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>\r\n  <param name=\"value\">The value to locate. The value can be null for reference types.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TValue",
              "PinAttribute": {
                "Help": "The value to locate. The value can be null for reference types.",
                "ImportedHelp": "<param name=\"value\">The value to locate. The value can be null for reference types.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the dictionary contains an element with the specified value; otherwise, false.",
              "ImportedHelp": "<returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ContainsValue"
        },
        {
          "NodeAttribute": {
            "Name": "Count",
            "ShowCategory": true,
            "Help": "Gets the number of key/value pairs in the immutable dictionary.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableDictionary`2.Count\">\r\n  <summary>Gets the number of key/value pairs in the immutable dictionary.</summary>\r\n  <returns>The number of key/value pairs in the dictionary.</returns>\r\n</member>"
          },
          "DotNetName": "Count"
        },
        {
          "NodeAttribute": {
            "Name": "Empty",
            "Help": "Gets an empty immutable dictionary",
            "ImportedHelp": "<member name=\"F:System.Collections.Immutable.ImmutableDictionary`2.Empty\">\r\n  <summary>Gets an empty immutable dictionary</summary>\r\n  <returns>An empty immutable dictionary.</returns>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Empty"
        },
        {
          "NodeAttribute": {
            "Name": "IsEmpty",
            "ShowCategory": true,
            "Help": "Gets a value that indicates whether this instance of the immutable dictionary is empty.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty\">\r\n  <summary>Gets a value that indicates whether this instance of the immutable dictionary is empty.</summary>\r\n  <returns>true if this instance is empty; otherwise, false.</returns>\r\n</member>"
          },
          "DotNetName": "IsEmpty"
        },
        {
          "NodeAttribute": {
            "Name": "Item",
            "ShowCategory": true,
            "Help": "Gets the TValue associated with the specified key.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)\">\r\n  <summary>Gets the <paramref name=\"TValue\" /> associated with the specified key.</summary>\r\n  <returns>The value associated with the specified key. If no results are found, the operation throws an exception.</returns>\r\n  <param name=\"key\">The type of the key.</param>\r\n</member>"
          },
          "DotNetName": "Item"
        },
        {
          "NodeAttribute": {
            "Name": "Keys",
            "ShowCategory": true,
            "Help": "Gets the keys in the immutable dictionary.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableDictionary`2.Keys\">\r\n  <summary>Gets the keys in the immutable dictionary.</summary>\r\n  <returns>The keys in the immutable dictionary.</returns>\r\n</member>"
          },
          "DotNetName": "Keys"
        },
        {
          "NodeAttribute": {
            "Name": "Remove",
            "Help": "Removes the element with the specified key from the immutable dictionary.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)\">\r\n  <summary>Removes the element with the specified key from the immutable dictionary.</summary>\r\n  <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary. </returns>\r\n  <param name=\"key\">The key of the element to remove.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key of the element to remove.",
                "ImportedHelp": "<param name=\"key\">The key of the element to remove.</param>"
              },
              "DotNetName": "key"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.",
              "ImportedHelp": "<returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary. </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Remove"
        },
        {
          "NodeAttribute": {
            "Name": "RemoveRange",
            "Help": "Removes the elements with the specified keys from the immutable dictionary.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Removes the elements with the specified keys from the immutable dictionary.</summary>\r\n  <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>\r\n  <param name=\"keys\">The keys of the elements to remove.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<TKey>",
              "PinAttribute": {
                "Help": "The keys of the elements to remove.",
                "ImportedHelp": "<param name=\"keys\">The keys of the elements to remove.</param>"
              },
              "DotNetName": "keys"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.",
              "ImportedHelp": "<returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RemoveRange"
        },
        {
          "NodeAttribute": {
            "Name": "SetItem",
            "Help": "Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)\">\r\n  <summary>Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.</summary>\r\n  <returns>A new immutable dictionary that contains the specified key/value pair.</returns>\r\n  <param name=\"key\">The key of the entry to add.</param>\r\n  <param name=\"value\">The key value to set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key of the entry to add.",
                "ImportedHelp": "<param name=\"key\">The key of the entry to add.</param>"
              },
              "DotNetName": "key"
            },
            {
              "TypeFullName": "TValue",
              "PinAttribute": {
                "Help": "The key value to set.",
                "ImportedHelp": "<param name=\"value\">The key value to set.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "A new immutable dictionary that contains the specified key/value pair.",
              "ImportedHelp": "<returns>A new immutable dictionary that contains the specified key/value pair.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SetItem"
        },
        {
          "NodeAttribute": {
            "Name": "TryGetKey",
            "Help": "Determines whether this dictionary contains a specified key.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)\">\r\n  <summary>Determines whether this dictionary contains a specified key.</summary>\r\n  <returns>true if a match for <paramref name=\"equalKey\" /> is found; otherwise, false.</returns>\r\n  <param name=\"equalKey\">The key to search for.</param>\r\n  <param name=\"actualKey\">The matching key located in the dictionary if found, or <paramref name=\"equalkey\" /> if no match is found.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key to search for.",
                "ImportedHelp": "<param name=\"equalKey\">The key to search for.</param>"
              },
              "DotNetName": "equalKey"
            },
            {
              "TypeFullName": "out TKey",
              "PinAttribute": {
                "Help": "The matching key located in the dictionary if found, or equalkey if no match is found.",
                "ImportedHelp": "<param name=\"actualKey\">The matching key located in the dictionary if found, or <paramref name=\"equalkey\" /> if no match is found.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "actualKey"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if a match for Equal Key is found; otherwise, false.",
              "ImportedHelp": "<returns>true if a match for <paramref name=\"equalKey\" /> is found; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TryGetKey"
        },
        {
          "NodeAttribute": {
            "Name": "TryGetValue",
            "Help": "Gets the value associated with the specified key.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)\">\r\n  <summary>Gets the value associated with the specified key.</summary>\r\n  <returns>true if the object that implements the dictionary contains an element with the specified key; otherwise, false.</returns>\r\n  <param name=\"key\">The key whose value will be retrieved.</param>\r\n  <param name=\"value\">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name=\"value\" /> parameter. This parameter is passed uninitialized.</param>\r\n  <exception cref=\"T:System.ArgumentNullException\">\r\n    <paramref name=\"key\" /> is null.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key whose value will be retrieved.",
                "ImportedHelp": "<param name=\"key\">The key whose value will be retrieved.</param>"
              },
              "DotNetName": "key"
            },
            {
              "TypeFullName": "out TValue",
              "PinAttribute": {
                "Help": "When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the Value parameter. This parameter is passed uninitialized.",
                "ImportedHelp": "<param name=\"value\">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name=\"value\" /> parameter. This parameter is passed uninitialized.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the object that implements the dictionary contains an element with the specified key; otherwise, false.",
              "ImportedHelp": "<returns>true if the object that implements the dictionary contains an element with the specified key; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TryGetValue"
        },
        {
          "NodeAttribute": {
            "Name": "Values",
            "ShowCategory": true,
            "Help": "Gets the values in the immutable dictionary.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableDictionary`2.Values\">\r\n  <summary>Gets the values in the immutable dictionary.</summary>\r\n  <returns>The values in the immutable dictionary.</returns>\r\n</member>"
          },
          "DotNetName": "Values"
        }
      ],
      "DotNetName": "System.Collections.Immutable.ImmutableDictionary`2"
    },
    {
      "TypeAttribute": {
        "Name": "DictionaryExtensions",
        "Category": "Collections",
        "Help": "Provides a set of initialization methods for instances of the Dictionary class.",
        "ImportedHelp": "<member name=\"T:System.Collections.Immutable.ImmutableDictionary\">\r\n  <summary>Provides a set of initialization methods for instances of the <see cref=\"T:System.Collections.Immutable.ImmutableDictionary`2\" /> class.</summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "GetValueOrDefault",
            "Category": "Collections.Dictionary",
            "Help": "Gets the value for a given key if a matching key exists in the dictionary.TKey: The type of the key.\r\nTValue: The type of the value.\r\n",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)\">\r\n  <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>\r\n  <returns>The value for the key, or <paramref name=\"defaultValue\" /> if no matching key was found.</returns>\r\n  <param name=\"dictionary\">The dictionary to retrieve the value from.</param>\r\n  <param name=\"key\">The key to search for.</param>\r\n  <param name=\"defaultValue\">The default value to return if no matching key is found in the dictionary.</param>\r\n  <typeparam name=\"TKey\">The type of the key.</typeparam>\r\n  <typeparam name=\"TValue\">The type of the value.</typeparam>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Immutable.IImmutableDictionary<TKey, TValue>",
              "PinAttribute": {
                "Help": "The dictionary to retrieve the value from.",
                "ImportedHelp": "<param name=\"dictionary\">The dictionary to retrieve the value from.</param>"
              },
              "DotNetName": "dictionary"
            },
            {
              "TypeFullName": "TKey",
              "PinAttribute": {
                "Help": "The key to search for.",
                "ImportedHelp": "<param name=\"key\">The key to search for.</param>"
              },
              "DotNetName": "key"
            },
            {
              "TypeFullName": "TValue",
              "PinAttribute": {
                "Help": "The default value to return if no matching key is found in the dictionary.",
                "ImportedHelp": "<param name=\"defaultValue\">The default value to return if no matching key is found in the dictionary.</param>"
              },
              "DotNetName": "defaultValue"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "TValue",
            "PinAttribute": {
              "Help": "The value for the key, or Default Value if no matching key was found.",
              "ImportedHelp": "<returns>The value for the key, or <paramref name=\"defaultValue\" /> if no matching key was found.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetValueOrDefault"
        },
        {
          "NodeAttribute": {
            "Name": "ToDictionary",
            "Category": "",
            "Help": "Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.TSource: The type of element in the source collection.\r\nTKey: The type of key in the resulting immutable dictionary.\r\n",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\">\r\n  <summary>Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.</summary>\r\n  <returns>The immutable dictionary that contains elements from <paramref name=\"source\" />, with keys transformed by applying <paramref name=\"keySelector\" />.</returns>\r\n  <param name=\"source\">The source collection used to generate the immutable dictionary.</param>\r\n  <param name=\"keySelector\">The function used to transform keys for the immutable dictionary.</param>\r\n  <typeparam name=\"TSource\">The type of element in the source collection.</typeparam>\r\n  <typeparam name=\"TKey\">The type of key in the resulting immutable dictionary.</typeparam>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<TSource>",
              "PinAttribute": {
                "Help": "The source collection used to generate the immutable dictionary.",
                "ImportedHelp": "<param name=\"source\">The source collection used to generate the immutable dictionary.</param>"
              },
              "DotNetName": "source"
            },
            {
              "TypeFullName": "System.Func<TSource, TKey>",
              "PinAttribute": {
                "Help": "The function used to transform keys for the immutable dictionary.",
                "ImportedHelp": "<param name=\"keySelector\">The function used to transform keys for the immutable dictionary.</param>"
              },
              "DotNetName": "keySelector"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TSource>",
            "PinAttribute": {
              "Help": "The immutable dictionary that contains elements from Input, with keys transformed by applying Key Selector.",
              "ImportedHelp": "<returns>The immutable dictionary that contains elements from <paramref name=\"source\" />, with keys transformed by applying <paramref name=\"keySelector\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToImmutableDictionary"
        },
        {
          "NodeAttribute": {
            "Name": "ToDictionary",
            "Version": "Element Selector",
            "Category": "",
            "Help": "Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.TSource: The type of the elements in the sequence.\r\nTKey: The type of the keys in the resulting dictionary.\r\nTValue: The type of the values in the resulting dictionary.\r\n",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\">\r\n  <summary>Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.</summary>\r\n  <returns>An immutable dictionary that contains the items in the specified sequence.</returns>\r\n  <param name=\"source\">The sequence to enumerate to generate the dictionary.</param>\r\n  <param name=\"keySelector\">The function that will produce the key for the dictionary from each sequence element.</param>\r\n  <param name=\"elementSelector\">The function that will produce the value for the dictionary from each sequence element.</param>\r\n  <typeparam name=\"TSource\">The type of the elements in the sequence.</typeparam>\r\n  <typeparam name=\"TKey\">The type of the keys in the resulting dictionary.</typeparam>\r\n  <typeparam name=\"TValue\">The type of the values in the resulting dictionary.</typeparam>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<TSource>",
              "PinAttribute": {
                "Help": "The sequence to enumerate to generate the dictionary.",
                "ImportedHelp": "<param name=\"source\">The sequence to enumerate to generate the dictionary.</param>"
              },
              "DotNetName": "source"
            },
            {
              "TypeFullName": "System.Func<TSource, TKey>",
              "PinAttribute": {
                "Help": "The function that will produce the key for the dictionary from each sequence element.",
                "ImportedHelp": "<param name=\"keySelector\">The function that will produce the key for the dictionary from each sequence element.</param>"
              },
              "DotNetName": "keySelector"
            },
            {
              "TypeFullName": "System.Func<TSource, TValue>",
              "PinAttribute": {
                "Help": "The function that will produce the value for the dictionary from each sequence element.",
                "ImportedHelp": "<param name=\"elementSelector\">The function that will produce the value for the dictionary from each sequence element.</param>"
              },
              "DotNetName": "elementSelector"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableDictionary<TKey, TValue>",
            "PinAttribute": {
              "Help": "An immutable dictionary that contains the items in the specified sequence.",
              "ImportedHelp": "<returns>An immutable dictionary that contains the items in the specified sequence.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToImmutableDictionary"
        }
      ],
      "DotNetName": "System.Collections.Immutable.ImmutableDictionary"
    },
    {
      "TypeAttribute": {
        "Name": "HashSet",
        "Category": "Collections",
        "Help": "Represents an immutable, unordered hash set.T: The type of elements in the hash set.\r\n",
        "ImportedHelp": "<member name=\"T:System.Collections.Immutable.ImmutableHashSet`1\">\r\n  <summary>Represents an immutable, unordered hash set.</summary>\r\n  <typeparam name=\"T\">The type of elements in the hash set.</typeparam>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "Add",
            "Help": "Adds the specified element to the hash set.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)\">\r\n  <summary>Adds the specified element to the hash set.</summary>\r\n  <returns>true if the element is added to the hash set; false if the element already existed in the hash set.</returns>\r\n  <param name=\"item\">The element to add to the set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Help": "The element to add to the set.",
                "ImportedHelp": "<param name=\"item\">The element to add to the set.</param>"
              },
              "DotNetName": "item"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "true if the element is added to the hash set; false if the element already existed in the hash set.",
              "ImportedHelp": "<returns>true if the element is added to the hash set; false if the element already existed in the hash set.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "Clear",
            "Help": "Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Clear\">\r\n  <summary>Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.</summary>\r\n  <returns>An empty hash set that has the same sorting and ordering semantics as this instance.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "An empty hash set that has the same sorting and ordering semantics as this instance.",
              "ImportedHelp": "<returns>An empty hash set that has the same sorting and ordering semantics as this instance.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Clear"
        },
        {
          "NodeAttribute": {
            "Name": "Contains",
            "Help": "Determines whether this immutable hash set contains the specified element.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)\">\r\n  <summary>Determines whether this immutable hash set contains the specified element.</summary>\r\n  <returns>true if <paramref name=\"item\" /> is found in the <see cref=\"T:System.Collections.Immutable.ImmutableHashSet`1\" />; otherwise, false.</returns>\r\n  <param name=\"item\">The object to locate in the immutable hash set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Help": "The object to locate in the immutable hash set.",
                "ImportedHelp": "<param name=\"item\">The object to locate in the immutable hash set.</param>"
              },
              "DotNetName": "item"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if Item is found in the HashSet; otherwise, false.",
              "ImportedHelp": "<returns>true if <paramref name=\"item\" /> is found in the <see cref=\"T:System.Collections.Immutable.ImmutableHashSet`1\" />; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "Count",
            "Help": "Gets the number of elements in the immutable hash set.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableHashSet`1.Count\">\r\n  <summary>Gets the number of elements in the immutable hash set.</summary>\r\n  <returns>The number of elements in the hash set.</returns>\r\n</member>"
          },
          "DotNetName": "Count"
        },
        {
          "NodeAttribute": {
            "Name": "Empty",
            "Help": "Gets an immutable hash set for this type that uses the default T:System.Collections.Generic.IEqualityComparer`1.",
            "ImportedHelp": "<member name=\"F:System.Collections.Immutable.ImmutableHashSet`1.Empty\">\r\n  <summary>Gets an immutable hash set for this type that uses the default <see cref=\"T:System.Collections.Generic.IEqualityComparer`1\" />.</summary>\r\n  <returns>An empty immutable hash set.</returns>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Empty"
        },
        {
          "NodeAttribute": {
            "Name": "Except",
            "Help": "Removes the elements in the specified collection from the current immutable hash set.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Removes the elements in the specified collection from the current immutable hash set.</summary>\r\n  <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>\r\n  <param name=\"other\">The collection of items to remove from this set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection of items to remove from this set.",
                "ImportedHelp": "<param name=\"other\">The collection of items to remove from this set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "A new set with the items removed; or the original set if none of the items were in the set.",
              "ImportedHelp": "<returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Except"
        },
        {
          "NodeAttribute": {
            "Name": "Intersect",
            "Help": "Creates an immutable hash set that contains elements that exist in both this set and the specified set.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Creates an immutable hash set that contains elements that exist in both this set and the specified set.</summary>\r\n  <returns>A new immutable set that contains any elements that exist in both sets.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "A new immutable set that contains any elements that exist in both sets.",
              "ImportedHelp": "<returns>A new immutable set that contains any elements that exist in both sets.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Intersect"
        },
        {
          "NodeAttribute": {
            "Name": "IsEmpty",
            "Help": "Gets a value that indicates whether the current immutable hash set is empty.",
            "ImportedHelp": "<member name=\"P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty\">\r\n  <summary>Gets a value that indicates whether the current immutable hash set is empty.</summary>\r\n  <returns>true if this instance is empty; otherwise, false.</returns>\r\n</member>"
          },
          "DotNetName": "IsEmpty"
        },
        {
          "NodeAttribute": {
            "Name": "IsProperSubsetOf",
            "Help": "Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.</summary>\r\n  <returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the current set is a proper subset of the specified collection; otherwise, false.",
              "ImportedHelp": "<returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsProperSubsetOf"
        },
        {
          "NodeAttribute": {
            "Name": "IsProperSupersetOf",
            "Help": "Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.</summary>\r\n  <returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the current set is a proper superset of the specified collection; otherwise, false.",
              "ImportedHelp": "<returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsProperSupersetOf"
        },
        {
          "NodeAttribute": {
            "Name": "IsSubsetOf",
            "Help": "Determines whether the current immutable hash set is a subset of a specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set is a subset of a specified collection.</summary>\r\n  <returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the current set is a subset of the specified collection; otherwise, false.",
              "ImportedHelp": "<returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSubsetOf"
        },
        {
          "NodeAttribute": {
            "Name": "IsSupersetOf",
            "Help": "Determines whether the current immutable hash set is a superset of a specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set is a superset of a specified collection.</summary>\r\n  <returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the current set is a superset of the specified collection; otherwise, false.",
              "ImportedHelp": "<returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "IsSupersetOf"
        },
        {
          "NodeAttribute": {
            "Name": "Overlaps",
            "Help": "Determines whether the current immutable hash set overlaps with the specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set overlaps with the specified collection.</summary>\r\n  <returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the current set and the specified collection share at least one common element; otherwise, false.",
              "ImportedHelp": "<returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Overlaps"
        },
        {
          "NodeAttribute": {
            "Name": "Remove",
            "Help": "Removes the specified element from this immutable hash set.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)\">\r\n  <summary>Removes the specified element from this immutable hash set.</summary>\r\n  <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>\r\n  <param name=\"item\">The element to remove.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Help": "The element to remove.",
                "ImportedHelp": "<param name=\"item\">The element to remove.</param>"
              },
              "DotNetName": "item"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "A new set with the specified element removed, or the current set if the element cannot be found in the set.",
              "ImportedHelp": "<returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Remove"
        },
        {
          "NodeAttribute": {
            "Name": "SetEquals",
            "Help": "Determines whether the current immutable hash set and the specified collection contain the same elements.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Determines whether the current immutable hash set and the specified collection contain the same elements.</summary>\r\n  <returns>true if the sets are equal; otherwise, false.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "true if the sets are equal; otherwise, false.",
              "ImportedHelp": "<returns>true if the sets are equal; otherwise, false.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SetEquals"
        },
        {
          "NodeAttribute": {
            "Name": "SymmetricExcept",
            "Help": "Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.</summary>\r\n  <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>\r\n  <param name=\"other\">The collection to compare to the current set.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to compare to the current set.",
                "ImportedHelp": "<param name=\"other\">The collection to compare to the current set.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "A new set that contains the elements that are present only in the current set or in the specified collection, but not both.",
              "ImportedHelp": "<returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SymmetricExcept"
        },
        {
          "NodeAttribute": {
            "Name": "TryGetValue",
            "Help": "Searches the set for a given value and returns the equal value it finds, if any.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)\">\r\n  <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>\r\n  <returns>A value indicating whether the search was successful.</returns>\r\n  <param name=\"equalValue\">The value to search for.</param>\r\n  <param name=\"actualValue\">The value from the set that the search found, or the original value if the search yielded no match.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "T",
              "PinAttribute": {
                "Help": "The value to search for.",
                "ImportedHelp": "<param name=\"equalValue\">The value to search for.</param>"
              },
              "DotNetName": "equalValue"
            },
            {
              "TypeFullName": "out T",
              "PinAttribute": {
                "Help": "The value from the set that the search found, or the original value if the search yielded no match.",
                "ImportedHelp": "<param name=\"actualValue\">The value from the set that the search found, or the original value if the search yielded no match.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "actualValue"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Output",
              "Help": "A value indicating whether the search was successful.",
              "ImportedHelp": "<returns>A value indicating whether the search was successful.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "TryGetValue"
        },
        {
          "NodeAttribute": {
            "Name": "Union",
            "Help": "Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})\">\r\n  <summary>Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.</summary>\r\n  <returns>A new immutable hash set with the items added; or the original set if all the items were already in the set.</returns>\r\n  <param name=\"other\">The collection to add elements from.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<T>",
              "PinAttribute": {
                "Help": "The collection to add elements from.",
                "ImportedHelp": "<param name=\"other\">The collection to add elements from.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<T>",
            "PinAttribute": {
              "Help": "A new immutable hash set with the items added; or the original set if all the items were already in the set.",
              "ImportedHelp": "<returns>A new immutable hash set with the items added; or the original set if all the items were already in the set.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Union"
        }
      ],
      "DotNetName": "System.Collections.Immutable.ImmutableHashSet`1"
    },
    {
      "TypeAttribute": {
        "Name": "HashSetExtensions",
        "Category": "Collections",
        "Help": "Provides a set of initialization methods for instances of the HashSet class.",
        "ImportedHelp": "<member name=\"T:System.Collections.Immutable.ImmutableHashSet\">\r\n  <summary>Provides a set of initialization methods for instances of the <see cref=\"T:System.Collections.Immutable.ImmutableHashSet`1\" /> class.</summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "ToHashSet",
            "Help": "Enumerates a sequence and produces an immutable hash set of its contents.TSource: The type of the elements in the sequence.\r\n",
            "ImportedHelp": "<member name=\"M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})\">\r\n  <summary>Enumerates a sequence and produces an immutable hash set of its contents.</summary>\r\n  <returns>An immutable hash set that contains the items in the specified sequence.</returns>\r\n  <param name=\"source\">The sequence to enumerate.</param>\r\n  <typeparam name=\"TSource\">The type of the elements in the sequence.</typeparam>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Collections.Generic.IEnumerable<TSource>",
              "PinAttribute": {
                "Name": "Source",
                "Help": "The sequence to enumerate.",
                "ImportedHelp": "<param name=\"source\">The sequence to enumerate.</param>"
              },
              "DotNetName": "source"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Collections.Immutable.ImmutableHashSet<TSource>",
            "PinAttribute": {
              "Name": "Output",
              "Help": "An immutable hash set that contains the items in the specified sequence.",
              "ImportedHelp": "<returns>An immutable hash set that contains the items in the specified sequence.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToImmutableHashSet"
        }
      ],
      "DotNetName": "System.Collections.Immutable.ImmutableHashSet"
    }
  ],
  "DotNetName": "System.Collections.Immutable, Version=1.1.22.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
}