{
  "Version": 2,
  "Types": [
    {
      "TypeAttribute": {
        "Name": "AlignedBox",
        "Category": "3D",
        "Help": "Represents an axis-aligned bounding box in three dimensional space.",
        "ImportedHelp": "<member name=\"T:SharpDX.BoundingBox\">\r\n  <summary>\r\n            Represents an axis-aligned bounding box in three dimensional space.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.op_Inequality(SharpDX.BoundingBox,SharpDX.BoundingBox)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.op_Equality(SharpDX.BoundingBox,SharpDX.BoundingBox)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "AlignedBox",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the AlignedBox struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.#ctor(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.BoundingBox\" /> struct.\r\n            </summary>\r\n  <param name=\"minimum\">The minimum vertex of the bounding box.</param>\r\n  <param name=\"maximum\">The maximum vertex of the bounding box.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The minimum vertex of the bounding box.",
                "ImportedHelp": "<param name=\"minimum\">The minimum vertex of the bounding box.</param>"
              },
              "DotNetName": "minimum"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The maximum vertex of the bounding box.",
                "ImportedHelp": "<param name=\"maximum\">The maximum vertex of the bounding box.</param>"
              },
              "DotNetName": "maximum"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Corners",
            "Help": "Retrieves the eight corners of the bounding box.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.GetCorners\">\r\n  <summary>\r\n            Retrieves the eight corners of the bounding box.\r\n            </summary>\r\n  <returns>An array of points representing the eight corners of the bounding box.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3[]",
            "PinAttribute": {
              "Help": "An array of points representing the eight corners of the bounding box.",
              "ImportedHelp": "<returns>An array of points representing the eight corners of the bounding box.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetCorners"
        },
        {
          "NodeAttribute": {
            "Name": "FromPointCloud",
            "ShowCategory": true,
            "Help": "Constructs a AlignedBox that fully contains the given points.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.FromPoints(SharpDX.Vector3[],SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingBox\" /> that fully contains the given points.\r\n            </summary>\r\n  <param name=\"points\">The points that will be contained by the box.</param>\r\n  <param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>\r\n  <exception cref=\"T:System.ArgumentNullException\">Thrown when <paramref name=\"points\" /> is <c>null</c>.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3[]",
              "PinAttribute": {
                "Help": "The points that will be contained by the box.",
                "ImportedHelp": "<param name=\"points\">The points that will be contained by the box.</param>"
              },
              "DotNetName": "points"
            },
            {
              "TypeFullName": "out SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly constructed bounding box.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "FromPoints"
        },
        {
          "NodeAttribute": {
            "Name": "FromSphere",
            "ShowCategory": true,
            "Help": "Constructs a AlignedBox from a given sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.FromSphere(SharpDX.BoundingSphere@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingBox\" /> from a given sphere.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere that will designate the extents of the box.</param>\r\n  <param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere that will designate the extents of the box.",
                "ImportedHelp": "<param name=\"sphere\">The sphere that will designate the extents of the box.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "out SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly constructed bounding box.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "FromSphere"
        },
        {
          "NodeAttribute": {
            "Name": "Maximum",
            "ShowCategory": true,
            "Help": "The maximum point of the box.",
            "ImportedHelp": "<member name=\"F:SharpDX.BoundingBox.Maximum\">\r\n  <summary>\r\n            The maximum point of the box.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Maximum"
        },
        {
          "NodeAttribute": {
            "Name": "Merge",
            "ShowCategory": true,
            "Help": "Constructs a AlignedBox that is as large as the total combined area of the two specified boxes.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingBox.Merge(SharpDX.BoundingBox@,SharpDX.BoundingBox@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingBox\" /> that is as large as the total combined area of the two specified boxes.\r\n            </summary>\r\n  <param name=\"value1\">The first box to merge.</param>\r\n  <param name=\"value2\">The second box to merge.</param>\r\n  <param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first box to merge.",
                "ImportedHelp": "<param name=\"value1\">The first box to merge.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second box to merge.",
                "ImportedHelp": "<param name=\"value2\">The second box to merge.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "out SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly constructed bounding box.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly constructed bounding box.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Merge"
        },
        {
          "NodeAttribute": {
            "Name": "Minimum",
            "ShowCategory": true,
            "Help": "The minimum point of the box.",
            "ImportedHelp": "<member name=\"F:SharpDX.BoundingBox.Minimum\">\r\n  <summary>\r\n            The minimum point of the box.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Minimum"
        }
      ],
      "DotNetName": "SharpDX.BoundingBox"
    },
    {
      "TypeAttribute": {
        "Name": "Box",
        "Category": "3D",
        "Help": "OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.",
        "ImportedHelp": "<member name=\"T:SharpDX.OrientedBoundingBox\">\r\n  <summary>\r\n            OrientedBoundingBox (OBB) is a rectangular block, much like an AABB (BoundingBox) but with an arbitrary orientation.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.op_Inequality(SharpDX.OrientedBoundingBox,SharpDX.OrientedBoundingBox)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.op_Equality(SharpDX.OrientedBoundingBox,SharpDX.OrientedBoundingBox)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsBox",
            "Category": "3D.Collision",
            "Help": "Check the intersection between two Box\r\nRemarks: For accuracy, The transformation matrix for both Box must not have any scaling applied to it.\n            Anyway, scaling using Scale method will keep this method accurate.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Contains(SharpDX.OrientedBoundingBox@)\">\r\n  <summary>\r\n            Check the intersection between two <see cref=\"T:SharpDX.OrientedBoundingBox\" /></summary>\r\n  <param name=\"obb\">The OrientedBoundingBoxs to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n  <remarks>\r\n            For accuracy, The transformation matrix for both <see cref=\"T:SharpDX.OrientedBoundingBox\" /> must not have any scaling applied to it.\r\n            Anyway, scaling using Scale method will keep this method accurate.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The OrientedBoundingBoxs to test.",
                "ImportedHelp": "<param name=\"obb\">The OrientedBoundingBoxs to test.</param>"
              },
              "DotNetName": "obb"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsBox",
            "Version": "Aligned",
            "Category": "3D.Collision",
            "Help": "Check the intersection between an Box and AlignedBox\r\nRemarks: For accuracy, The transformation matrix for the Box must not have any scaling applied to it.\n            Anyway, scaling using Scale method will keep this method accurate.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Contains(SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Check the intersection between an <see cref=\"T:SharpDX.OrientedBoundingBox\" /> and <see cref=\"T:SharpDX.BoundingBox\" /></summary>\r\n  <param name=\"box\">The BoundingBox to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n  <remarks>\r\n            For accuracy, The transformation matrix for the <see cref=\"T:SharpDX.OrientedBoundingBox\" /> must not have any scaling applied to it.\r\n            Anyway, scaling using Scale method will keep this method accurate.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The BoundingBox to test.",
                "ImportedHelp": "<param name=\"box\">The BoundingBox to test.</param>"
              },
              "DotNetName": "box"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsLineSegment",
            "Category": "3D.Collision",
            "Help": "Check the intersection between an Box and a line defined by two points\r\nRemarks: For accuracy, The transformation matrix for the Box must not have any scaling applied to it.\n            Anyway, scaling using Scale method will keep this method accurate.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.ContainsLine(SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Check the intersection between an <see cref=\"T:SharpDX.OrientedBoundingBox\" /> and a line defined by two points\r\n            </summary>\r\n  <param name=\"L1\">The first point in the line.</param>\r\n  <param name=\"L2\">The second point in the line.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n  <remarks>\r\n            For accuracy, The transformation matrix for the <see cref=\"T:SharpDX.OrientedBoundingBox\" /> must not have any scaling applied to it.\r\n            Anyway, scaling using Scale method will keep this method accurate.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The first point in the line.",
                "ImportedHelp": "<param name=\"L1\">The first point in the line.</param>"
              },
              "DotNetName": "L1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The second point in the line.",
                "ImportedHelp": "<param name=\"L2\">The second point in the line.</param>"
              },
              "DotNetName": "L2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ContainsLine"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsPoint",
            "Category": "3D.Collision",
            "Help": "Determines whether a Box contains a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Contains(SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.OrientedBoundingBox\" /> contains a point. \r\n            </summary>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsPoints",
            "Category": "3D.Collision",
            "Help": "Determines whether a Box contains an array of points>.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Contains(SharpDX.Vector3[])\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.OrientedBoundingBox\" /> contains an array of points&gt;.\r\n            </summary>\r\n  <param name=\"points\">The points array to test.</param>\r\n  <returns>The type of containment.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3[]",
              "PinAttribute": {
                "Help": "The points array to test.",
                "ImportedHelp": "<param name=\"points\">The points array to test.</param>"
              },
              "DotNetName": "points"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment.",
              "ImportedHelp": "<returns>The type of containment.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether a Box contains a Sphere.\r\nRemarks: This method is not designed for Box which has a non-uniform scaling applied to its transformation matrix.\n            But any type of scaling applied using Scale method will keep this method accurate.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Contains(SharpDX.BoundingSphere,System.Boolean)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.OrientedBoundingBox\" /> contains a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"IgnoreScale\">Optimize the check operation by assuming that <see cref=\"T:SharpDX.OrientedBoundingBox\" /> has no scaling applied</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n  <remarks>\r\n            This method is not designed for <see cref=\"T:SharpDX.OrientedBoundingBox\" /> which has a non-uniform scaling applied to its transformation matrix.\r\n            But any type of scaling applied using Scale method will keep this method accurate.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "System.Boolean",
              "PinAttribute": {
                "Help": "Optimize the check operation by assuming that Box has no scaling applied",
                "ImportedHelp": "<param name=\"IgnoreScale\">Optimize the check operation by assuming that <see cref=\"T:SharpDX.OrientedBoundingBox\" /> has no scaling applied</param>"
              },
              "DotNetName": "IgnoreScale"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "Box",
            "Version": "Join AlignedBox",
            "ShowCategory": false,
            "Help": "Creates an Box from a BoundingBox.\r\nRemarks: Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.#ctor(SharpDX.BoundingBox)\">\r\n  <summary>\r\n            Creates an <see cref=\"T:SharpDX.OrientedBoundingBox\" /> from a BoundingBox.\r\n            </summary>\r\n  <param name=\"bb\">The BoundingBox to create from.</param>\r\n  <remarks>\r\n            Initially, the OBB is axis-aligned box, but it can be rotated and transformed later.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The BoundingBox to create from.",
                "ImportedHelp": "<param name=\"bb\">The BoundingBox to create from.</param>"
              },
              "DotNetName": "bb"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Box",
            "Version": "Join Min Max",
            "ShowCategory": false,
            "Help": "Creates an Box which contained between two minimum and maximum points.\r\nRemarks: Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.#ctor(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Creates an <see cref=\"T:SharpDX.OrientedBoundingBox\" /> which contained between two minimum and maximum points.\r\n            </summary>\r\n  <param name=\"minimum\">The minimum vertex of the bounding box.</param>\r\n  <param name=\"maximum\">The maximum vertex of the bounding box.</param>\r\n  <remarks>\r\n            Initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The minimum vertex of the bounding box.",
                "ImportedHelp": "<param name=\"minimum\">The minimum vertex of the bounding box.</param>"
              },
              "DotNetName": "minimum"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The maximum vertex of the bounding box.",
                "ImportedHelp": "<param name=\"maximum\">The maximum vertex of the bounding box.</param>"
              },
              "DotNetName": "maximum"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "BoxToBoxMatrix",
            "Help": "Calculates the matrix required to transfer any point from one Box local coordinates to another.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.GetBoxToBoxMatrix(SharpDX.OrientedBoundingBox@,SharpDX.OrientedBoundingBox@,System.Boolean)\">\r\n  <summary>\r\n            Calculates the matrix required to transfer any point from one <see cref=\"T:SharpDX.OrientedBoundingBox\" /> local coordinates to another.\r\n            </summary>\r\n  <param name=\"A\">The source OrientedBoundingBox.</param>\r\n  <param name=\"B\">The target OrientedBoundingBox.</param>\r\n  <param name=\"NoMatrixScaleApplied\">\r\n            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.\r\n            </param>\r\n  <returns></returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The source OrientedBoundingBox.",
                "ImportedHelp": "<param name=\"A\">The source OrientedBoundingBox.</param>"
              },
              "DotNetName": "A"
            },
            {
              "TypeFullName": "ref SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The target OrientedBoundingBox.",
                "ImportedHelp": "<param name=\"B\">The target OrientedBoundingBox.</param>"
              },
              "DotNetName": "B"
            },
            {
              "TypeFullName": "System.Boolean",
              "PinAttribute": {
                "Name": "No Scaling",
                "Help": "If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.",
                "ImportedHelp": "<param name=\"NoMatrixScaleApplied\">\r\n            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.\r\n            </param>"
              },
              "DotNetName": "NoMatrixScaleApplied"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Matrix",
            "PinAttribute": {
              "ImportedHelp": "<returns></returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetBoxToBoxMatrix"
        },
        {
          "NodeAttribute": {
            "Name": "Center",
            "ShowCategory": true,
            "Help": "Returns the center of the Box.",
            "ImportedHelp": "<member name=\"P:SharpDX.OrientedBoundingBox.Center\">\r\n  <summary>\r\n            Returns the center of the <see cref=\"T:SharpDX.OrientedBoundingBox\" />.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Center"
        },
        {
          "NodeAttribute": {
            "Name": "Corners",
            "Help": "Retrieves the eight corners of the bounding box.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.GetCorners\">\r\n  <summary>\r\n            Retrieves the eight corners of the bounding box.\r\n            </summary>\r\n  <returns>An array of points representing the eight corners of the bounding box.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3[]",
            "PinAttribute": {
              "Help": "An array of points representing the eight corners of the bounding box.",
              "ImportedHelp": "<returns>An array of points representing the eight corners of the bounding box.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetCorners"
        },
        {
          "NodeAttribute": {
            "Name": "FromPointCloud",
            "Help": "Creates an Box that fully contains the given points.\r\nRemarks: This method is not for computing the best tight-fitting OrientedBoundingBox.\n            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.#ctor(SharpDX.Vector3[])\">\r\n  <summary>\r\n            Creates an <see cref=\"T:SharpDX.OrientedBoundingBox\" /> that fully contains the given points.\r\n            </summary>\r\n  <param name=\"points\">The points that will be contained by the box.</param>\r\n  <remarks>\r\n            This method is not for computing the best tight-fitting OrientedBoundingBox.\r\n            And initially, the OrientedBoundingBox is axis-aligned box, but it can be rotated and transformed later.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3[]",
              "PinAttribute": {
                "Help": "The points that will be contained by the box.",
                "ImportedHelp": "<param name=\"points\">The points that will be contained by the box.</param>"
              },
              "DotNetName": "points"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "GetSize",
            "Help": "Returns the size of the Box taking into consideration the scaling applied to the transformation matrix.\r\nRemarks: This method is computationally expensive, so if no scale is applied to the transformation matrix\n            use Size property instead.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.GetSize\">\r\n  <summary>\r\n            Returns the size of the <see cref=\"T:SharpDX.OrientedBoundingBox\" /> taking into consideration the scaling applied to the transformation matrix.\r\n            </summary>\r\n  <returns>The size of the consideration</returns>\r\n  <remarks>\r\n            This method is computationally expensive, so if no scale is applied to the transformation matrix\r\n            use <see cref=\"P:SharpDX.OrientedBoundingBox.Size\" /> property instead.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3",
            "PinAttribute": {
              "Help": "The size of the consideration",
              "ImportedHelp": "<returns>The size of the consideration</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetSize"
        },
        {
          "NodeAttribute": {
            "Name": "GetSizeSquared",
            "Help": "Returns the square size of the Box taking into consideration the scaling applied to the transformation matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.GetSizeSquared\">\r\n  <summary>\r\n            Returns the square size of the <see cref=\"T:SharpDX.OrientedBoundingBox\" /> taking into consideration the scaling applied to the transformation matrix.\r\n            </summary>\r\n  <returns>The size of the consideration</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3",
            "PinAttribute": {
              "Help": "The size of the consideration",
              "ImportedHelp": "<returns>The size of the consideration</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetSizeSquared"
        },
        {
          "NodeAttribute": {
            "Name": "Merge",
            "ShowCategory": true,
            "Help": "Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.\r\nRemarks: Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Merge(SharpDX.OrientedBoundingBox@,SharpDX.OrientedBoundingBox@,System.Boolean)\">\r\n  <summary>\r\n            Merge an OrientedBoundingBox B into another OrientedBoundingBox A, by expanding A to contain B and keeping A orientation.\r\n            </summary>\r\n  <param name=\"A\">The <see cref=\"T:SharpDX.OrientedBoundingBox\" /> to merge into it.</param>\r\n  <param name=\"B\">The <see cref=\"T:SharpDX.OrientedBoundingBox\" /> to be merged</param>\r\n  <param name=\"NoMatrixScaleApplied\">\r\n            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.\r\n            </param>\r\n  <remarks>\r\n            Unlike merging axis aligned boxes, The operation is not interchangeable, because it keeps A orientation and merge B into it.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The Box to merge into it.",
                "ImportedHelp": "<param name=\"A\">The <see cref=\"T:SharpDX.OrientedBoundingBox\" /> to merge into it.</param>"
              },
              "DotNetName": "A"
            },
            {
              "TypeFullName": "ref SharpDX.OrientedBoundingBox",
              "PinAttribute": {
                "Help": "The Box to be merged",
                "ImportedHelp": "<param name=\"B\">The <see cref=\"T:SharpDX.OrientedBoundingBox\" /> to be merged</param>"
              },
              "DotNetName": "B"
            },
            {
              "TypeFullName": "System.Boolean",
              "PinAttribute": {
                "Name": "NoScaling",
                "Help": "If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.",
                "ImportedHelp": "<param name=\"NoMatrixScaleApplied\">\r\n            If true, the method will use a fast algorithm which is inapplicable if a scale is applied to the transformation matrix of the OrientedBoundingBox.\r\n            </param>"
              },
              "DotNetName": "NoMatrixScaleApplied"
            }
          ],
          "DotNetName": "Merge"
        },
        {
          "NodeAttribute": {
            "Name": "Radii",
            "ShowCategory": true,
            "Help": "Half lengths of the box along each axis.",
            "ImportedHelp": "<member name=\"F:SharpDX.OrientedBoundingBox.Extents\">\r\n  <summary>\r\n            Half lengths of the box along each axis.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Extents"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsBox",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Box.",
            "ImportedHelp": "<member name=\"M:SharpDX.OrientedBoundingBox.Intersects(SharpDX.Ray@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.OrientedBoundingBox\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the point of intersection,\n            or Zero if there was no intersection.",
                "ImportedHelp": "<param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Intersects"
        },
        {
          "NodeAttribute": {
            "Name": "Size",
            "ShowCategory": true,
            "Help": "The size of the Box if no scaling is applied to the transformation matrix.\r\nRemarks: The property will return the actual size even if the scaling is applied using Scale method, \n            but if the scaling is applied to transformation matrix, use GetSize Function instead.",
            "ImportedHelp": "<member name=\"P:SharpDX.OrientedBoundingBox.Size\">\r\n  <summary>\r\n            The size of the <see cref=\"T:SharpDX.OrientedBoundingBox\" /> if no scaling is applied to the transformation matrix.\r\n            </summary>\r\n  <remarks>\r\n            The property will return the actual size even if the scaling is applied using Scale method, \r\n            but if the scaling is applied to transformation matrix, use GetSize Function instead.\r\n            </remarks>\r\n</member>"
          },
          "DotNetName": "Size"
        },
        {
          "NodeAttribute": {
            "Name": "Transformation",
            "ShowCategory": true,
            "Help": "The matrix which aligns and scales the box, and its translation vector represents the center of the box.",
            "ImportedHelp": "<member name=\"F:SharpDX.OrientedBoundingBox.Transformation\">\r\n  <summary>\r\n            The matrix which aligns and scales the box, and its translation vector represents the center of the box.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Transformation"
        }
      ],
      "DotNetName": "SharpDX.OrientedBoundingBox"
    },
    {
      "TypeAttribute": {
        "Name": "Collision",
        "Category": "3D",
        "Help": "Contains static methods to help in determining intersections, containment, etc.",
        "ImportedHelp": "<member name=\"T:SharpDX.Collision\">\r\n  <summary>\r\n            Contains static methods to help in determining intersections, containment, etc.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "BoxContainsBox",
            "Version": "BothAligned",
            "Category": "3D.Collision",
            "Help": "Determines whether a AlignedBox contains a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.BoxContainsBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingBox\" /> contains a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"box1\">The first box to test.</param>\r\n  <param name=\"box2\">The second box to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first box to test.",
                "ImportedHelp": "<param name=\"box1\">The first box to test.</param>"
              },
              "DotNetName": "box1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second box to test.",
                "ImportedHelp": "<param name=\"box2\">The second box to test.</param>"
              },
              "DotNetName": "box2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "BoxContainsBox"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsPoint",
            "Version": "Aligned",
            "Category": "3D.Collision",
            "Help": "Determines whether a AlignedBox contains a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.BoxContainsPoint(SharpDX.BoundingBox@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingBox\" /> contains a point.\r\n            </summary>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "BoxContainsPoint"
        },
        {
          "NodeAttribute": {
            "Name": "BoxContainsSphere",
            "Version": "Aligned",
            "Category": "3D.Collision",
            "Help": "Determines whether a AlignedBox contains a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.BoxContainsSphere(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingBox\" /> contains a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "BoxContainsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "BoxIntersectsBox",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a AlignedBox and a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.BoxIntersectsBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.BoundingBox\" /> and a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"box1\">The first box to test.</param>\r\n  <param name=\"box2\">The second box to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first box to test.",
                "ImportedHelp": "<param name=\"box1\">The first box to test.</param>"
              },
              "DotNetName": "box1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second box to test.",
                "ImportedHelp": "<param name=\"box2\">The second box to test.</param>"
              },
              "DotNetName": "box2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "BoxIntersectsBox"
        },
        {
          "NodeAttribute": {
            "Name": "BoxIntersectsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a AlignedBox and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.BoxIntersectsSphere(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.BoundingBox\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "BoxIntersectsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "ClosestPointBoxPoint",
            "Category": "3D.Collision",
            "Help": "Determines the closest point between a AlignedBox and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.ClosestPointBoxPoint(SharpDX.BoundingBox@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the closest point between a <see cref=\"T:SharpDX.BoundingBox\" /> and a point.\r\n            </summary>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <param name=\"result\">When the method completes, contains the closest point between the two objects.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the closest point between the two objects.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the closest point between the two objects.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "ClosestPointBoxPoint"
        },
        {
          "NodeAttribute": {
            "Name": "ClosestPointPlanePoint",
            "Category": "3D.Collision",
            "Help": "Determines the closest point between a Plane and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.ClosestPointPlanePoint(SharpDX.Plane@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the closest point between a <see cref=\"T:SharpDX.Plane\" /> and a point.\r\n            </summary>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <param name=\"result\">When the method completes, contains the closest point between the two objects.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the closest point between the two objects.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the closest point between the two objects.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "ClosestPointPlanePoint"
        },
        {
          "NodeAttribute": {
            "Name": "ClosestPointSpherePoint",
            "Category": "3D.Collision",
            "Help": "Determines the closest point between a Sphere and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.ClosestPointSpherePoint(SharpDX.BoundingSphere@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the closest point between a <see cref=\"T:SharpDX.BoundingSphere\" /> and a point.\r\n            </summary>\r\n  <param name=\"sphere\"></param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <param name=\"result\">When the method completes, contains the closest point between the two objects;\r\n            or, if the point is directly in the center of the sphere, contains <see cref=\"F:SharpDX.Vector3.Zero\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "ImportedHelp": "<param name=\"sphere\"></param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the closest point between the two objects;\n            or, if the point is directly in the center of the sphere, contains Zero.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the closest point between the two objects;\r\n            or, if the point is directly in the center of the sphere, contains <see cref=\"F:SharpDX.Vector3.Zero\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "ClosestPointSpherePoint"
        },
        {
          "NodeAttribute": {
            "Name": "ClosestPointSphereSphere",
            "Category": "3D.Collision",
            "Help": "Determines the closest point between a Sphere and a Sphere.\r\nRemarks: If the two spheres are overlapping, but not directly on top of each other, the closest point\n            is the 'closest' point of intersection. This can also be considered is the deepest point of\n            intersection.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.ClosestPointSphereSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the closest point between a <see cref=\"T:SharpDX.BoundingSphere\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"sphere1\">The first sphere to test.</param>\r\n  <param name=\"sphere2\">The second sphere to test.</param>\r\n  <param name=\"result\">When the method completes, contains the closest point between the two objects;\r\n            or, if the point is directly in the center of the sphere, contains <see cref=\"F:SharpDX.Vector3.Zero\" />.</param>\r\n  <remarks>\r\n            If the two spheres are overlapping, but not directly on top of each other, the closest point\r\n            is the 'closest' point of intersection. This can also be considered is the deepest point of\r\n            intersection.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first sphere to test.",
                "ImportedHelp": "<param name=\"sphere1\">The first sphere to test.</param>"
              },
              "DotNetName": "sphere1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second sphere to test.",
                "ImportedHelp": "<param name=\"sphere2\">The second sphere to test.</param>"
              },
              "DotNetName": "sphere2"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the closest point between the two objects;\n            or, if the point is directly in the center of the sphere, contains Zero.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the closest point between the two objects;\r\n            or, if the point is directly in the center of the sphere, contains <see cref=\"F:SharpDX.Vector3.Zero\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "ClosestPointSphereSphere"
        },
        {
          "NodeAttribute": {
            "Name": "DistanceBoxBox",
            "Category": "3D.Collision",
            "Help": "Determines the distance between a AlignedBox and a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.DistanceBoxBox(SharpDX.BoundingBox@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Determines the distance between a <see cref=\"T:SharpDX.BoundingBox\" /> and a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"box1\">The first box to test.</param>\r\n  <param name=\"box2\">The second box to test.</param>\r\n  <returns>The distance between the two objects.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The first box to test.",
                "ImportedHelp": "<param name=\"box1\">The first box to test.</param>"
              },
              "DotNetName": "box1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The second box to test.",
                "ImportedHelp": "<param name=\"box2\">The second box to test.</param>"
              },
              "DotNetName": "box2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The distance between the two objects.",
              "ImportedHelp": "<returns>The distance between the two objects.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DistanceBoxBox"
        },
        {
          "NodeAttribute": {
            "Name": "DistanceBoxPoint",
            "Category": "3D.Collision",
            "Help": "Determines the distance between a AlignedBox and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.DistanceBoxPoint(SharpDX.BoundingBox@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the distance between a <see cref=\"T:SharpDX.BoundingBox\" /> and a point.\r\n            </summary>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The distance between the two objects.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The distance between the two objects.",
              "ImportedHelp": "<returns>The distance between the two objects.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DistanceBoxPoint"
        },
        {
          "NodeAttribute": {
            "Name": "DistancePlanePoint",
            "Category": "3D.Collision",
            "Help": "Determines the distance between a Plane and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.DistancePlanePoint(SharpDX.Plane@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the distance between a <see cref=\"T:SharpDX.Plane\" /> and a point.\r\n            </summary>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The distance between the two objects.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The distance between the two objects.",
              "ImportedHelp": "<returns>The distance between the two objects.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DistancePlanePoint"
        },
        {
          "NodeAttribute": {
            "Name": "DistanceSpherePoint",
            "Category": "3D.Collision",
            "Help": "Determines the distance between a Sphere and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.DistanceSpherePoint(SharpDX.BoundingSphere@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines the distance between a <see cref=\"T:SharpDX.BoundingSphere\" /> and a point.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The distance between the two objects.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The distance between the two objects.",
              "ImportedHelp": "<returns>The distance between the two objects.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DistanceSpherePoint"
        },
        {
          "NodeAttribute": {
            "Name": "DistanceSphereSphere",
            "Category": "3D.Collision",
            "Help": "Determines the distance between a Sphere and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.DistanceSphereSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines the distance between a <see cref=\"T:SharpDX.BoundingSphere\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"sphere1\">The first sphere to test.</param>\r\n  <param name=\"sphere2\">The second sphere to test.</param>\r\n  <returns>The distance between the two objects.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first sphere to test.",
                "ImportedHelp": "<param name=\"sphere1\">The first sphere to test.</param>"
              },
              "DotNetName": "sphere1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second sphere to test.",
                "ImportedHelp": "<param name=\"sphere2\">The second sphere to test.</param>"
              },
              "DotNetName": "sphere2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The distance between the two objects.",
              "ImportedHelp": "<returns>The distance between the two objects.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "DistanceSphereSphere"
        },
        {
          "NodeAttribute": {
            "Name": "PlaneIntersectsBox",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Plane and a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.PlaneIntersectsBox(SharpDX.Plane@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Plane\" /> and a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"box\">The box to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.PlaneIntersectionType",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PlaneIntersectsBox"
        },
        {
          "NodeAttribute": {
            "Name": "PlaneIntersectsPlane",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Plane and a Plane.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.PlaneIntersectsPlane(SharpDX.Plane@,SharpDX.Plane@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Plane\" /> and a <see cref=\"T:SharpDX.Plane\" />.\r\n            </summary>\r\n  <param name=\"plane1\">The first plane to test.</param>\r\n  <param name=\"plane2\">The second plane to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The first plane to test.",
                "ImportedHelp": "<param name=\"plane1\">The first plane to test.</param>"
              },
              "DotNetName": "plane1"
            },
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The second plane to test.",
                "ImportedHelp": "<param name=\"plane2\">The second plane to test.</param>"
              },
              "DotNetName": "plane2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PlaneIntersectsPlane"
        },
        {
          "NodeAttribute": {
            "Name": "PlaneIntersectsPlane",
            "Version": "IntersectionLine",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Plane and a Plane.\r\nRemarks: Although a ray is set to have an origin, the ray returned by this method is really\n            a line in three dimensions which has no real origin. The ray is considered valid when\n            both the positive direction is used and when the negative direction is used.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.PlaneIntersectsPlane(SharpDX.Plane@,SharpDX.Plane@,SharpDX.Ray@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Plane\" /> and a <see cref=\"T:SharpDX.Plane\" />.\r\n            </summary>\r\n  <param name=\"plane1\">The first plane to test.</param>\r\n  <param name=\"plane2\">The second plane to test.</param>\r\n  <param name=\"line\">When the method completes, contains the line of intersection\r\n            as a <see cref=\"T:SharpDX.Ray\" />, or a zero ray if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n  <remarks>\r\n            Although a ray is set to have an origin, the ray returned by this method is really\r\n            a line in three dimensions which has no real origin. The ray is considered valid when\r\n            both the positive direction is used and when the negative direction is used.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The first plane to test.",
                "ImportedHelp": "<param name=\"plane1\">The first plane to test.</param>"
              },
              "DotNetName": "plane1"
            },
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The second plane to test.",
                "ImportedHelp": "<param name=\"plane2\">The second plane to test.</param>"
              },
              "DotNetName": "plane2"
            },
            {
              "TypeFullName": "out SharpDX.Ray",
              "PinAttribute": {
                "Help": "When the method completes, contains the line of intersection\n            as a Ray, or a zero ray if there was no intersection.",
                "ImportedHelp": "<param name=\"line\">When the method completes, contains the line of intersection\r\n            as a <see cref=\"T:SharpDX.Ray\" />, or a zero ray if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "line"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PlaneIntersectsPlane"
        },
        {
          "NodeAttribute": {
            "Name": "PlaneIntersectsPoint",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Plane and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.PlaneIntersectsPoint(SharpDX.Plane@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Plane\" /> and a point.\r\n            </summary>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.PlaneIntersectionType",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PlaneIntersectsPoint"
        },
        {
          "NodeAttribute": {
            "Name": "PlaneIntersectsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Plane and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.PlaneIntersectsSphere(SharpDX.Plane@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Plane\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.PlaneIntersectionType",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "PlaneIntersectsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsBox",
            "Version": "Aligned",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Plane.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsBox(SharpDX.Ray@,SharpDX.BoundingBox@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.Plane\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the point of intersection,\n            or Zero if there was no intersection.",
                "ImportedHelp": "<param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsBox"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsBox",
            "Version": "Aligned Distance",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsBox(SharpDX.Ray@,SharpDX.BoundingBox@,System.Single@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"box\">The box to test.</param>\r\n  <param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the distance of the intersection,\n            or 0 if there was no intersection.",
                "ImportedHelp": "<param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "distance"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsBox"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsPlane",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Plane.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsPlane(SharpDX.Ray@,SharpDX.Plane@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.Plane\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"plane\">The plane to test</param>\r\n  <param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test",
                "ImportedHelp": "<param name=\"plane\">The plane to test</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the point of intersection,\n            or Zero if there was no intersection.",
                "ImportedHelp": "<param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsPlane"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsPlane",
            "Version": "Distance",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Plane.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsPlane(SharpDX.Ray@,SharpDX.Plane@,System.Single@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.Plane\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"plane\">The plane to test.</param>\r\n  <param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>\r\n  <returns>Whether the two objects intersect.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane to test.",
                "ImportedHelp": "<param name=\"plane\">The plane to test.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the distance of the intersection,\n            or 0 if there was no intersection.",
                "ImportedHelp": "<param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "distance"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersect.",
              "ImportedHelp": "<returns>Whether the two objects intersect.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsPlane"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsPoint",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsPoint(SharpDX.Ray@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a point.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>Whether the two objects intersect.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersect.",
              "ImportedHelp": "<returns>Whether the two objects intersect.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsPoint"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsRay",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Ray.\r\nRemarks: This method performs a ray vs ray intersection test based on the following formula\n            from Goldman.\n            \r\nCode: \r\ns = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2\r\n\r\nCode: \r\nt = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2\r\n\n            Where o_1 is the position of the first ray, o_2 is the position of the second ray,\n            d_1 is the normalized direction of the first ray, d_2 is the normalized direction\n            of the second ray, det denotes the determinant of a matrix, x denotes the cross\n            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsRay(SharpDX.Ray@,SharpDX.Ray@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.Ray\" />.\r\n            </summary>\r\n  <param name=\"ray1\">The first ray to test.</param>\r\n  <param name=\"ray2\">The second ray to test.</param>\r\n  <param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>\r\n  <returns>Whether the two objects intersect.</returns>\r\n  <remarks>\r\n            This method performs a ray vs ray intersection test based on the following formula\r\n            from Goldman.\r\n            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code><code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>\r\n            Where o_1 is the position of the first ray, o_2 is the position of the second ray,\r\n            d_1 is the normalized direction of the first ray, d_2 is the normalized direction\r\n            of the second ray, det denotes the determinant of a matrix, x denotes the cross\r\n            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The first ray to test.",
                "ImportedHelp": "<param name=\"ray1\">The first ray to test.</param>"
              },
              "DotNetName": "ray1"
            },
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The second ray to test.",
                "ImportedHelp": "<param name=\"ray2\">The second ray to test.</param>"
              },
              "DotNetName": "ray2"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the point of intersection,\n            or Zero if there was no intersection.",
                "ImportedHelp": "<param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersect.",
              "ImportedHelp": "<returns>Whether the two objects intersect.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsRay"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsSphere(SharpDX.Ray@,SharpDX.BoundingSphere@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />. \r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the point of intersection,\n            or Zero if there was no intersection.",
                "ImportedHelp": "<param name=\"point\">When the method completes, contains the point of intersection,\r\n            or <see cref=\"F:SharpDX.Vector3.Zero\" /> if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "RayIntersectsSphere",
            "Version": "Distance",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Ray and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.RayIntersectsSphere(SharpDX.Ray@,SharpDX.BoundingSphere@,System.Single@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.Ray\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"ray\">The ray to test.</param>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray to test.",
                "ImportedHelp": "<param name=\"ray\">The ray to test.</param>"
              },
              "DotNetName": "ray"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the distance of the intersection,\n            or 0 if there was no intersection.",
                "ImportedHelp": "<param name=\"distance\">When the method completes, contains the distance of the intersection,\r\n            or 0 if there was no intersection.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "distance"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "RayIntersectsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "SphereContainsBox",
            "Category": "3D.Collision",
            "Help": "Determines whether a Sphere contains a AlignedBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.SphereContainsBox(SharpDX.BoundingSphere@,SharpDX.BoundingBox@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingSphere\" /> contains a <see cref=\"T:SharpDX.BoundingBox\" />.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"box\">The box to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box to test.",
                "ImportedHelp": "<param name=\"box\">The box to test.</param>"
              },
              "DotNetName": "box"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SphereContainsBox"
        },
        {
          "NodeAttribute": {
            "Name": "SphereContainsPoint",
            "Category": "3D.Collision",
            "Help": "Determines whether a Sphere contains a point.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.SphereContainsPoint(SharpDX.BoundingSphere@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingSphere\" /> contains a point.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere to test.</param>\r\n  <param name=\"point\">The point to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere to test.",
                "ImportedHelp": "<param name=\"sphere\">The sphere to test.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point to test.",
                "ImportedHelp": "<param name=\"point\">The point to test.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SphereContainsPoint"
        },
        {
          "NodeAttribute": {
            "Name": "SphereContainsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether a Sphere contains a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.SphereContainsSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines whether a <see cref=\"T:SharpDX.BoundingSphere\" /> contains a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"sphere1\">The first sphere to test.</param>\r\n  <param name=\"sphere2\">The second sphere to test.</param>\r\n  <returns>The type of containment the two objects have.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first sphere to test.",
                "ImportedHelp": "<param name=\"sphere1\">The first sphere to test.</param>"
              },
              "DotNetName": "sphere1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second sphere to test.",
                "ImportedHelp": "<param name=\"sphere2\">The second sphere to test.</param>"
              },
              "DotNetName": "sphere2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "The type of containment the two objects have.",
              "ImportedHelp": "<returns>The type of containment the two objects have.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SphereContainsSphere"
        },
        {
          "NodeAttribute": {
            "Name": "SphereIntersectsSphere",
            "Category": "3D.Collision",
            "Help": "Determines whether there is an intersection between a Sphere and a Sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.Collision.SphereIntersectsSphere(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Determines whether there is an intersection between a <see cref=\"T:SharpDX.BoundingSphere\" /> and a <see cref=\"T:SharpDX.BoundingSphere\" />.\r\n            </summary>\r\n  <param name=\"sphere1\">First sphere to test.</param>\r\n  <param name=\"sphere2\">Second sphere to test.</param>\r\n  <returns>Whether the two objects intersected.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "First sphere to test.",
                "ImportedHelp": "<param name=\"sphere1\">First sphere to test.</param>"
              },
              "DotNetName": "sphere1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "Second sphere to test.",
                "ImportedHelp": "<param name=\"sphere2\">Second sphere to test.</param>"
              },
              "DotNetName": "sphere2"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "Whether the two objects intersected.",
              "ImportedHelp": "<returns>Whether the two objects intersected.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "SphereIntersectsSphere"
        }
      ],
      "DotNetName": "SharpDX.Collision"
    },
    {
      "TypeAttribute": {
        "Name": "ContainmentType",
        "Category": "3D.Collision",
        "Help": "Describes how one bounding volume contains another.",
        "ImportedHelp": "<member name=\"T:SharpDX.ContainmentType\">\r\n  <summary>\r\n            Describes how one bounding volume contains another.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "SharpDX.ContainmentType"
    },
    {
      "TypeAttribute": {
        "Name": "Frustum",
        "Category": "3D",
        "Help": "Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, \n            (matrix, frustum, camera) interchange, and many kind of intersection testing.",
        "ImportedHelp": "<member name=\"T:SharpDX.BoundingFrustum\">\r\n  <summary>\r\n            Defines a frustum which can be used in frustum culling, zoom to Extents (zoom to fit) operations, \r\n            (matrix, frustum, camera) interchange, and many kind of intersection testing.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Implements the operator !=.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.op_Inequality(SharpDX.BoundingFrustum,SharpDX.BoundingFrustum)\">\r\n  <summary>\r\n            Implements the operator !=.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>\r\n            The result of the operator.\r\n            </returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingFrustum",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingFrustum",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>\r\n            The result of the operator.\r\n            </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Implements the operator ==.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.op_Equality(SharpDX.BoundingFrustum,SharpDX.BoundingFrustum)\">\r\n  <summary>\r\n            Implements the operator ==.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>\r\n            The result of the operator.\r\n            </returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingFrustum",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingFrustum",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>\r\n            The result of the operator.\r\n            </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Bottom",
            "ShowCategory": true,
            "Help": "Gets the bottom plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Bottom\">\r\n  <summary>\r\n            Gets the bottom plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Bottom"
        },
        {
          "NodeAttribute": {
            "Name": "Far",
            "ShowCategory": true,
            "Help": "Gets the far plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Far\">\r\n  <summary>\r\n            Gets the far plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Far"
        },
        {
          "NodeAttribute": {
            "Name": "FromCamera",
            "ShowCategory": true,
            "Help": "Creates a new frustum relaying on perspective camera parameters",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.FromCamera(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3,System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Creates a new frustum relaying on perspective camera parameters\r\n            </summary>\r\n  <param name=\"cameraPos\">The camera pos.</param>\r\n  <param name=\"lookDir\">The look dir.</param>\r\n  <param name=\"upDir\">Up dir.</param>\r\n  <param name=\"fov\">The fov.</param>\r\n  <param name=\"znear\">The znear.</param>\r\n  <param name=\"zfar\">The zfar.</param>\r\n  <param name=\"aspect\">The aspect.</param>\r\n  <returns>The bounding frustum calculated from perspective camera</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera pos.",
                "ImportedHelp": "<param name=\"cameraPos\">The camera pos.</param>"
              },
              "DotNetName": "cameraPos"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The look dir.",
                "ImportedHelp": "<param name=\"lookDir\">The look dir.</param>"
              },
              "DotNetName": "lookDir"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Up dir.",
                "ImportedHelp": "<param name=\"upDir\">Up dir.</param>"
              },
              "DotNetName": "upDir"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The fov.",
                "ImportedHelp": "<param name=\"fov\">The fov.</param>"
              },
              "DotNetName": "fov"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The znear.",
                "ImportedHelp": "<param name=\"znear\">The znear.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The zfar.",
                "ImportedHelp": "<param name=\"zfar\">The zfar.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The aspect.",
                "ImportedHelp": "<param name=\"aspect\">The aspect.</param>"
              },
              "DotNetName": "aspect"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.BoundingFrustum",
            "PinAttribute": {
              "Help": "The bounding frustum calculated from perspective camera",
              "ImportedHelp": "<returns>The bounding frustum calculated from perspective camera</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "FromCamera"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumContainsBox",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Determines the intersection relationship between the frustum and a bounding box.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Contains(SharpDX.BoundingBox@,SharpDX.ContainmentType@)\">\r\n  <summary>\r\n            Determines the intersection relationship between the frustum and a bounding box.\r\n            </summary>\r\n  <param name=\"box\">The box.</param>\r\n  <param name=\"result\">Type of the containment.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box.",
                "ImportedHelp": "<param name=\"box\">The box.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "out SharpDX.ContainmentType",
              "PinAttribute": {
                "Help": "Type of the containment.",
                "ImportedHelp": "<param name=\"result\">Type of the containment.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumContainsFrustum",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Determines the intersection relationship between the frustum and another bounding frustum.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Contains(SharpDX.BoundingFrustum@,System.Boolean@)\">\r\n  <summary>\r\n            Determines the intersection relationship between the frustum and another bounding frustum.\r\n            </summary>\r\n  <param name=\"frustum\">The frustum.</param>\r\n  <param name=\"result\">Type of the containment.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingFrustum",
              "PinAttribute": {
                "Help": "The frustum.",
                "ImportedHelp": "<param name=\"frustum\">The frustum.</param>"
              },
              "DotNetName": "frustum"
            },
            {
              "TypeFullName": "out System.Boolean",
              "PinAttribute": {
                "Help": "Type of the containment.",
                "ImportedHelp": "<param name=\"result\">Type of the containment.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumContainsPoint",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether a point lay inside, intersects or lay outside the frustum.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Contains(SharpDX.Vector3@)\">\r\n  <summary>\r\n            Checks whether a point lay inside, intersects or lay outside the frustum.\r\n            </summary>\r\n  <param name=\"point\">The point.</param>\r\n  <returns>Type of the containment</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The point.",
                "ImportedHelp": "<param name=\"point\">The point.</param>"
              },
              "DotNetName": "point"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.ContainmentType",
            "PinAttribute": {
              "Help": "Type of the containment",
              "ImportedHelp": "<returns>Type of the containment</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumContainsPoints",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint).",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Contains(SharpDX.Vector3[],SharpDX.ContainmentType@)\">\r\n  <summary>\r\n            Checks whether a group of points lay totally inside the frustum (Contains), or lay partially inside the frustum (Intersects), or lay outside the frustum (Disjoint).\r\n            </summary>\r\n  <param name=\"points\">The points.</param>\r\n  <param name=\"result\">Type of the containment.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3[]",
              "PinAttribute": {
                "Help": "The points.",
                "ImportedHelp": "<param name=\"points\">The points.</param>"
              },
              "DotNetName": "points"
            },
            {
              "TypeFullName": "out SharpDX.ContainmentType",
              "PinAttribute": {
                "Help": "Type of the containment.",
                "ImportedHelp": "<param name=\"result\">Type of the containment.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumContainsSphere",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Determines the intersection relationship between the frustum and a bounding sphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Contains(SharpDX.BoundingSphere@,SharpDX.ContainmentType@)\">\r\n  <summary>\r\n            Determines the intersection relationship between the frustum and a bounding sphere.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere.</param>\r\n  <param name=\"result\">Type of the containment.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere.",
                "ImportedHelp": "<param name=\"sphere\">The sphere.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "out SharpDX.ContainmentType",
              "PinAttribute": {
                "Help": "Type of the containment.",
                "ImportedHelp": "<param name=\"result\">Type of the containment.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Contains"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumIntersectsBox",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether the current BoundingFrustum intersects a BoundingBox.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Intersects(SharpDX.BoundingBox@,System.Boolean@)\">\r\n  <summary>\r\n            Checks whether the current BoundingFrustum intersects a BoundingBox.\r\n            </summary>\r\n  <param name=\"box\">The box.</param>\r\n  <param name=\"result\">\r\n    <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box.",
                "ImportedHelp": "<param name=\"box\">The box.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "out System.Boolean",
              "PinAttribute": {
                "Help": "true if the current BoundingFrustum intersects a BoundingSphere.",
                "ImportedHelp": "<param name=\"result\">\r\n  <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Intersects"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumIntersectsPlane",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether the current BoundingFrustum intersects the specified Plane.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Intersects(SharpDX.Plane@,SharpDX.PlaneIntersectionType@)\">\r\n  <summary>\r\n            Checks whether the current BoundingFrustum intersects the specified Plane.\r\n            </summary>\r\n  <param name=\"plane\">The plane.</param>\r\n  <param name=\"result\">Plane intersection type.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The plane.",
                "ImportedHelp": "<param name=\"plane\">The plane.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "out SharpDX.PlaneIntersectionType",
              "PinAttribute": {
                "Help": "Plane intersection type.",
                "ImportedHelp": "<param name=\"result\">Plane intersection type.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Intersects"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumIntersectsRay",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether the current BoundingFrustum intersects the specified Ray.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Intersects(SharpDX.Ray@)\">\r\n  <summary>\r\n            Checks whether the current BoundingFrustum intersects the specified Ray.\r\n            </summary>\r\n  <param name=\"ray\">The ray.</param>\r\n  <returns>\r\n    <c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Ray",
              "PinAttribute": {
                "Help": "The ray.",
                "ImportedHelp": "<param name=\"ray\">The ray.</param>"
              },
              "DotNetName": "ray"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the current BoundingFrustum intersects the specified Ray.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if the current BoundingFrustum intersects the specified Ray.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Intersects"
        },
        {
          "NodeAttribute": {
            "Name": "FrustumIntersectsSphere",
            "Category": "3D.Collision",
            "ShowCategory": false,
            "Help": "Checks whether the current BoundingFrustum intersects a BoundingSphere.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.Intersects(SharpDX.BoundingSphere@,System.Boolean@)\">\r\n  <summary>\r\n            Checks whether the current BoundingFrustum intersects a BoundingSphere.\r\n            </summary>\r\n  <param name=\"sphere\">The sphere.</param>\r\n  <param name=\"result\">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The sphere.",
                "ImportedHelp": "<param name=\"sphere\">The sphere.</param>"
              },
              "DotNetName": "sphere"
            },
            {
              "TypeFullName": "out System.Boolean",
              "PinAttribute": {
                "Help": "Set to true if the current BoundingFrustum intersects a BoundingSphere.",
                "ImportedHelp": "<param name=\"result\">Set to <c>true</c> if the current BoundingFrustum intersects a BoundingSphere.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Intersects"
        },
        {
          "NodeAttribute": {
            "Name": "Frustum",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Creates a new instance of BoundingFrustum.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingFrustum.#ctor(SharpDX.Matrix)\">\r\n  <summary>\r\n            Creates a new instance of BoundingFrustum.\r\n            </summary>\r\n  <param name=\"matrix\">Combined matrix that usually takes view × projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "Combined matrix that usually takes view × projection matrix.",
                "ImportedHelp": "<param name=\"matrix\">Combined matrix that usually takes view × projection matrix.</param>"
              },
              "DotNetName": "matrix"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "IsOrthographic",
            "ShowCategory": true,
            "Help": "Indicate whether the current BoundingFrustrum is Orthographic.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.IsOrthographic\">\r\n  <summary>\r\n            Indicate whether the current BoundingFrustrum is Orthographic.\r\n            </summary>\r\n  <value>\r\n    <c>true</c> if the current BoundingFrustrum is Orthographic; otherwise, <c>false</c>.\r\n            </value>\r\n</member>"
          },
          "DotNetName": "IsOrthographic"
        },
        {
          "NodeAttribute": {
            "Name": "Left",
            "ShowCategory": true,
            "Help": "Gets the left plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Left\">\r\n  <summary>\r\n            Gets the left plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Left"
        },
        {
          "NodeAttribute": {
            "Name": "Matrix",
            "ShowCategory": true,
            "Help": "Gets or sets the Matrix that describes this bounding frustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Matrix\">\r\n  <summary>\r\n            Gets or sets the Matrix that describes this bounding frustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Matrix"
        },
        {
          "NodeAttribute": {
            "Name": "Near",
            "ShowCategory": true,
            "Help": "Gets the near plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Near\">\r\n  <summary>\r\n            Gets the near plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Near"
        },
        {
          "NodeAttribute": {
            "Name": "Right",
            "ShowCategory": true,
            "Help": "Gets the right plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Right\">\r\n  <summary>\r\n            Gets the right plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Right"
        },
        {
          "NodeAttribute": {
            "Name": "Top",
            "ShowCategory": true,
            "Help": "Gets the top plane of the BoundingFrustum.",
            "ImportedHelp": "<member name=\"P:SharpDX.BoundingFrustum.Top\">\r\n  <summary>\r\n            Gets the top plane of the BoundingFrustum.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Top"
        }
      ],
      "DotNetName": "SharpDX.BoundingFrustum"
    },
    {
      "TypeAttribute": {
        "Name": "Matrix",
        "Category": "3D",
        "Help": "Represents a 4x4 mathematical matrix.",
        "ImportedHelp": "<member name=\"T:SharpDX.Matrix\">\r\n  <summary>\r\n            Represents a 4x4 mathematical matrix.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.op_Inequality(SharpDX.Matrix,SharpDX.Matrix)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "Help": "Determines the product of two matrices.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Multiply(SharpDX.Matrix@,SharpDX.Matrix@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Determines the product of two matrices.\r\n            </summary>\r\n  <param name=\"left\">The first matrix to multiply.</param>\r\n  <param name=\"right\">The second matrix to multiply.</param>\r\n  <param name=\"result\">The product of the two matrices.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first matrix to multiply.",
                "ImportedHelp": "<param name=\"left\">The first matrix to multiply.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second matrix to multiply.",
                "ImportedHelp": "<param name=\"right\">The second matrix to multiply.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The product of the two matrices.",
                "ImportedHelp": "<param name=\"result\">The product of the two matrices.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Multiply"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.op_Equality(SharpDX.Matrix,SharpDX.Matrix)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Column1",
            "ShowCategory": true,
            "Help": "Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Column1\">\r\n  <summary>\r\n            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Column1"
        },
        {
          "NodeAttribute": {
            "Name": "Column2",
            "ShowCategory": true,
            "Help": "Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Column2\">\r\n  <summary>\r\n            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Column2"
        },
        {
          "NodeAttribute": {
            "Name": "Column3",
            "ShowCategory": true,
            "Help": "Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Column3\">\r\n  <summary>\r\n            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Column3"
        },
        {
          "NodeAttribute": {
            "Name": "Column4",
            "ShowCategory": true,
            "Help": "Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Column4\">\r\n  <summary>\r\n            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Column4"
        },
        {
          "NodeAttribute": {
            "Name": "Decompose",
            "ShowCategory": false,
            "Help": "Decomposes a matrix into a scale, rotation, and translation.\r\nRemarks: This method is designed to decompose an SRT transformation matrix only.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Decompose(SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Decomposes a matrix into a scale, rotation, and translation.\r\n            </summary>\r\n  <param name=\"scale\">When the method completes, contains the scaling component of the decomposed matrix.</param>\r\n  <param name=\"rotation\">When the method completes, contains the rotation component of the decomposed matrix.</param>\r\n  <param name=\"translation\">When the method completes, contains the translation component of the decomposed matrix.</param>\r\n  <remarks>\r\n            This method is designed to decompose an SRT transformation matrix only.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the scaling component of the decomposed matrix.",
                "ImportedHelp": "<param name=\"scale\">When the method completes, contains the scaling component of the decomposed matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "scale"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the rotation component of the decomposed matrix.",
                "ImportedHelp": "<param name=\"rotation\">When the method completes, contains the rotation component of the decomposed matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the translation component of the decomposed matrix.",
                "ImportedHelp": "<param name=\"translation\">When the method completes, contains the translation component of the decomposed matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "translation"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Name": "Success"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Decompose"
        },
        {
          "NodeAttribute": {
            "Name": "Identity",
            "ShowCategory": true,
            "Help": "The identity Matrix.",
            "ImportedHelp": "<member name=\"F:SharpDX.Matrix.Identity\">\r\n  <summary>\r\n            The identity <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Identity"
        },
        {
          "NodeAttribute": {
            "Name": "Invert",
            "Help": "Calculates the inverse of the specified matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Invert(SharpDX.Matrix@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Calculates the inverse of the specified matrix.\r\n            </summary>\r\n  <param name=\"value\">The matrix whose inverse is to be calculated.</param>\r\n  <param name=\"result\">When the method completes, contains the inverse of the specified matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The matrix whose inverse is to be calculated.",
                "ImportedHelp": "<param name=\"value\">The matrix whose inverse is to be calculated.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the inverse of the specified matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the inverse of the specified matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Invert"
        },
        {
          "NodeAttribute": {
            "Name": "IsIdentity",
            "ShowCategory": true,
            "Help": "Gets a value indicating whether this instance is an identity matrix.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.IsIdentity\">\r\n  <summary>\r\n            Gets a value indicating whether this instance is an identity matrix.\r\n            </summary>\r\n  <value>\r\n    <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.\r\n            </value>\r\n</member>"
          },
          "DotNetName": "IsIdentity"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Help": "Creates a left-handed, look-at matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.LookAtLH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a left-handed, look-at matrix.\r\n            </summary>\r\n  <param name=\"eye\">The position of the viewer's eye.</param>\r\n  <param name=\"target\">The camera look-at target.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The position of the viewer's eye.",
                "ImportedHelp": "<param name=\"eye\">The position of the viewer's eye.</param>"
              },
              "DotNetName": "eye"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera look-at target.",
                "ImportedHelp": "<param name=\"target\">The camera look-at target.</param>"
              },
              "DotNetName": "target"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "LookAtLH"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Version": "RightHanded",
            "Help": "Creates a right-handed, look-at matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.LookAtRH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a right-handed, look-at matrix.\r\n            </summary>\r\n  <param name=\"eye\">The position of the viewer's eye.</param>\r\n  <param name=\"target\">The camera look-at target.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The position of the viewer's eye.",
                "ImportedHelp": "<param name=\"eye\">The position of the viewer's eye.</param>"
              },
              "DotNetName": "eye"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera look-at target.",
                "ImportedHelp": "<param name=\"target\">The camera look-at target.</param>"
              },
              "DotNetName": "target"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "LookAtRH"
        },
        {
          "NodeAttribute": {
            "Name": "Matrix",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Matrix struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Matrix\" /> struct.\r\n            </summary>\r\n  <param name=\"M11\">The value to assign at row 1 column 1 of the matrix.</param>\r\n  <param name=\"M12\">The value to assign at row 1 column 2 of the matrix.</param>\r\n  <param name=\"M13\">The value to assign at row 1 column 3 of the matrix.</param>\r\n  <param name=\"M14\">The value to assign at row 1 column 4 of the matrix.</param>\r\n  <param name=\"M21\">The value to assign at row 2 column 1 of the matrix.</param>\r\n  <param name=\"M22\">The value to assign at row 2 column 2 of the matrix.</param>\r\n  <param name=\"M23\">The value to assign at row 2 column 3 of the matrix.</param>\r\n  <param name=\"M24\">The value to assign at row 2 column 4 of the matrix.</param>\r\n  <param name=\"M31\">The value to assign at row 3 column 1 of the matrix.</param>\r\n  <param name=\"M32\">The value to assign at row 3 column 2 of the matrix.</param>\r\n  <param name=\"M33\">The value to assign at row 3 column 3 of the matrix.</param>\r\n  <param name=\"M34\">The value to assign at row 3 column 4 of the matrix.</param>\r\n  <param name=\"M41\">The value to assign at row 4 column 1 of the matrix.</param>\r\n  <param name=\"M42\">The value to assign at row 4 column 2 of the matrix.</param>\r\n  <param name=\"M43\">The value to assign at row 4 column 3 of the matrix.</param>\r\n  <param name=\"M44\">The value to assign at row 4 column 4 of the matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 1 column 1 of the matrix.",
                "ImportedHelp": "<param name=\"M11\">The value to assign at row 1 column 1 of the matrix.</param>"
              },
              "DotNetName": "M11"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 1 column 2 of the matrix.",
                "ImportedHelp": "<param name=\"M12\">The value to assign at row 1 column 2 of the matrix.</param>"
              },
              "DotNetName": "M12"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 1 column 3 of the matrix.",
                "ImportedHelp": "<param name=\"M13\">The value to assign at row 1 column 3 of the matrix.</param>"
              },
              "DotNetName": "M13"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 1 column 4 of the matrix.",
                "ImportedHelp": "<param name=\"M14\">The value to assign at row 1 column 4 of the matrix.</param>"
              },
              "DotNetName": "M14"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 2 column 1 of the matrix.",
                "ImportedHelp": "<param name=\"M21\">The value to assign at row 2 column 1 of the matrix.</param>"
              },
              "DotNetName": "M21"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 2 column 2 of the matrix.",
                "ImportedHelp": "<param name=\"M22\">The value to assign at row 2 column 2 of the matrix.</param>"
              },
              "DotNetName": "M22"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 2 column 3 of the matrix.",
                "ImportedHelp": "<param name=\"M23\">The value to assign at row 2 column 3 of the matrix.</param>"
              },
              "DotNetName": "M23"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 2 column 4 of the matrix.",
                "ImportedHelp": "<param name=\"M24\">The value to assign at row 2 column 4 of the matrix.</param>"
              },
              "DotNetName": "M24"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 3 column 1 of the matrix.",
                "ImportedHelp": "<param name=\"M31\">The value to assign at row 3 column 1 of the matrix.</param>"
              },
              "DotNetName": "M31"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 3 column 2 of the matrix.",
                "ImportedHelp": "<param name=\"M32\">The value to assign at row 3 column 2 of the matrix.</param>"
              },
              "DotNetName": "M32"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 3 column 3 of the matrix.",
                "ImportedHelp": "<param name=\"M33\">The value to assign at row 3 column 3 of the matrix.</param>"
              },
              "DotNetName": "M33"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 3 column 4 of the matrix.",
                "ImportedHelp": "<param name=\"M34\">The value to assign at row 3 column 4 of the matrix.</param>"
              },
              "DotNetName": "M34"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 4 column 1 of the matrix.",
                "ImportedHelp": "<param name=\"M41\">The value to assign at row 4 column 1 of the matrix.</param>"
              },
              "DotNetName": "M41"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 4 column 2 of the matrix.",
                "ImportedHelp": "<param name=\"M42\">The value to assign at row 4 column 2 of the matrix.</param>"
              },
              "DotNetName": "M42"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 4 column 3 of the matrix.",
                "ImportedHelp": "<param name=\"M43\">The value to assign at row 4 column 3 of the matrix.</param>"
              },
              "DotNetName": "M43"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The value to assign at row 4 column 4 of the matrix.",
                "ImportedHelp": "<param name=\"M44\">The value to assign at row 4 column 4 of the matrix.</param>"
              },
              "DotNetName": "M44"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Matrix",
            "Version": "Join Array",
            "Help": "Initializes a new instance of the Matrix struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.#ctor(System.Single[])\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Matrix\" /> struct.\r\n            </summary>\r\n  <param name=\"values\">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>\r\n  <exception cref=\"T:System.ArgumentNullException\">Thrown when <paramref name=\"values\" /> is <c>null</c>.</exception>\r\n  <exception cref=\"T:System.ArgumentOutOfRangeException\">Thrown when <paramref name=\"values\" /> contains more or less than sixteen elements.</exception>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single[]",
              "PinAttribute": {
                "Help": "The values to assign to the components of the matrix. This must be an array with sixteen elements.",
                "ImportedHelp": "<param name=\"values\">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>"
              },
              "DotNetName": "values"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Ortho",
            "Help": "Creates a left-handed, orthographic projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a left-handed, orthographic projection matrix.\r\n            </summary>\r\n  <param name=\"width\">Width of the viewing volume.</param>\r\n  <param name=\"height\">Height of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Width of the viewing volume.",
                "ImportedHelp": "<param name=\"width\">Width of the viewing volume.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Height of the viewing volume.",
                "ImportedHelp": "<param name=\"height\">Height of the viewing volume.</param>"
              },
              "DotNetName": "height"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "OrthoLH"
        },
        {
          "NodeAttribute": {
            "Name": "Ortho",
            "Version": "OffCenter",
            "Help": "Creates a left-handed, customized orthographic projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a left-handed, customized orthographic projection matrix.\r\n            </summary>\r\n  <param name=\"left\">Minimum x-value of the viewing volume.</param>\r\n  <param name=\"right\">Maximum x-value of the viewing volume.</param>\r\n  <param name=\"bottom\">Minimum y-value of the viewing volume.</param>\r\n  <param name=\"top\">Maximum y-value of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"left\">Minimum x-value of the viewing volume.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"right\">Maximum x-value of the viewing volume.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"bottom\">Minimum y-value of the viewing volume.</param>"
              },
              "DotNetName": "bottom"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"top\">Maximum y-value of the viewing volume.</param>"
              },
              "DotNetName": "top"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "OrthoOffCenterLH"
        },
        {
          "NodeAttribute": {
            "Name": "Ortho",
            "Version": "OffCenter RightHanded",
            "Help": "Creates a right-handed, customized orthographic projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a right-handed, customized orthographic projection matrix.\r\n            </summary>\r\n  <param name=\"left\">Minimum x-value of the viewing volume.</param>\r\n  <param name=\"right\">Maximum x-value of the viewing volume.</param>\r\n  <param name=\"bottom\">Minimum y-value of the viewing volume.</param>\r\n  <param name=\"top\">Maximum y-value of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"left\">Minimum x-value of the viewing volume.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"right\">Maximum x-value of the viewing volume.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"bottom\">Minimum y-value of the viewing volume.</param>"
              },
              "DotNetName": "bottom"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"top\">Maximum y-value of the viewing volume.</param>"
              },
              "DotNetName": "top"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "OrthoOffCenterRH"
        },
        {
          "NodeAttribute": {
            "Name": "Perspective",
            "Help": "Creates a left-handed, perspective projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a left-handed, perspective projection matrix.\r\n            </summary>\r\n  <param name=\"width\">Width of the viewing volume.</param>\r\n  <param name=\"height\">Height of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Width of the viewing volume.",
                "ImportedHelp": "<param name=\"width\">Width of the viewing volume.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Height of the viewing volume.",
                "ImportedHelp": "<param name=\"height\">Height of the viewing volume.</param>"
              },
              "DotNetName": "height"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "PerspectiveLH"
        },
        {
          "NodeAttribute": {
            "Name": "Perspective",
            "Version": "OffCenter",
            "Help": "Creates a left-handed, customized perspective projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a left-handed, customized perspective projection matrix.\r\n            </summary>\r\n  <param name=\"left\">Minimum x-value of the viewing volume.</param>\r\n  <param name=\"right\">Maximum x-value of the viewing volume.</param>\r\n  <param name=\"bottom\">Minimum y-value of the viewing volume.</param>\r\n  <param name=\"top\">Maximum y-value of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"left\">Minimum x-value of the viewing volume.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"right\">Maximum x-value of the viewing volume.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"bottom\">Minimum y-value of the viewing volume.</param>"
              },
              "DotNetName": "bottom"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"top\">Maximum y-value of the viewing volume.</param>"
              },
              "DotNetName": "top"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "PerspectiveOffCenterLH"
        },
        {
          "NodeAttribute": {
            "Name": "Perspective",
            "Version": "OffCenter RightHanded",
            "Help": "Creates a right-handed, customized perspective projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a right-handed, customized perspective projection matrix.\r\n            </summary>\r\n  <param name=\"left\">Minimum x-value of the viewing volume.</param>\r\n  <param name=\"right\">Maximum x-value of the viewing volume.</param>\r\n  <param name=\"bottom\">Minimum y-value of the viewing volume.</param>\r\n  <param name=\"top\">Maximum y-value of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"left\">Minimum x-value of the viewing volume.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum x-value of the viewing volume.",
                "ImportedHelp": "<param name=\"right\">Maximum x-value of the viewing volume.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Minimum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"bottom\">Minimum y-value of the viewing volume.</param>"
              },
              "DotNetName": "bottom"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Maximum y-value of the viewing volume.",
                "ImportedHelp": "<param name=\"top\">Maximum y-value of the viewing volume.</param>"
              },
              "DotNetName": "top"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "PerspectiveOffCenterRH"
        },
        {
          "NodeAttribute": {
            "Name": "Perspective",
            "Version": "RightHanded",
            "Help": "Creates a right-handed, perspective projection matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a right-handed, perspective projection matrix.\r\n            </summary>\r\n  <param name=\"width\">Width of the viewing volume.</param>\r\n  <param name=\"height\">Height of the viewing volume.</param>\r\n  <param name=\"znear\">Minimum z-value of the viewing volume.</param>\r\n  <param name=\"zfar\">Maximum z-value of the viewing volume.</param>\r\n  <param name=\"result\">When the method completes, contains the created projection matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Width of the viewing volume.",
                "ImportedHelp": "<param name=\"width\">Width of the viewing volume.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Height of the viewing volume.",
                "ImportedHelp": "<param name=\"height\">Height of the viewing volume.</param>"
              },
              "DotNetName": "height"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Near",
                "Help": "Minimum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"znear\">Minimum z-value of the viewing volume.</param>"
              },
              "DotNetName": "znear"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Z Far",
                "Help": "Maximum z-value of the viewing volume.",
                "ImportedHelp": "<param name=\"zfar\">Maximum z-value of the viewing volume.</param>"
              },
              "DotNetName": "zfar"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created projection matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created projection matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "PerspectiveRH"
        },
        {
          "NodeAttribute": {
            "Name": "Rotation",
            "Version": "Quaternion",
            "Help": "Creates a rotation matrix from a quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.RotationQuaternion(SharpDX.Quaternion@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a rotation matrix from a quaternion.\r\n            </summary>\r\n  <param name=\"rotation\">The quaternion to use to build the matrix.</param>\r\n  <param name=\"result\">The created rotation matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The quaternion to use to build the matrix.",
                "ImportedHelp": "<param name=\"rotation\">The quaternion to use to build the matrix.</param>"
              },
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The created rotation matrix.",
                "ImportedHelp": "<param name=\"result\">The created rotation matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "RotationQuaternion"
        },
        {
          "NodeAttribute": {
            "Name": "Row1",
            "ShowCategory": true,
            "Help": "Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Row1\">\r\n  <summary>\r\n            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Row1"
        },
        {
          "NodeAttribute": {
            "Name": "Row2",
            "ShowCategory": true,
            "Help": "Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Row2\">\r\n  <summary>\r\n            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Row2"
        },
        {
          "NodeAttribute": {
            "Name": "Row3",
            "ShowCategory": true,
            "Help": "Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Row3\">\r\n  <summary>\r\n            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Row3"
        },
        {
          "NodeAttribute": {
            "Name": "Row4",
            "ShowCategory": true,
            "Help": "Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.Row4\">\r\n  <summary>\r\n            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Row4"
        },
        {
          "NodeAttribute": {
            "Name": "Scaling",
            "Help": "Creates a matrix that scales along the x-axis, y-axis, and y-axis.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Scaling(SharpDX.Vector3@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a matrix that scales along the x-axis, y-axis, and y-axis.\r\n            </summary>\r\n  <param name=\"scale\">Scaling factor for all three axes.</param>\r\n  <param name=\"result\">When the method completes, contains the created scaling matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Scaling factor for all three axes.",
                "ImportedHelp": "<param name=\"scale\">Scaling factor for all three axes.</param>"
              },
              "DotNetName": "scale"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created scaling matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created scaling matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Scaling"
        },
        {
          "NodeAttribute": {
            "Name": "Translation",
            "Help": "Creates a translation matrix using the specified offsets.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Translation(SharpDX.Vector3@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Creates a translation matrix using the specified offsets.\r\n            </summary>\r\n  <param name=\"value\">The offset for all three coordinate planes.</param>\r\n  <param name=\"result\">When the method completes, contains the created translation matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Translation",
                "Help": "The offset for all three coordinate planes.",
                "ImportedHelp": "<param name=\"value\">The offset for all three coordinate planes.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the created translation matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created translation matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Translation"
        },
        {
          "NodeAttribute": {
            "Name": "TranslationVector",
            "ShowCategory": true,
            "Help": "Gets or sets the translation of the matrix; that is M41, M42, and M43.",
            "ImportedHelp": "<member name=\"P:SharpDX.Matrix.TranslationVector\">\r\n  <summary>\r\n            Gets or sets the translation of the matrix; that is M41, M42, and M43.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "TranslationVector"
        },
        {
          "NodeAttribute": {
            "Name": "Transpose",
            "Help": "Calculates the transpose of the specified matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Matrix.Transpose(SharpDX.Matrix@,SharpDX.Matrix@)\">\r\n  <summary>\r\n            Calculates the transpose of the specified matrix.\r\n            </summary>\r\n  <param name=\"value\">The matrix whose transpose is to be calculated.</param>\r\n  <param name=\"result\">When the method completes, contains the transpose of the specified matrix.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The matrix whose transpose is to be calculated.",
                "ImportedHelp": "<param name=\"value\">The matrix whose transpose is to be calculated.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Matrix",
              "PinAttribute": {
                "Help": "When the method completes, contains the transpose of the specified matrix.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transpose of the specified matrix.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transpose"
        },
        {
          "NodeAttribute": {
            "Name": "Zero",
            "ShowCategory": true,
            "Help": "A Matrix with all of its components set to zero.",
            "ImportedHelp": "<member name=\"F:SharpDX.Matrix.Zero\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Matrix\" /> with all of its components set to zero.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Zero"
        }
      ],
      "DotNetName": "SharpDX.Matrix"
    },
    {
      "TypeAttribute": {
        "Name": "Plane",
        "Category": "3D",
        "Help": "Represents a plane in three dimensional space.",
        "ImportedHelp": "<member name=\"T:SharpDX.Plane\">\r\n  <summary>\r\n            Represents a plane in three dimensional space.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "D",
            "ShowCategory": true,
            "Help": "The distance of the plane along its normal from the origin.",
            "ImportedHelp": "<member name=\"F:SharpDX.Plane.D\">\r\n  <summary>\r\n            The distance of the plane along its normal from the origin.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "D"
        },
        {
          "NodeAttribute": {
            "Name": "From3Points",
            "Help": "Initializes a new instance of the Plane struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.#ctor(SharpDX.Vector3,SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Plane\" /> struct.\r\n            </summary>\r\n  <param name=\"point1\">First point of a triangle defining the plane.</param>\r\n  <param name=\"point2\">Second point of a triangle defining the plane.</param>\r\n  <param name=\"point3\">Third point of a triangle defining the plane.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "First point of a triangle defining the plane.",
                "ImportedHelp": "<param name=\"point1\">First point of a triangle defining the plane.</param>"
              },
              "DotNetName": "point1"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Second point of a triangle defining the plane.",
                "ImportedHelp": "<param name=\"point2\">Second point of a triangle defining the plane.</param>"
              },
              "DotNetName": "point2"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Third point of a triangle defining the plane.",
                "ImportedHelp": "<param name=\"point3\">Third point of a triangle defining the plane.</param>"
              },
              "DotNetName": "point3"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Normal",
            "ShowCategory": true,
            "Help": "The normal vector of the plane.",
            "ImportedHelp": "<member name=\"F:SharpDX.Plane.Normal\">\r\n  <summary>\r\n            The normal vector of the plane.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Normal"
        },
        {
          "NodeAttribute": {
            "Name": "Plane",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Plane struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Plane\" /> struct.\r\n            </summary>\r\n  <param name=\"a\">The X component of the normal.</param>\r\n  <param name=\"b\">The Y component of the normal.</param>\r\n  <param name=\"c\">The Z component of the normal.</param>\r\n  <param name=\"d\">The distance of the plane along its normal from the origin.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The X component of the normal.",
                "ImportedHelp": "<param name=\"a\">The X component of the normal.</param>"
              },
              "DotNetName": "a"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The Y component of the normal.",
                "ImportedHelp": "<param name=\"b\">The Y component of the normal.</param>"
              },
              "DotNetName": "b"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The Z component of the normal.",
                "ImportedHelp": "<param name=\"c\">The Z component of the normal.</param>"
              },
              "DotNetName": "c"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The distance of the plane along its normal from the origin.",
                "ImportedHelp": "<param name=\"d\">The distance of the plane along its normal from the origin.</param>"
              },
              "DotNetName": "d"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Plane",
            "Version": "Join Position Normal",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Plane class.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.#ctor(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Plane\" /> class.\r\n            </summary>\r\n  <param name=\"point\">Any point that lies along the plane.</param>\r\n  <param name=\"normal\">The normal vector to the plane.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Any point that lies along the plane.",
                "ImportedHelp": "<param name=\"point\">Any point that lies along the plane.</param>"
              },
              "DotNetName": "point"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The normal vector to the plane.",
                "ImportedHelp": "<param name=\"normal\">The normal vector to the plane.</param>"
              },
              "DotNetName": "normal"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Plane",
            "Version": "Join Vector",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Plane struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.#ctor(SharpDX.Vector3,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Plane\" /> struct.\r\n            </summary>\r\n  <param name=\"value\">The normal of the plane.</param>\r\n  <param name=\"d\">The distance of the plane along its normal from the origin</param>\r\n</member>",
            "IsDefaultValue": true
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Normal",
                "Help": "The normal of the plane.",
                "ImportedHelp": "<param name=\"value\">The normal of the plane.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The distance of the plane along its normal from the origin",
                "ImportedHelp": "<param name=\"d\">The distance of the plane along its normal from the origin</param>"
              },
              "DotNetName": "d"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Rotate",
            "Version": "Quaternion",
            "ShowCategory": true,
            "Help": "Transforms a normalized plane by a quaternion rotation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.Transform(SharpDX.Plane@,SharpDX.Quaternion@,SharpDX.Plane@)\">\r\n  <summary>\r\n            Transforms a normalized plane by a quaternion rotation.\r\n            </summary>\r\n  <param name=\"plane\">The normalized source plane.</param>\r\n  <param name=\"rotation\">The quaternion rotation.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed plane.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The normalized source plane.",
                "ImportedHelp": "<param name=\"plane\">The normalized source plane.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The quaternion rotation.",
                "ImportedHelp": "<param name=\"rotation\">The quaternion rotation.</param>"
              },
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Plane",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed plane.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed plane.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "ShowCategory": true,
            "Help": "Transforms a normalized plane by a matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Plane.Transform(SharpDX.Plane@,SharpDX.Matrix@,SharpDX.Plane@)\">\r\n  <summary>\r\n            Transforms a normalized plane by a matrix.\r\n            </summary>\r\n  <param name=\"plane\">The normalized source plane.</param>\r\n  <param name=\"transformation\">The transformation matrix.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed plane.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Plane",
              "PinAttribute": {
                "Help": "The normalized source plane.",
                "ImportedHelp": "<param name=\"plane\">The normalized source plane.</param>"
              },
              "DotNetName": "plane"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation matrix.",
                "ImportedHelp": "<param name=\"transformation\">The transformation matrix.</param>"
              },
              "DotNetName": "transformation"
            },
            {
              "TypeFullName": "out SharpDX.Plane",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed plane.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed plane.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        }
      ],
      "DotNetName": "SharpDX.Plane"
    },
    {
      "TypeAttribute": {
        "Name": "PlaneIntersectionType",
        "Category": "3D.Collision",
        "Help": "Describes the result of an intersection with a plane in three dimensions.",
        "ImportedHelp": "<member name=\"T:SharpDX.PlaneIntersectionType\">\r\n  <summary>\r\n            Describes the result of an intersection with a plane in three dimensions.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [],
      "DotNetName": "SharpDX.PlaneIntersectionType"
    },
    {
      "TypeAttribute": {
        "Name": "Quaternion",
        "Category": "3D",
        "Help": "Represents a four dimensional mathematical quaternion.",
        "ImportedHelp": "<member name=\"T:SharpDX.Quaternion\">\r\n  <summary>\r\n            Represents a four dimensional mathematical quaternion.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.op_Inequality(SharpDX.Quaternion,SharpDX.Quaternion)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "ShowCategory": true,
            "Help": "Multiplies a quaternion by another.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Multiply(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Multiplies a quaternion by another.\r\n            </summary>\r\n  <param name=\"left\">The first quaternion to multiply.</param>\r\n  <param name=\"right\">The second quaternion to multiply.</param>\r\n  <param name=\"result\">When the method completes, contains the multiplied quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first quaternion to multiply.",
                "ImportedHelp": "<param name=\"left\">The first quaternion to multiply.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second quaternion to multiply.",
                "ImportedHelp": "<param name=\"right\">The second quaternion to multiply.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the multiplied quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the multiplied quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Multiply"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "ShowCategory": true,
            "Help": "Adds two quaternions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Add(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Adds two quaternions.\r\n            </summary>\r\n  <param name=\"left\">The first quaternion to add.</param>\r\n  <param name=\"right\">The second quaternion to add.</param>\r\n  <param name=\"result\">When the method completes, contains the sum of the two quaternions.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first quaternion to add.",
                "ImportedHelp": "<param name=\"left\">The first quaternion to add.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second quaternion to add.",
                "ImportedHelp": "<param name=\"right\">The second quaternion to add.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the sum of the two quaternions.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the sum of the two quaternions.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "ShowCategory": true,
            "Help": "Subtracts two quaternions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Subtract(SharpDX.Quaternion@,SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Subtracts two quaternions.\r\n            </summary>\r\n  <param name=\"left\">The first quaternion to subtract.</param>\r\n  <param name=\"right\">The second quaternion to subtract.</param>\r\n  <param name=\"result\">When the method completes, contains the difference of the two quaternions.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first quaternion to subtract.",
                "ImportedHelp": "<param name=\"left\">The first quaternion to subtract.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second quaternion to subtract.",
                "ImportedHelp": "<param name=\"right\">The second quaternion to subtract.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the difference of the two quaternions.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the difference of the two quaternions.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Version": "Negate",
            "ShowCategory": true,
            "Help": "Reverses the direction of a given quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Negate(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Reverses the direction of a given quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion to negate.</param>\r\n  <param name=\"result\">When the method completes, contains a quaternion facing in the opposite direction.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The quaternion to negate.",
                "ImportedHelp": "<param name=\"value\">The quaternion to negate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains a quaternion facing in the opposite direction.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains a quaternion facing in the opposite direction.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Negate"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.op_Equality(SharpDX.Quaternion,SharpDX.Quaternion)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Axis",
            "ShowCategory": true,
            "Help": "Gets the axis components of the quaternion.",
            "ImportedHelp": "<member name=\"P:SharpDX.Quaternion.Axis\">\r\n  <summary>\r\n            Gets the axis components of the quaternion.\r\n            </summary>\r\n  <value>The axis components of the quaternion.</value>\r\n</member>"
          },
          "DotNetName": "Axis"
        },
        {
          "NodeAttribute": {
            "Name": "Conjugate",
            "ShowCategory": true,
            "Help": "Conjugates a quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Conjugate(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Conjugates a quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion to conjugate.</param>\r\n  <param name=\"result\">When the method completes, contains the conjugated quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The quaternion to conjugate.",
                "ImportedHelp": "<param name=\"value\">The quaternion to conjugate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the conjugated quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the conjugated quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Conjugate"
        },
        {
          "NodeAttribute": {
            "Name": "Dot",
            "Help": "Calculates the dot product of two quaternions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Dot(SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single@)\">\r\n  <summary>\r\n            Calculates the dot product of two quaternions.\r\n            </summary>\r\n  <param name=\"left\">First source quaternion.</param>\r\n  <param name=\"right\">Second source quaternion.</param>\r\n  <param name=\"result\">When the method completes, contains the dot product of the two quaternions.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "First source quaternion.",
                "ImportedHelp": "<param name=\"left\">First source quaternion.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "Second source quaternion.",
                "ImportedHelp": "<param name=\"right\">Second source quaternion.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the dot product of the two quaternions.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the dot product of the two quaternions.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Dot"
        },
        {
          "NodeAttribute": {
            "Name": "Exp",
            "ShowCategory": true,
            "Help": "Exponentiates a quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Exponential(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Exponentiates a quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion to exponentiate.</param>\r\n  <param name=\"result\">When the method completes, contains the exponentiated quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The quaternion to exponentiate.",
                "ImportedHelp": "<param name=\"value\">The quaternion to exponentiate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the exponentiated quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the exponentiated quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Exponential"
        },
        {
          "NodeAttribute": {
            "Name": "Identity",
            "ShowCategory": true,
            "Help": "The identity Quaternion (0, 0, 0, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Quaternion.Identity\">\r\n  <summary>\r\n            The identity <see cref=\"T:SharpDX.Quaternion\" /> (0, 0, 0, 1).\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Identity"
        },
        {
          "NodeAttribute": {
            "Name": "Invert",
            "ShowCategory": true,
            "Help": "Conjugates and renormalizes the quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Invert(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Conjugates and renormalizes the quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion to conjugate and renormalize.</param>\r\n  <param name=\"result\">When the method completes, contains the conjugated and renormalized quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The quaternion to conjugate and renormalize.",
                "ImportedHelp": "<param name=\"value\">The quaternion to conjugate and renormalize.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the conjugated and renormalized quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the conjugated and renormalized quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Invert"
        },
        {
          "NodeAttribute": {
            "Name": "Length",
            "Help": "Calculates the length of the quaternion.\r\nRemarks: LengthSquared may be preferred when only the relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Length\">\r\n  <summary>\r\n            Calculates the length of the quaternion.\r\n            </summary>\r\n  <returns>The length of the quaternion.</returns>\r\n  <remarks>\r\n    <see cref=\"M:SharpDX.Quaternion.LengthSquared\" /> may be preferred when only the relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The length of the quaternion.",
              "ImportedHelp": "<returns>The length of the quaternion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Length"
        },
        {
          "NodeAttribute": {
            "Name": "LengthSquared",
            "Help": "Calculates the squared length of the quaternion.\r\nRemarks: This method may be preferred to Length when only a relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.LengthSquared\">\r\n  <summary>\r\n            Calculates the squared length of the quaternion.\r\n            </summary>\r\n  <returns>The squared length of the quaternion.</returns>\r\n  <remarks>\r\n            This method may be preferred to <see cref=\"M:SharpDX.Quaternion.Length\" /> when only a relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The squared length of the quaternion.",
              "ImportedHelp": "<returns>The squared length of the quaternion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LengthSquared"
        },
        {
          "NodeAttribute": {
            "Name": "Ln",
            "Help": "Calculates the natural logarithm of the specified quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Logarithm(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Calculates the natural logarithm of the specified quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion whose logarithm will be calculated.</param>\r\n  <param name=\"result\">When the method completes, contains the natural logarithm of the quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The quaternion whose logarithm will be calculated.",
                "ImportedHelp": "<param name=\"value\">The quaternion whose logarithm will be calculated.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the natural logarithm of the quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the natural logarithm of the quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Logarithm"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Help": "Creates a left-handed, look-at quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.LookAtLH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Creates a left-handed, look-at quaternion.\r\n            </summary>\r\n  <param name=\"eye\">The position of the viewer's eye.</param>\r\n  <param name=\"target\">The camera look-at target.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The position of the viewer's eye.",
                "ImportedHelp": "<param name=\"eye\">The position of the viewer's eye.</param>"
              },
              "DotNetName": "eye"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera look-at target.",
                "ImportedHelp": "<param name=\"target\">The camera look-at target.</param>"
              },
              "DotNetName": "target"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "LookAtLH"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Version": "Direction",
            "Help": "Creates a left-handed, look-at quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.RotationLookAtLH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Creates a left-handed, look-at quaternion.\r\n            </summary>\r\n  <param name=\"forward\">The camera's forward direction.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's forward direction.",
                "ImportedHelp": "<param name=\"forward\">The camera's forward direction.</param>"
              },
              "DotNetName": "forward"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "RotationLookAtLH"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Version": "Direction RightHanded",
            "Help": "Creates a right-handed, look-at quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.RotationLookAtRH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Creates a right-handed, look-at quaternion.\r\n            </summary>\r\n  <param name=\"forward\">The camera's forward direction.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's forward direction.",
                "ImportedHelp": "<param name=\"forward\">The camera's forward direction.</param>"
              },
              "DotNetName": "forward"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "RotationLookAtRH"
        },
        {
          "NodeAttribute": {
            "Name": "LookAt",
            "Version": "RightHanded",
            "Help": "Creates a right-handed, look-at quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.LookAtRH(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Creates a right-handed, look-at quaternion.\r\n            </summary>\r\n  <param name=\"eye\">The position of the viewer's eye.</param>\r\n  <param name=\"target\">The camera look-at target.</param>\r\n  <param name=\"up\">The camera's up vector.</param>\r\n  <param name=\"result\">When the method completes, contains the created look-at quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The position of the viewer's eye.",
                "ImportedHelp": "<param name=\"eye\">The position of the viewer's eye.</param>"
              },
              "DotNetName": "eye"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera look-at target.",
                "ImportedHelp": "<param name=\"target\">The camera look-at target.</param>"
              },
              "DotNetName": "target"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The camera's up vector.",
                "ImportedHelp": "<param name=\"up\">The camera's up vector.</param>"
              },
              "DotNetName": "up"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the created look-at quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the created look-at quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "LookAtRH"
        },
        {
          "NodeAttribute": {
            "Name": "Normalize",
            "ShowCategory": true,
            "Help": "Converts the quaternion into a unit quaternion.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Normalize(SharpDX.Quaternion@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Converts the quaternion into a unit quaternion.\r\n            </summary>\r\n  <param name=\"value\">The quaternion to normalize.</param>\r\n  <param name=\"result\">When the method completes, contains the normalized quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The quaternion to normalize.",
                "ImportedHelp": "<param name=\"value\">The quaternion to normalize.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the normalized quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the normalized quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Normalize"
        },
        {
          "NodeAttribute": {
            "Name": "Quaternion",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Quaternion struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Quaternion\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">Initial value for the X component of the quaternion.</param>\r\n  <param name=\"y\">Initial value for the Y component of the quaternion.</param>\r\n  <param name=\"z\">Initial value for the Z component of the quaternion.</param>\r\n  <param name=\"w\">Initial value for the W component of the quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the X component of the quaternion.",
                "ImportedHelp": "<param name=\"x\">Initial value for the X component of the quaternion.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Y component of the quaternion.",
                "ImportedHelp": "<param name=\"y\">Initial value for the Y component of the quaternion.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Z component of the quaternion.",
                "ImportedHelp": "<param name=\"z\">Initial value for the Z component of the quaternion.</param>"
              },
              "DotNetName": "z"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the W component of the quaternion.",
                "ImportedHelp": "<param name=\"w\">Initial value for the W component of the quaternion.</param>"
              },
              "DotNetName": "w"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "RotationMatrix",
            "ShowCategory": true,
            "Help": "Creates a quaternion given a rotation matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.RotationMatrix(SharpDX.Matrix@,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Creates a quaternion given a rotation matrix.\r\n            </summary>\r\n  <param name=\"matrix\">The rotation matrix.</param>\r\n  <param name=\"result\">When the method completes, contains the newly created quaternion.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The rotation matrix.",
                "ImportedHelp": "<param name=\"matrix\">The rotation matrix.</param>"
              },
              "DotNetName": "matrix"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly created quaternion.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly created quaternion.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "RotationMatrix"
        },
        {
          "NodeAttribute": {
            "Name": "Slerp",
            "ShowCategory": true,
            "Help": "Interpolates between two quaternions, using spherical linear interpolation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Quaternion.Slerp(SharpDX.Quaternion@,SharpDX.Quaternion@,System.Single,SharpDX.Quaternion@)\">\r\n  <summary>\r\n            Interpolates between two quaternions, using spherical linear interpolation.\r\n            </summary>\r\n  <param name=\"start\">Start quaternion.</param>\r\n  <param name=\"end\">End quaternion.</param>\r\n  <param name=\"amount\">Value between 0 and 1 indicating the weight of <paramref name=\"end\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "Start quaternion.",
                "ImportedHelp": "<param name=\"start\">Start quaternion.</param>"
              },
              "DotNetName": "start"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "End quaternion.",
                "ImportedHelp": "<param name=\"end\">End quaternion.</param>"
              },
              "DotNetName": "end"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Value between 0 and 1 indicating the weight of End.",
                "ImportedHelp": "<param name=\"amount\">Value between 0 and 1 indicating the weight of <paramref name=\"end\" />.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "When the method completes, contains the spherical linear interpolation of the two quaternions.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Slerp"
        },
        {
          "NodeAttribute": {
            "Name": "W",
            "ShowCategory": true,
            "Help": "The W component of the quaternion.",
            "ImportedHelp": "<member name=\"F:SharpDX.Quaternion.W\">\r\n  <summary>\r\n            The W component of the quaternion.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "W"
        },
        {
          "NodeAttribute": {
            "Name": "X",
            "ShowCategory": true,
            "Help": "The X component of the quaternion.",
            "ImportedHelp": "<member name=\"F:SharpDX.Quaternion.X\">\r\n  <summary>\r\n            The X component of the quaternion.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "X"
        },
        {
          "NodeAttribute": {
            "Name": "Y",
            "ShowCategory": true,
            "Help": "The Y component of the quaternion.",
            "ImportedHelp": "<member name=\"F:SharpDX.Quaternion.Y\">\r\n  <summary>\r\n            The Y component of the quaternion.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Y"
        },
        {
          "NodeAttribute": {
            "Name": "Z",
            "ShowCategory": true,
            "Help": "The Z component of the quaternion.",
            "ImportedHelp": "<member name=\"F:SharpDX.Quaternion.Z\">\r\n  <summary>\r\n            The Z component of the quaternion.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Z"
        }
      ],
      "DotNetName": "SharpDX.Quaternion"
    },
    {
      "TypeAttribute": {
        "Name": "RGBA",
        "Category": "Color",
        "Help": "Represents a color in the form of rgba.",
        "ImportedHelp": "<member name=\"T:SharpDX.Color4\">\r\n  <summary>\r\n            Represents a color in the form of rgba.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.op_Inequality(SharpDX.Color4,SharpDX.Color4)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "Help": "Modulates two colors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.Modulate(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)\">\r\n  <summary>\r\n            Modulates two colors.\r\n            </summary>\r\n  <param name=\"left\">The first color to modulate.</param>\r\n  <param name=\"right\">The second color to modulate.</param>\r\n  <param name=\"result\">When the method completes, contains the modulated color.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first color to modulate.",
                "ImportedHelp": "<param name=\"left\">The first color to modulate.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second color to modulate.",
                "ImportedHelp": "<param name=\"right\">The second color to modulate.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, contains the modulated color.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the modulated color.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Modulate"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds two colors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.Add(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)\">\r\n  <summary>\r\n            Adds two colors.\r\n            </summary>\r\n  <param name=\"left\">The first color to add.</param>\r\n  <param name=\"right\">The second color to add.</param>\r\n  <param name=\"result\">When the method completes, completes the sum of the two colors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first color to add.",
                "ImportedHelp": "<param name=\"left\">The first color to add.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second color to add.",
                "ImportedHelp": "<param name=\"right\">The second color to add.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, completes the sum of the two colors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, completes the sum of the two colors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts two colors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.Subtract(SharpDX.Color4@,SharpDX.Color4@,SharpDX.Color4@)\">\r\n  <summary>\r\n            Subtracts two colors.\r\n            </summary>\r\n  <param name=\"left\">The first color to subtract.</param>\r\n  <param name=\"right\">The second color to subtract.</param>\r\n  <param name=\"result\">WHen the method completes, contains the difference of the two colors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first color to subtract.",
                "ImportedHelp": "<param name=\"left\">The first color to subtract.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second color to subtract.",
                "ImportedHelp": "<param name=\"right\">The second color to subtract.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "WHen the method completes, contains the difference of the two colors.",
                "ImportedHelp": "<param name=\"result\">WHen the method completes, contains the difference of the two colors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.op_Equality(SharpDX.Color4,SharpDX.Color4)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "A",
            "ShowCategory": true,
            "Help": "The alpha component of the color.",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.Alpha\">\r\n  <summary>\r\n            The alpha component of the color.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Alpha"
        },
        {
          "NodeAttribute": {
            "Name": "AdjustContrast",
            "Help": "Adjusts the contrast of a color.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.AdjustContrast(SharpDX.Color4@,System.Single,SharpDX.Color4@)\">\r\n  <summary>\r\n            Adjusts the contrast of a color.\r\n            </summary>\r\n  <param name=\"value\">The color whose contrast is to be adjusted.</param>\r\n  <param name=\"contrast\">The amount by which to adjust the contrast.</param>\r\n  <param name=\"result\">When the method completes, contains the adjusted color.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The color whose contrast is to be adjusted.",
                "ImportedHelp": "<param name=\"value\">The color whose contrast is to be adjusted.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The amount by which to adjust the contrast.",
                "ImportedHelp": "<param name=\"contrast\">The amount by which to adjust the contrast.</param>"
              },
              "DotNetName": "contrast"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, contains the adjusted color.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the adjusted color.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "AdjustContrast"
        },
        {
          "NodeAttribute": {
            "Name": "AdjustSaturation",
            "Help": "Adjusts the saturation of a color.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.AdjustSaturation(SharpDX.Color4@,System.Single,SharpDX.Color4@)\">\r\n  <summary>\r\n            Adjusts the saturation of a color.\r\n            </summary>\r\n  <param name=\"value\">The color whose saturation is to be adjusted.</param>\r\n  <param name=\"saturation\">The amount by which to adjust the saturation.</param>\r\n  <param name=\"result\">When the method completes, contains the adjusted color.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The color whose saturation is to be adjusted.",
                "ImportedHelp": "<param name=\"value\">The color whose saturation is to be adjusted.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The amount by which to adjust the saturation.",
                "ImportedHelp": "<param name=\"saturation\">The amount by which to adjust the saturation.</param>"
              },
              "DotNetName": "saturation"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, contains the adjusted color.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the adjusted color.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "AdjustSaturation"
        },
        {
          "NodeAttribute": {
            "Name": "B",
            "ShowCategory": true,
            "Help": "The blue component of the color.",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.Blue\">\r\n  <summary>\r\n            The blue component of the color.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Blue"
        },
        {
          "NodeAttribute": {
            "Name": "Black",
            "ShowCategory": true,
            "Help": "The Black color (0, 0, 0, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.Black\">\r\n  <summary>\r\n            The Black color (0, 0, 0, 1).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Black"
        },
        {
          "NodeAttribute": {
            "Name": "Complement",
            "Help": "Negates a color.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.Negate(SharpDX.Color4@,SharpDX.Color4@)\">\r\n  <summary>\r\n            Negates a color.\r\n            </summary>\r\n  <param name=\"value\">The color to negate.</param>\r\n  <param name=\"result\">When the method completes, contains the negated color.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The color to negate.",
                "ImportedHelp": "<param name=\"value\">The color to negate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, contains the negated color.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the negated color.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Negate"
        },
        {
          "NodeAttribute": {
            "Name": "FromInteger",
            "Help": "Initializes a new instance of the RGBA struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.#ctor(System.Int32)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Color4\" /> struct.\r\n            </summary>\r\n  <param name=\"rgba\">A packed integer containing all four color components in RGBA order.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "A packed integer containing all four color components in RGBA order.",
                "ImportedHelp": "<param name=\"rgba\">A packed integer containing all four color components in RGBA order.</param>"
              },
              "DotNetName": "rgba"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "G",
            "ShowCategory": true,
            "Help": "The green component of the color.",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.Green\">\r\n  <summary>\r\n            The green component of the color.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Green"
        },
        {
          "NodeAttribute": {
            "Name": "Premultiply",
            "Help": "Computes the premultiplied value of the provided color.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.Premultiply(SharpDX.Color4@,SharpDX.Color4@)\">\r\n  <summary>\r\n            Computes the premultiplied value of the provided color.\r\n            </summary>\r\n  <param name=\"value\">The non-premultiplied value.</param>\r\n  <param name=\"result\">The premultiplied result.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Help": "The non-premultiplied value.",
                "ImportedHelp": "<param name=\"value\">The non-premultiplied value.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "The premultiplied result.",
                "ImportedHelp": "<param name=\"result\">The premultiplied result.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Premultiply"
        },
        {
          "NodeAttribute": {
            "Name": "R",
            "ShowCategory": true,
            "Help": "The red component of the color.",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.Red\">\r\n  <summary>\r\n            The red component of the color.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Red"
        },
        {
          "NodeAttribute": {
            "Name": "RGBA",
            "Version": "Join Vector4",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the RGBA struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.#ctor(SharpDX.Vector4)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Color4\" /> struct.\r\n            </summary>\r\n  <param name=\"value\">The red, green, blue, and alpha components of the color.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The red, green, blue, and alpha components of the color.",
                "ImportedHelp": "<param name=\"value\">The red, green, blue, and alpha components of the color.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "SmoothStep",
            "Help": "Performs a cubic interpolation between two colors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.SmoothStep(SharpDX.Color4@,SharpDX.Color4@,System.Single,SharpDX.Color4@)\">\r\n  <summary>\r\n            Performs a cubic interpolation between two colors.\r\n            </summary>\r\n  <param name=\"start\">Start color.</param>\r\n  <param name=\"end\">End color.</param>\r\n  <param name=\"amount\">Value between 0 and 1 indicating the weight of <paramref name=\"end\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the cubic interpolation of the two colors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Help": "Start color.",
                "ImportedHelp": "<param name=\"start\">Start color.</param>"
              },
              "DotNetName": "start"
            },
            {
              "TypeFullName": "ref SharpDX.Color4",
              "PinAttribute": {
                "Help": "End color.",
                "ImportedHelp": "<param name=\"end\">End color.</param>"
              },
              "DotNetName": "end"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Value between 0 and 1 indicating the weight of End.",
                "ImportedHelp": "<param name=\"amount\">Value between 0 and 1 indicating the weight of <paramref name=\"end\" />.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Color4",
              "PinAttribute": {
                "Help": "When the method completes, contains the cubic interpolation of the two colors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the cubic interpolation of the two colors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "SmoothStep"
        },
        {
          "NodeAttribute": {
            "Name": "ToBytes",
            "Help": "Converts the color into a packed integer.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.ToBgra(System.Byte@,System.Byte@,System.Byte@,System.Byte@)\">\r\n  <summary>\r\n            Converts the color into a packed integer.\r\n            </summary>\r\n  <returns>A packed integer containing all four color components.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "out System.Byte",
              "PinDirection": 1,
              "DotNetName": "r"
            },
            {
              "TypeFullName": "out System.Byte",
              "PinDirection": 1,
              "DotNetName": "g"
            },
            {
              "TypeFullName": "out System.Byte",
              "PinDirection": 1,
              "DotNetName": "b"
            },
            {
              "TypeFullName": "out System.Byte",
              "PinDirection": 1,
              "DotNetName": "a"
            }
          ],
          "DotNetName": "ToBgra"
        },
        {
          "NodeAttribute": {
            "Name": "ToInteger",
            "Help": "Converts the color into a packed integer.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.ToRgba\">\r\n  <summary>\r\n            Converts the color into a packed integer.\r\n            </summary>\r\n  <returns>A packed integer containing all four color components.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Int32",
            "PinAttribute": {
              "Help": "A packed integer containing all four color components.",
              "ImportedHelp": "<returns>A packed integer containing all four color components.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToRgba"
        },
        {
          "NodeAttribute": {
            "Name": "ToVector3",
            "ShowCategory": true,
            "Help": "Performs an explicit conversion from RGBA to Vector3.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.op_Explicit(SharpDX.Color4)~SharpDX.Vector3\">\r\n  <summary>\r\n            Performs an explicit conversion from <see cref=\"T:SharpDX.Color4\" /> to <see cref=\"T:SharpDX.Vector3\" />.\r\n            </summary>\r\n  <param name=\"value\">The value.</param>\r\n  <returns>The result of the conversion.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The value.",
                "ImportedHelp": "<param name=\"value\">The value.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3",
            "PinAttribute": {
              "Help": "The result of the conversion.",
              "ImportedHelp": "<returns>The result of the conversion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Explicit"
        },
        {
          "NodeAttribute": {
            "Name": "ToVector4",
            "ShowCategory": true,
            "Help": "Performs an implicit conversion from RGBA to Vector4.",
            "ImportedHelp": "<member name=\"M:SharpDX.Color4.op_Implicit(SharpDX.Color4)~SharpDX.Vector4\">\r\n  <summary>\r\n            Performs an implicit conversion from <see cref=\"T:SharpDX.Color4\" /> to <see cref=\"T:SharpDX.Vector4\" />.\r\n            </summary>\r\n  <param name=\"value\">The value.</param>\r\n  <returns>The result of the conversion.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Color4",
              "PinAttribute": {
                "Help": "The value.",
                "ImportedHelp": "<param name=\"value\">The value.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector4",
            "PinAttribute": {
              "Help": "The result of the conversion.",
              "ImportedHelp": "<returns>The result of the conversion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Implicit"
        },
        {
          "NodeAttribute": {
            "Name": "White",
            "ShowCategory": true,
            "Help": "The White color (1, 1, 1, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Color4.White\">\r\n  <summary>\r\n            The White color (1, 1, 1, 1).\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "White"
        }
      ],
      "DotNetName": "SharpDX.Color4"
    },
    {
      "TypeAttribute": {
        "Name": "Ray",
        "Category": "3D",
        "Help": "Represents a three dimensional line based on a point in space and a direction.",
        "ImportedHelp": "<member name=\"T:SharpDX.Ray\">\r\n  <summary>\r\n            Represents a three dimensional line based on a point in space and a direction.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Ray.op_Inequality(SharpDX.Ray,SharpDX.Ray)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Ray",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Ray",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Ray.op_Equality(SharpDX.Ray,SharpDX.Ray)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Ray",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Ray",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Direction",
            "ShowCategory": true,
            "Help": "The normalized direction in which the ray points.",
            "ImportedHelp": "<member name=\"F:SharpDX.Ray.Direction\">\r\n  <summary>\r\n            The normalized direction in which the ray points.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Direction"
        },
        {
          "NodeAttribute": {
            "Name": "GetPickRay",
            "ShowCategory": true,
            "Help": "Calculates a world space Ray from 2d screen coordinates.",
            "ImportedHelp": "<member name=\"M:SharpDX.Ray.GetPickRay(System.Int32,System.Int32,SharpDX.ViewportF,SharpDX.Matrix)\">\r\n  <summary>\r\n            Calculates a world space <see cref=\"T:SharpDX.Ray\" /> from 2d screen coordinates.\r\n            </summary>\r\n  <param name=\"x\">X coordinate on 2d screen.</param>\r\n  <param name=\"y\">Y coordinate on 2d screen.</param>\r\n  <param name=\"viewport\">\r\n    <see cref=\"T:SharpDX.ViewportF\" />.</param>\r\n  <param name=\"worldViewProjection\">Transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <returns>Resulting <see cref=\"T:SharpDX.Ray\" />.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "X coordinate on 2d screen.",
                "ImportedHelp": "<param name=\"x\">X coordinate on 2d screen.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Int32",
              "PinAttribute": {
                "Help": "Y coordinate on 2d screen.",
                "ImportedHelp": "<param name=\"y\">Y coordinate on 2d screen.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "SharpDX.ViewportF",
              "PinAttribute": {
                "Help": "Viewport.",
                "ImportedHelp": "<param name=\"viewport\">\r\n  <see cref=\"T:SharpDX.ViewportF\" />.</param>"
              },
              "DotNetName": "viewport"
            },
            {
              "TypeFullName": "SharpDX.Matrix",
              "PinAttribute": {
                "Help": "Transformation Matrix.",
                "ImportedHelp": "<param name=\"worldViewProjection\">Transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "worldViewProjection"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Ray",
            "PinAttribute": {
              "Help": "Resulting Ray.",
              "ImportedHelp": "<returns>Resulting <see cref=\"T:SharpDX.Ray\" />.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "GetPickRay"
        },
        {
          "NodeAttribute": {
            "Name": "Position",
            "ShowCategory": true,
            "Help": "The position in three dimensional space where the ray starts.",
            "ImportedHelp": "<member name=\"F:SharpDX.Ray.Position\">\r\n  <summary>\r\n            The position in three dimensional space where the ray starts.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Position"
        },
        {
          "NodeAttribute": {
            "Name": "Ray",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Ray struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Ray.#ctor(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Ray\" /> struct.\r\n            </summary>\r\n  <param name=\"position\">The position in three dimensional space of the origin of the ray.</param>\r\n  <param name=\"direction\">The normalized direction of the ray.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The position in three dimensional space of the origin of the ray.",
                "ImportedHelp": "<param name=\"position\">The position in three dimensional space of the origin of the ray.</param>"
              },
              "DotNetName": "position"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The normalized direction of the ray.",
                "ImportedHelp": "<param name=\"direction\">The normalized direction of the ray.</param>"
              },
              "DotNetName": "direction"
            }
          ],
          "DotNetName": ".ctor"
        }
      ],
      "DotNetName": "SharpDX.Ray"
    },
    {
      "TypeAttribute": {
        "Name": "Rectangle",
        "Category": "2D",
        "Help": "Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as it is\n            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.",
        "ImportedHelp": "<member name=\"T:SharpDX.RectangleF\">\r\n  <summary>\r\n            Define a RectangleF. This structure is slightly different from System.Drawing.RectangleF as it is\r\n            internally storing Left,Top,Right,Bottom instead of Left,Top,Width,Height.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Implements the operator !=.",
            "ImportedHelp": "<member name=\"M:SharpDX.RectangleF.op_Inequality(SharpDX.RectangleF,SharpDX.RectangleF)\">\r\n  <summary>\r\n            Implements the operator !=.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>The result of the operator.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>The result of the operator.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Implements the operator ==.",
            "ImportedHelp": "<member name=\"M:SharpDX.RectangleF.op_Equality(SharpDX.RectangleF,SharpDX.RectangleF)\">\r\n  <summary>\r\n            Implements the operator ==.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>The result of the operator.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>The result of the operator.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Bottom",
            "ShowCategory": true,
            "Help": "The bottom.",
            "ImportedHelp": "<member name=\"F:SharpDX.RectangleF.Bottom\">\r\n  <summary>\r\n            The bottom.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Bottom"
        },
        {
          "NodeAttribute": {
            "Name": "BottomLeft",
            "ShowCategory": true,
            "Help": "Gets the position of the bottom-left corner of the rectangle.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.BottomLeft\">\r\n  <summary>\r\n            Gets the position of the bottom-left corner of the rectangle.\r\n            </summary>\r\n  <value>The bottom-left corner of the rectangle.</value>\r\n</member>"
          },
          "DotNetName": "BottomLeft"
        },
        {
          "NodeAttribute": {
            "Name": "BottomRight",
            "ShowCategory": true,
            "Help": "Gets the position of the bottom-right corner of the rectangle.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.BottomRight\">\r\n  <summary>\r\n            Gets the position of the bottom-right corner of the rectangle.\r\n            </summary>\r\n  <value>The bottom-right corner of the rectangle.</value>\r\n</member>"
          },
          "DotNetName": "BottomRight"
        },
        {
          "NodeAttribute": {
            "Name": "Center",
            "ShowCategory": true,
            "Help": "Gets the Point that specifies the center of the rectangle.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.Center\">\r\n  <summary>\r\n            Gets the Point that specifies the center of the rectangle.\r\n            </summary>\r\n  <value>\r\n            The center.\r\n            </value>\r\n</member>"
          },
          "DotNetName": "Center"
        },
        {
          "NodeAttribute": {
            "Name": "Empty",
            "ShowCategory": true,
            "Help": "An empty rectangle.",
            "ImportedHelp": "<member name=\"F:SharpDX.RectangleF.Empty\">\r\n  <summary>\r\n            An empty rectangle.\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Empty"
        },
        {
          "NodeAttribute": {
            "Name": "Intersection",
            "Help": "Creates a rectangle defining the area where one rectangle overlaps with another rectangle.",
            "ImportedHelp": "<member name=\"M:SharpDX.RectangleF.Intersect(SharpDX.RectangleF@,SharpDX.RectangleF@,SharpDX.RectangleF@)\">\r\n  <summary>Creates a rectangle defining the area where one rectangle overlaps with another rectangle.</summary>\r\n  <param name=\"value1\">The first rectangle to compare.</param>\r\n  <param name=\"value2\">The second rectangle to compare.</param>\r\n  <param name=\"result\">[OutAttribute] The area where the two first parameters overlap.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The first rectangle to compare.",
                "ImportedHelp": "<param name=\"value1\">The first rectangle to compare.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The second rectangle to compare.",
                "ImportedHelp": "<param name=\"value2\">The second rectangle to compare.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "out SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "[OutAttribute] The area where the two first parameters overlap.",
                "ImportedHelp": "<param name=\"result\">[OutAttribute] The area where the two first parameters overlap.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Intersect"
        },
        {
          "NodeAttribute": {
            "Name": "IsEmpty",
            "ShowCategory": true,
            "Help": "Gets a value that indicates whether the rectangle is empty.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.IsEmpty\">\r\n  <summary>\r\n            Gets a value that indicates whether the rectangle is empty.\r\n            </summary>\r\n  <value>\r\n    <c>true</c> if [is empty]; otherwise, <c>false</c>.\r\n            </value>\r\n</member>"
          },
          "DotNetName": "IsEmpty"
        },
        {
          "NodeAttribute": {
            "Name": "Left",
            "ShowCategory": true,
            "Help": "The left.",
            "ImportedHelp": "<member name=\"F:SharpDX.RectangleF.Left\">\r\n  <summary>\r\n            The left.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Left"
        },
        {
          "NodeAttribute": {
            "Name": "Rectangle",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Rectangle struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.RectangleF\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">The left.</param>\r\n  <param name=\"y\">The top.</param>\r\n  <param name=\"width\">The width.</param>\r\n  <param name=\"height\">The height.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Left",
                "Help": "The left.",
                "ImportedHelp": "<param name=\"x\">The left.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Name": "Top",
                "Help": "The top.",
                "ImportedHelp": "<param name=\"y\">The top.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The width.",
                "ImportedHelp": "<param name=\"width\">The width.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The height.",
                "ImportedHelp": "<param name=\"height\">The height.</param>"
              },
              "DotNetName": "height"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Right",
            "ShowCategory": true,
            "Help": "The right.",
            "ImportedHelp": "<member name=\"F:SharpDX.RectangleF.Right\">\r\n  <summary>\r\n            The right.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Right"
        },
        {
          "NodeAttribute": {
            "Name": "Top",
            "ShowCategory": true,
            "Help": "The top.",
            "ImportedHelp": "<member name=\"F:SharpDX.RectangleF.Top\">\r\n  <summary>\r\n            The top.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Top"
        },
        {
          "NodeAttribute": {
            "Name": "TopLeft",
            "ShowCategory": true,
            "Help": "Gets the position of the top-left corner of the rectangle.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.TopLeft\">\r\n  <summary>\r\n            Gets the position of the top-left corner of the rectangle.\r\n            </summary>\r\n  <value>The top-left corner of the rectangle.</value>\r\n</member>"
          },
          "DotNetName": "TopLeft"
        },
        {
          "NodeAttribute": {
            "Name": "TopRight",
            "ShowCategory": true,
            "Help": "Gets the position of the top-right corner of the rectangle.",
            "ImportedHelp": "<member name=\"P:SharpDX.RectangleF.TopRight\">\r\n  <summary>\r\n            Gets the position of the top-right corner of the rectangle.\r\n            </summary>\r\n  <value>The top-right corner of the rectangle.</value>\r\n</member>"
          },
          "DotNetName": "TopRight"
        },
        {
          "NodeAttribute": {
            "Name": "Union",
            "ShowCategory": true,
            "Help": "Creates a new rectangle that exactly contains two other rectangles.",
            "ImportedHelp": "<member name=\"M:SharpDX.RectangleF.Union(SharpDX.RectangleF@,SharpDX.RectangleF@,SharpDX.RectangleF@)\">\r\n  <summary>\r\n            Creates a new rectangle that exactly contains two other rectangles.\r\n            </summary>\r\n  <param name=\"value1\">The first rectangle to contain.</param>\r\n  <param name=\"value2\">The second rectangle to contain.</param>\r\n  <param name=\"result\">[OutAttribute] The rectangle that must be the union of the first two rectangles.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The first rectangle to contain.",
                "ImportedHelp": "<param name=\"value1\">The first rectangle to contain.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "The second rectangle to contain.",
                "ImportedHelp": "<param name=\"value2\">The second rectangle to contain.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "out SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "[OutAttribute] The rectangle that must be the union of the first two rectangles.",
                "ImportedHelp": "<param name=\"result\">[OutAttribute] The rectangle that must be the union of the first two rectangles.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Union"
        }
      ],
      "DotNetName": "SharpDX.RectangleF"
    },
    {
      "TypeAttribute": {
        "Name": "Sphere",
        "Category": "3D",
        "Help": "Represents a bounding sphere in three dimensional space.",
        "ImportedHelp": "<member name=\"T:SharpDX.BoundingSphere\">\r\n  <summary>\r\n            Represents a bounding sphere in three dimensional space.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.op_Inequality(SharpDX.BoundingSphere,SharpDX.BoundingSphere)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.op_Equality(SharpDX.BoundingSphere,SharpDX.BoundingSphere)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "Center",
            "Help": "The center of the sphere in three dimensional space.",
            "ImportedHelp": "<member name=\"F:SharpDX.BoundingSphere.Center\">\r\n  <summary>\r\n            The center of the sphere in three dimensional space.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Center"
        },
        {
          "NodeAttribute": {
            "Name": "FromBox",
            "ShowCategory": true,
            "Help": "Constructs a Sphere from a given box.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.FromBox(SharpDX.BoundingBox@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingSphere\" /> from a given box.\r\n            </summary>\r\n  <param name=\"box\">The box that will designate the extents of the sphere.</param>\r\n  <param name=\"result\">When the method completes, the newly constructed bounding sphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingBox",
              "PinAttribute": {
                "Help": "The box that will designate the extents of the sphere.",
                "ImportedHelp": "<param name=\"box\">The box that will designate the extents of the sphere.</param>"
              },
              "DotNetName": "box"
            },
            {
              "TypeFullName": "out SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "When the method completes, the newly constructed bounding sphere.",
                "ImportedHelp": "<param name=\"result\">When the method completes, the newly constructed bounding sphere.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "FromBox"
        },
        {
          "NodeAttribute": {
            "Name": "FromPointCloud",
            "ShowCategory": true,
            "Help": "Constructs a Sphere that fully contains the given points.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.FromPoints(SharpDX.Vector3[],SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingSphere\" /> that fully contains the given points.\r\n            </summary>\r\n  <param name=\"points\">The points that will be contained by the sphere.</param>\r\n  <param name=\"result\">When the method completes, contains the newly constructed bounding sphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3[]",
              "PinAttribute": {
                "Help": "The points that will be contained by the sphere.",
                "ImportedHelp": "<param name=\"points\">The points that will be contained by the sphere.</param>"
              },
              "DotNetName": "points"
            },
            {
              "TypeFullName": "out SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly constructed bounding sphere.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly constructed bounding sphere.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "FromPoints"
        },
        {
          "NodeAttribute": {
            "Name": "Merge",
            "ShowCategory": true,
            "Help": "Constructs a Sphere that is the as large as the total combined area of the two specified spheres.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.Merge(SharpDX.BoundingSphere@,SharpDX.BoundingSphere@,SharpDX.BoundingSphere@)\">\r\n  <summary>\r\n            Constructs a <see cref=\"T:SharpDX.BoundingSphere\" /> that is the as large as the total combined area of the two specified spheres.\r\n            </summary>\r\n  <param name=\"value1\">The first sphere to merge.</param>\r\n  <param name=\"value2\">The second sphere to merge.</param>\r\n  <param name=\"result\">When the method completes, contains the newly constructed bounding sphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The first sphere to merge.",
                "ImportedHelp": "<param name=\"value1\">The first sphere to merge.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "The second sphere to merge.",
                "ImportedHelp": "<param name=\"value2\">The second sphere to merge.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "out SharpDX.BoundingSphere",
              "PinAttribute": {
                "Help": "When the method completes, contains the newly constructed bounding sphere.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the newly constructed bounding sphere.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Merge"
        },
        {
          "NodeAttribute": {
            "Name": "Radius",
            "Help": "The radius of the sphere.",
            "ImportedHelp": "<member name=\"F:SharpDX.BoundingSphere.Radius\">\r\n  <summary>\r\n            The radius of the sphere.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Radius"
        },
        {
          "NodeAttribute": {
            "Name": "Sphere",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the AlignedBox struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.BoundingSphere.#ctor(SharpDX.Vector3,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.BoundingBox\" /> struct.\r\n            </summary>\r\n  <param name=\"center\">The center of the sphere in three dimensional space.</param>\r\n  <param name=\"radius\">The radius of the sphere.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The center of the sphere in three dimensional space.",
                "ImportedHelp": "<param name=\"center\">The center of the sphere in three dimensional space.</param>"
              },
              "DotNetName": "center"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The radius of the sphere.",
                "ImportedHelp": "<param name=\"radius\">The radius of the sphere.</param>"
              },
              "DotNetName": "radius"
            }
          ],
          "DotNetName": ".ctor"
        }
      ],
      "DotNetName": "SharpDX.BoundingSphere"
    },
    {
      "TypeAttribute": {
        "Name": "Vector2",
        "Category": "2D",
        "KnownTypeStructure": 4,
        "Help": "Represents a two dimensional mathematical vector.",
        "ImportedHelp": "<member name=\"T:SharpDX.Vector2\">\r\n  <summary>\r\n            Represents a two dimensional mathematical vector.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.op_Inequality(SharpDX.Vector2,SharpDX.Vector2)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "Help": "Multiplies a vector with another by performing component-wise multiplication.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Multiply(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Multiplies a vector with another by performing component-wise multiplication.\r\n            </summary>\r\n  <param name=\"left\">The first vector to multiply.</param>\r\n  <param name=\"right\">The second vector to multiply.</param>\r\n  <param name=\"result\">When the method completes, contains the multiplied vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to multiply.",
                "ImportedHelp": "<param name=\"left\">The first vector to multiply.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to multiply.",
                "ImportedHelp": "<param name=\"right\">The second vector to multiply.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the multiplied vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the multiplied vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Multiply"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Add(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Adds two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to add.</param>\r\n  <param name=\"right\">The second vector to add.</param>\r\n  <param name=\"result\">When the method completes, contains the sum of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to add.",
                "ImportedHelp": "<param name=\"left\">The first vector to add.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to add.",
                "ImportedHelp": "<param name=\"right\">The second vector to add.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the sum of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the sum of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Subtract(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Subtracts two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to subtract.</param>\r\n  <param name=\"right\">The second vector to subtract.</param>\r\n  <param name=\"result\">When the method completes, contains the difference of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to subtract.",
                "ImportedHelp": "<param name=\"left\">The first vector to subtract.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to subtract.",
                "ImportedHelp": "<param name=\"right\">The second vector to subtract.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the difference of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the difference of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Version": "Negate",
            "Help": "Reverses the direction of a given vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Negate(SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Reverses the direction of a given vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to negate.</param>\r\n  <param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to negate.",
                "ImportedHelp": "<param name=\"value\">The vector to negate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains a vector facing in the opposite direction.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Negate"
        },
        {
          "NodeAttribute": {
            "Name": "/",
            "Help": "Scales a vector by the given value.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.op_Division(SharpDX.Vector2,SharpDX.Vector2)\">\r\n  <summary>\r\n            Scales a vector by the given value.\r\n            </summary>\r\n  <param name=\"value\">The vector to scale.</param>\r\n  <param name=\"scale\">The amount by which to scale the vector.</param>\r\n  <returns>The scaled vector.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The vector to scale.",
                "ImportedHelp": "<param name=\"value\">The vector to scale.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The amount by which to scale the vector.",
                "ImportedHelp": "<param name=\"scale\">The amount by which to scale the vector.</param>"
              },
              "DotNetName": "scale"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector2",
            "PinAttribute": {
              "Help": "The scaled vector.",
              "ImportedHelp": "<returns>The scaled vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Division"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "ShowCategory": false,
            "Help": "Determines whether the specified Vector2 is equal to this instance.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Equals(SharpDX.Vector2@)\">\r\n  <summary>\r\n            Determines whether the specified <see cref=\"T:SharpDX.Vector2\" /> is equal to this instance.\r\n            </summary>\r\n  <param name=\"other\">The <see cref=\"T:SharpDX.Vector2\" /> to compare with this instance.</param>\r\n  <returns>\r\n    <c>true</c> if the specified <see cref=\"T:SharpDX.Vector2\" /> is equal to this instance; otherwise, <c>false</c>.\r\n            </returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The Vector2 to compare with this instance.",
                "ImportedHelp": "<param name=\"other\">The <see cref=\"T:SharpDX.Vector2\" /> to compare with this instance.</param>"
              },
              "DotNetName": "other"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if the specified Vector2 is equal to this instance; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if the specified <see cref=\"T:SharpDX.Vector2\" /> is equal to this instance; otherwise, <c>false</c>.\r\n            </returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Equals"
        },
        {
          "NodeAttribute": {
            "Name": "CatmullRom",
            "Help": "Performs a Catmull-Rom interpolation using the specified positions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.CatmullRom(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Performs a Catmull-Rom interpolation using the specified positions.\r\n            </summary>\r\n  <param name=\"value1\">The first position in the interpolation.</param>\r\n  <param name=\"value2\">The second position in the interpolation.</param>\r\n  <param name=\"value3\">The third position in the interpolation.</param>\r\n  <param name=\"value4\">The fourth position in the interpolation.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The first position in the interpolation.",
                "ImportedHelp": "<param name=\"value1\">The first position in the interpolation.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The second position in the interpolation.",
                "ImportedHelp": "<param name=\"value2\">The second position in the interpolation.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The third position in the interpolation.",
                "ImportedHelp": "<param name=\"value3\">The third position in the interpolation.</param>"
              },
              "DotNetName": "value3"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The fourth position in the interpolation.",
                "ImportedHelp": "<param name=\"value4\">The fourth position in the interpolation.</param>"
              },
              "DotNetName": "value4"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Catmull-Rom interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "CatmullRom"
        },
        {
          "NodeAttribute": {
            "Name": "Dot",
            "Help": "Calculates the dot product of two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Dot(SharpDX.Vector2@,SharpDX.Vector2@,System.Single@)\">\r\n  <summary>\r\n            Calculates the dot product of two vectors.\r\n            </summary>\r\n  <param name=\"left\">First source vector.</param>\r\n  <param name=\"right\">Second source vector.</param>\r\n  <param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "First source vector.",
                "ImportedHelp": "<param name=\"left\">First source vector.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "Second source vector.",
                "ImportedHelp": "<param name=\"right\">Second source vector.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the dot product of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Dot"
        },
        {
          "NodeAttribute": {
            "Name": "Hermite",
            "Help": "Performs a Hermite spline interpolation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Hermite(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@,System.Single,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Performs a Hermite spline interpolation.\r\n            </summary>\r\n  <param name=\"value1\">First source position vector.</param>\r\n  <param name=\"tangent1\">First source tangent vector.</param>\r\n  <param name=\"value2\">Second source position vector.</param>\r\n  <param name=\"tangent2\">Second source tangent vector.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "First source position vector.",
                "ImportedHelp": "<param name=\"value1\">First source position vector.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "First source tangent vector.",
                "ImportedHelp": "<param name=\"tangent1\">First source tangent vector.</param>"
              },
              "DotNetName": "tangent1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "Second source position vector.",
                "ImportedHelp": "<param name=\"value2\">Second source position vector.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "Second source tangent vector.",
                "ImportedHelp": "<param name=\"tangent2\">Second source tangent vector.</param>"
              },
              "DotNetName": "tangent2"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Hermite spline interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Hermite"
        },
        {
          "NodeAttribute": {
            "Name": "Length",
            "ShowCategory": false,
            "Help": "Calculates the length of the vector.\r\nRemarks: LengthSquared may be preferred when only the relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Length\">\r\n  <summary>\r\n            Calculates the length of the vector.\r\n            </summary>\r\n  <returns>The length of the vector.</returns>\r\n  <remarks>\r\n    <see cref=\"M:SharpDX.Vector2.LengthSquared\" /> may be preferred when only the relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The length of the vector.",
              "ImportedHelp": "<returns>The length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Length"
        },
        {
          "NodeAttribute": {
            "Name": "LengthSquared",
            "ShowCategory": false,
            "Help": "Calculates the squared length of the vector.\r\nRemarks: This method may be preferred to Length when only a relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.LengthSquared\">\r\n  <summary>\r\n            Calculates the squared length of the vector.\r\n            </summary>\r\n  <returns>The squared length of the vector.</returns>\r\n  <remarks>\r\n            This method may be preferred to <see cref=\"M:SharpDX.Vector2.Length\" /> when only a relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The squared length of the vector.",
              "ImportedHelp": "<returns>The squared length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LengthSquared"
        },
        {
          "NodeAttribute": {
            "Name": "Normalize",
            "Help": "Converts the vector into a unit vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Normalize(SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Converts the vector into a unit vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to normalize.</param>\r\n  <param name=\"result\">When the method completes, contains the normalized vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to normalize.",
                "ImportedHelp": "<param name=\"value\">The vector to normalize.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the normalized vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the normalized vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Normalize"
        },
        {
          "NodeAttribute": {
            "Name": "One",
            "ShowCategory": true,
            "Help": "A Vector2 with all of its components set to one.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.One\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector2\" /> with all of its components set to one.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "One"
        },
        {
          "NodeAttribute": {
            "Name": "Reflect",
            "Help": "Returns the reflection of a vector off a surface that has the specified normal.\r\nRemarks: Reflect only gives the direction of a reflection off a surface, it does not determine \n            whether the original vector was close enough to the surface to hit it.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Reflect(SharpDX.Vector2@,SharpDX.Vector2@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Returns the reflection of a vector off a surface that has the specified normal. \r\n            </summary>\r\n  <param name=\"vector\">The source vector.</param>\r\n  <param name=\"normal\">Normal of the surface.</param>\r\n  <param name=\"result\">When the method completes, contains the reflected vector.</param>\r\n  <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine \r\n            whether the original vector was close enough to the surface to hit it.</remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "The source vector.",
                "ImportedHelp": "<param name=\"vector\">The source vector.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Help": "Normal of the surface.",
                "ImportedHelp": "<param name=\"normal\">Normal of the surface.</param>"
              },
              "DotNetName": "normal"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the reflected vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the reflected vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Reflect"
        },
        {
          "NodeAttribute": {
            "Name": "Rotate",
            "Version": "Quaternion",
            "Help": "Transforms a 2D vector by the given Quaternion rotation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Transform(SharpDX.Vector2@,SharpDX.Quaternion@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Transforms a 2D vector by the given <see cref=\"T:SharpDX.Quaternion\" /> rotation.\r\n            </summary>\r\n  <param name=\"vector\">The vector to rotate.</param>\r\n  <param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to rotate.",
                "ImportedHelp": "<param name=\"vector\">The vector to rotate.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The Quaternion rotation to apply.",
                "ImportedHelp": "<param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>"
              },
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "ToArray",
            "Help": "Creates an array containing the elements of the vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.ToArray\">\r\n  <summary>\r\n            Creates an array containing the elements of the vector.\r\n            </summary>\r\n  <returns>A two-element array containing the components of the vector.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single[]",
            "PinAttribute": {
              "Help": "A two-element array containing the components of the vector.",
              "ImportedHelp": "<returns>A two-element array containing the components of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToArray"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Help": "Performs a coordinate transformation using the given Matrix.\r\nRemarks: A coordinate transform performs the transformation with the assumption that the w component\n            is one. The four dimensional vector obtained from the transformation operation has each\n            component in the vector divided by the w component. This forces the w component to be one and\n            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n            with coordinates as the w component can safely be ignored.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.TransformCoordinate(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Performs a coordinate transformation using the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"coordinate\">The coordinate vector to transform.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed coordinates.</param>\r\n  <remarks>\r\n            A coordinate transform performs the transformation with the assumption that the w component\r\n            is one. The four dimensional vector obtained from the transformation operation has each\r\n            component in the vector divided by the w component. This forces the w component to be one and\r\n            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\r\n            with coordinates as the w component can safely be ignored.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The coordinate vector to transform.",
                "ImportedHelp": "<param name=\"coordinate\">The coordinate vector to transform.</param>"
              },
              "DotNetName": "coordinate"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed coordinates.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed coordinates.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "TransformCoordinate"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Version": "Homogeneous",
            "Help": "Transforms a 2D vector by the given Matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.Transform(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Transforms a 2D vector by the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"vector\">The source vector.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The source vector.",
                "ImportedHelp": "<param name=\"vector\">The source vector.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Version": "Normal",
            "Help": "Performs a normal transformation using the given Matrix.\r\nRemarks: A normal transform performs the transformation with the assumption that the w component\n            is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n            end result is a vector that is not translated, but all other transformation properties\n            apply. This is often preferred for normal vectors as normals purely represent direction\n            rather than location because normal vectors should not be translated.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.TransformNormal(SharpDX.Vector2@,SharpDX.Matrix@,SharpDX.Vector2@)\">\r\n  <summary>\r\n            Performs a normal transformation using the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"normal\">The normal vector to transform.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed normal.</param>\r\n  <remarks>\r\n            A normal transform performs the transformation with the assumption that the w component\r\n            is zero. This causes the fourth row and fourth column of the matrix to be unused. The\r\n            end result is a vector that is not translated, but all other transformation properties\r\n            apply. This is often preferred for normal vectors as normals purely represent direction\r\n            rather than location because normal vectors should not be translated.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector2",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The normal vector to transform.",
                "ImportedHelp": "<param name=\"normal\">The normal vector to transform.</param>"
              },
              "DotNetName": "normal"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector2",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed normal.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed normal.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "TransformNormal"
        },
        {
          "NodeAttribute": {
            "Name": "UnitX",
            "ShowCategory": true,
            "Help": "The X unit Vector2 (1, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.UnitX\">\r\n  <summary>\r\n            The X unit <see cref=\"T:SharpDX.Vector2\" /> (1, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitX"
        },
        {
          "NodeAttribute": {
            "Name": "UnitY",
            "ShowCategory": true,
            "Help": "The Y unit Vector2 (0, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.UnitY\">\r\n  <summary>\r\n            The Y unit <see cref=\"T:SharpDX.Vector2\" /> (0, 1).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitY"
        },
        {
          "NodeAttribute": {
            "Name": "Vector",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Vector2 struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector2.#ctor(System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Vector2\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">Initial value for the X component of the vector.</param>\r\n  <param name=\"y\">Initial value for the Y component of the vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the X component of the vector.",
                "ImportedHelp": "<param name=\"x\">Initial value for the X component of the vector.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Y component of the vector.",
                "ImportedHelp": "<param name=\"y\">Initial value for the Y component of the vector.</param>"
              },
              "DotNetName": "y"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "X",
            "ShowCategory": true,
            "Help": "The X component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.X\">\r\n  <summary>\r\n            The X component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "X"
        },
        {
          "NodeAttribute": {
            "Name": "Y",
            "ShowCategory": true,
            "Help": "The Y component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.Y\">\r\n  <summary>\r\n            The Y component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Y"
        },
        {
          "NodeAttribute": {
            "Name": "Zero",
            "ShowCategory": true,
            "Help": "A Vector2 with all of its components set to zero.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector2.Zero\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector2\" /> with all of its components set to zero.\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Zero"
        }
      ],
      "DotNetName": "SharpDX.Vector2"
    },
    {
      "TypeAttribute": {
        "Name": "Vector3",
        "Category": "3D",
        "KnownTypeStructure": 8,
        "Help": "Represents a three dimensional mathematical vector.",
        "ImportedHelp": "<member name=\"T:SharpDX.Vector3\">\r\n  <summary>\r\n            Represents a three dimensional mathematical vector.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.op_Inequality(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "Help": "Multiply a vector with another by performing component-wise multiplication.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Multiply(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Multiply a vector with another by performing component-wise multiplication.\r\n            </summary>\r\n  <param name=\"left\">The first vector to multiply.</param>\r\n  <param name=\"right\">The second vector to multiply.</param>\r\n  <param name=\"result\">When the method completes, contains the multiplied vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to multiply.",
                "ImportedHelp": "<param name=\"left\">The first vector to multiply.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to multiply.",
                "ImportedHelp": "<param name=\"right\">The second vector to multiply.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the multiplied vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the multiplied vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Multiply"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Add(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Adds two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to add.</param>\r\n  <param name=\"right\">The second vector to add.</param>\r\n  <param name=\"result\">When the method completes, contains the sum of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to add.",
                "ImportedHelp": "<param name=\"left\">The first vector to add.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to add.",
                "ImportedHelp": "<param name=\"right\">The second vector to add.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the sum of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the sum of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Subtract(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Subtracts two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to subtract.</param>\r\n  <param name=\"right\">The second vector to subtract.</param>\r\n  <param name=\"result\">When the method completes, contains the difference of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to subtract.",
                "ImportedHelp": "<param name=\"left\">The first vector to subtract.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to subtract.",
                "ImportedHelp": "<param name=\"right\">The second vector to subtract.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the difference of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the difference of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Version": "Negate",
            "Help": "Reverses the direction of a given vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Negate(SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Reverses the direction of a given vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to negate.</param>\r\n  <param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to negate.",
                "ImportedHelp": "<param name=\"value\">The vector to negate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains a vector facing in the opposite direction.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Negate"
        },
        {
          "NodeAttribute": {
            "Name": "/",
            "Help": "Scales a vector by the given value.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.op_Division(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Scales a vector by the given value.\r\n            </summary>\r\n  <param name=\"value\">The vector to scale.</param>\r\n  <param name=\"scale\">The amount by which to scale the vector.</param>\r\n  <returns>The scaled vector.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The vector to scale.",
                "ImportedHelp": "<param name=\"value\">The vector to scale.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The amount by which to scale the vector.",
                "ImportedHelp": "<param name=\"scale\">The amount by which to scale the vector.</param>"
              },
              "DotNetName": "scale"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3",
            "PinAttribute": {
              "Help": "The scaled vector.",
              "ImportedHelp": "<returns>The scaled vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Division"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.op_Equality(SharpDX.Vector3,SharpDX.Vector3)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "CatmullRom",
            "Help": "Performs a Catmull-Rom interpolation using the specified positions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.CatmullRom(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Performs a Catmull-Rom interpolation using the specified positions.\r\n            </summary>\r\n  <param name=\"value1\">The first position in the interpolation.</param>\r\n  <param name=\"value2\">The second position in the interpolation.</param>\r\n  <param name=\"value3\">The third position in the interpolation.</param>\r\n  <param name=\"value4\">The fourth position in the interpolation.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The first position in the interpolation.",
                "ImportedHelp": "<param name=\"value1\">The first position in the interpolation.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The second position in the interpolation.",
                "ImportedHelp": "<param name=\"value2\">The second position in the interpolation.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The third position in the interpolation.",
                "ImportedHelp": "<param name=\"value3\">The third position in the interpolation.</param>"
              },
              "DotNetName": "value3"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The fourth position in the interpolation.",
                "ImportedHelp": "<param name=\"value4\">The fourth position in the interpolation.</param>"
              },
              "DotNetName": "value4"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Catmull-Rom interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "CatmullRom"
        },
        {
          "NodeAttribute": {
            "Name": "Cross",
            "Help": "Calculates the cross product of two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Cross(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Calculates the cross product of two vectors.\r\n            </summary>\r\n  <param name=\"left\">First source vector.</param>\r\n  <param name=\"right\">Second source vector.</param>\r\n  <param name=\"result\">When the method completes, contains he cross product of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "First source vector.",
                "ImportedHelp": "<param name=\"left\">First source vector.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "Second source vector.",
                "ImportedHelp": "<param name=\"right\">Second source vector.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains he cross product of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains he cross product of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Cross"
        },
        {
          "NodeAttribute": {
            "Name": "Dot",
            "Help": "Calculates the dot product of two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Dot(SharpDX.Vector3@,SharpDX.Vector3@,System.Single@)\">\r\n  <summary>\r\n            Calculates the dot product of two vectors.\r\n            </summary>\r\n  <param name=\"left\">First source vector.</param>\r\n  <param name=\"right\">Second source vector.</param>\r\n  <param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "First source vector.",
                "ImportedHelp": "<param name=\"left\">First source vector.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "Second source vector.",
                "ImportedHelp": "<param name=\"right\">Second source vector.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the dot product of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Dot"
        },
        {
          "NodeAttribute": {
            "Name": "Hermite",
            "Help": "Performs a Hermite spline interpolation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Hermite(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@,System.Single,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Performs a Hermite spline interpolation.\r\n            </summary>\r\n  <param name=\"value1\">First source position vector.</param>\r\n  <param name=\"tangent1\">First source tangent vector.</param>\r\n  <param name=\"value2\">Second source position vector.</param>\r\n  <param name=\"tangent2\">Second source tangent vector.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "First source position vector.",
                "ImportedHelp": "<param name=\"value1\">First source position vector.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "First source tangent vector.",
                "ImportedHelp": "<param name=\"tangent1\">First source tangent vector.</param>"
              },
              "DotNetName": "tangent1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Second source position vector.",
                "ImportedHelp": "<param name=\"value2\">Second source position vector.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Second source tangent vector.",
                "ImportedHelp": "<param name=\"tangent2\">Second source tangent vector.</param>"
              },
              "DotNetName": "tangent2"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Hermite spline interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Hermite"
        },
        {
          "NodeAttribute": {
            "Name": "Length",
            "ShowCategory": false,
            "Help": "Calculates the length of the vector.\r\nRemarks: LengthSquared may be preferred when only the relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Length\">\r\n  <summary>\r\n            Calculates the length of the vector.\r\n            </summary>\r\n  <returns>The length of the vector.</returns>\r\n  <remarks>\r\n    <see cref=\"M:SharpDX.Vector3.LengthSquared\" /> may be preferred when only the relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The length of the vector.",
              "ImportedHelp": "<returns>The length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Length"
        },
        {
          "NodeAttribute": {
            "Name": "LengthSquared",
            "ShowCategory": false,
            "Help": "Calculates the squared length of the vector.\r\nRemarks: This method may be preferred to Length when only a relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.LengthSquared\">\r\n  <summary>\r\n            Calculates the squared length of the vector.\r\n            </summary>\r\n  <returns>The squared length of the vector.</returns>\r\n  <remarks>\r\n            This method may be preferred to <see cref=\"M:SharpDX.Vector3.Length\" /> when only a relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The squared length of the vector.",
              "ImportedHelp": "<returns>The squared length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LengthSquared"
        },
        {
          "NodeAttribute": {
            "Name": "Normalize",
            "Help": "Converts the vector into a unit vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Normalize(SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Converts the vector into a unit vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to normalize.</param>\r\n  <param name=\"result\">When the method completes, contains the normalized vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to normalize.",
                "ImportedHelp": "<param name=\"value\">The vector to normalize.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the normalized vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the normalized vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Normalize"
        },
        {
          "NodeAttribute": {
            "Name": "One",
            "ShowCategory": true,
            "Help": "A Vector3 with all of its components set to one.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.One\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector3\" /> with all of its components set to one.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "One"
        },
        {
          "NodeAttribute": {
            "Name": "Reflect",
            "Help": "Returns the reflection of a vector off a surface that has the specified normal.\r\nRemarks: Reflect only gives the direction of a reflection off a surface, it does not determine \n            whether the original vector was close enough to the surface to hit it.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Reflect(SharpDX.Vector3@,SharpDX.Vector3@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Returns the reflection of a vector off a surface that has the specified normal. \r\n            </summary>\r\n  <param name=\"vector\">The source vector.</param>\r\n  <param name=\"normal\">Normal of the surface.</param>\r\n  <param name=\"result\">When the method completes, contains the reflected vector.</param>\r\n  <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine \r\n            whether the original vector was close enough to the surface to hit it.</remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The source vector.",
                "ImportedHelp": "<param name=\"vector\">The source vector.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "Normal of the surface.",
                "ImportedHelp": "<param name=\"normal\">Normal of the surface.</param>"
              },
              "DotNetName": "normal"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the reflected vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the reflected vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Reflect"
        },
        {
          "NodeAttribute": {
            "Name": "Rotate",
            "Version": "Quaternion",
            "Help": "Transforms a 3D vector by the given Quaternion rotation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Transform(SharpDX.Vector3@,SharpDX.Quaternion@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Transforms a 3D vector by the given <see cref=\"T:SharpDX.Quaternion\" /> rotation.\r\n            </summary>\r\n  <param name=\"vector\">The vector to rotate.</param>\r\n  <param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to rotate.",
                "ImportedHelp": "<param name=\"vector\">The vector to rotate.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The Quaternion rotation to apply.",
                "ImportedHelp": "<param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>"
              },
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "ToArray",
            "Help": "Creates an array containing the elements of the vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.ToArray\">\r\n  <summary>\r\n            Creates an array containing the elements of the vector.\r\n            </summary>\r\n  <returns>A three-element array containing the components of the vector.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single[]",
            "PinAttribute": {
              "Help": "A three-element array containing the components of the vector.",
              "ImportedHelp": "<returns>A three-element array containing the components of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToArray"
        },
        {
          "NodeAttribute": {
            "Name": "ToVector2",
            "ShowCategory": true,
            "Help": "Performs an explicit conversion from Vector3 to Vector2.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.op_Explicit(SharpDX.Vector3)~SharpDX.Vector2\">\r\n  <summary>\r\n            Performs an explicit conversion from <see cref=\"T:SharpDX.Vector3\" /> to <see cref=\"T:SharpDX.Vector2\" />.\r\n            </summary>\r\n  <param name=\"value\">The value.</param>\r\n  <returns>The result of the conversion.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The value.",
                "ImportedHelp": "<param name=\"value\">The value.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector2",
            "PinAttribute": {
              "Help": "The result of the conversion.",
              "ImportedHelp": "<returns>The result of the conversion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Explicit"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Help": "Performs a coordinate transformation using the given Matrix.\r\nRemarks: A coordinate transform performs the transformation with the assumption that the w component\n            is one. The four dimensional vector obtained from the transformation operation has each\n            component in the vector divided by the w component. This forces the w component to be one and\n            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\n            with coordinates as the w component can safely be ignored.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.TransformCoordinate(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Performs a coordinate transformation using the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"coordinate\">The coordinate vector to transform.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed coordinates.</param>\r\n  <remarks>\r\n            A coordinate transform performs the transformation with the assumption that the w component\r\n            is one. The four dimensional vector obtained from the transformation operation has each\r\n            component in the vector divided by the w component. This forces the w component to be one and\r\n            therefore makes the vector homogeneous. The homogeneous vector is often preferred when working\r\n            with coordinates as the w component can safely be ignored.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The coordinate vector to transform.",
                "ImportedHelp": "<param name=\"coordinate\">The coordinate vector to transform.</param>"
              },
              "DotNetName": "coordinate"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed coordinates.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed coordinates.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "TransformCoordinate"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Version": "Homogeneous",
            "Help": "Transforms a 3D vector by the given Matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.Transform(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Transforms a 3D vector by the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"vector\">The source vector.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The source vector.",
                "ImportedHelp": "<param name=\"vector\">The source vector.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Version": "Normal",
            "Help": "Performs a normal transformation using the given Matrix.\r\nRemarks: A normal transform performs the transformation with the assumption that the w component\n            is zero. This causes the fourth row and fourth column of the matrix to be unused. The\n            end result is a vector that is not translated, but all other transformation properties\n            apply. This is often preferred for normal vectors as normals purely represent direction\n            rather than location because normal vectors should not be translated.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.TransformNormal(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Performs a normal transformation using the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"normal\">The normal vector to transform.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed normal.</param>\r\n  <remarks>\r\n            A normal transform performs the transformation with the assumption that the w component\r\n            is zero. This causes the fourth row and fourth column of the matrix to be unused. The\r\n            end result is a vector that is not translated, but all other transformation properties\r\n            apply. This is often preferred for normal vectors as normals purely represent direction\r\n            rather than location because normal vectors should not be translated.\r\n            </remarks>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The normal vector to transform.",
                "ImportedHelp": "<param name=\"normal\">The normal vector to transform.</param>"
              },
              "DotNetName": "normal"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed normal.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed normal.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "TransformNormal"
        },
        {
          "NodeAttribute": {
            "Name": "UnitX",
            "ShowCategory": true,
            "Help": "The X unit Vector3 (1, 0, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.UnitX\">\r\n  <summary>\r\n            The X unit <see cref=\"T:SharpDX.Vector3\" /> (1, 0, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitX"
        },
        {
          "NodeAttribute": {
            "Name": "UnitY",
            "ShowCategory": true,
            "Help": "The Y unit Vector3 (0, 1, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.UnitY\">\r\n  <summary>\r\n            The Y unit <see cref=\"T:SharpDX.Vector3\" /> (0, 1, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitY"
        },
        {
          "NodeAttribute": {
            "Name": "UnitZ",
            "ShowCategory": true,
            "Help": "The Z unit Vector3 (0, 0, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.UnitZ\">\r\n  <summary>\r\n            The Z unit <see cref=\"T:SharpDX.Vector3\" /> (0, 0, 1).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitZ"
        },
        {
          "NodeAttribute": {
            "Name": "Vector",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Vector3 struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector3.#ctor(System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Vector3\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">Initial value for the X component of the vector.</param>\r\n  <param name=\"y\">Initial value for the Y component of the vector.</param>\r\n  <param name=\"z\">Initial value for the Z component of the vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the X component of the vector.",
                "ImportedHelp": "<param name=\"x\">Initial value for the X component of the vector.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Y component of the vector.",
                "ImportedHelp": "<param name=\"y\">Initial value for the Y component of the vector.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Z component of the vector.",
                "ImportedHelp": "<param name=\"z\">Initial value for the Z component of the vector.</param>"
              },
              "DotNetName": "z"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "X",
            "ShowCategory": true,
            "Help": "The X component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.X\">\r\n  <summary>\r\n            The X component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "X"
        },
        {
          "NodeAttribute": {
            "Name": "Y",
            "ShowCategory": true,
            "Help": "The Y component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.Y\">\r\n  <summary>\r\n            The Y component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Y"
        },
        {
          "NodeAttribute": {
            "Name": "Z",
            "ShowCategory": true,
            "Help": "The Z component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.Z\">\r\n  <summary>\r\n            The Z component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Z"
        },
        {
          "NodeAttribute": {
            "Name": "Zero",
            "ShowCategory": true,
            "Help": "A Vector3 with all of its components set to zero.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector3.Zero\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector3\" /> with all of its components set to zero.\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "Zero"
        }
      ],
      "DotNetName": "SharpDX.Vector3"
    },
    {
      "TypeAttribute": {
        "Name": "Vector4",
        "Category": "3D",
        "KnownTypeStructure": 16,
        "Help": "Represents a four dimensional mathematical vector.",
        "ImportedHelp": "<member name=\"T:SharpDX.Vector4\">\r\n  <summary>\r\n            Represents a four dimensional mathematical vector.\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Tests for inequality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.op_Inequality(SharpDX.Vector4,SharpDX.Vector4)\">\r\n  <summary>\r\n            Tests for inequality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has a different value than Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has a different value than <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "*",
            "Help": "Multiplies a vector with another by performing component-wise multiplication.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Multiply(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Multiplies a vector with another by performing component-wise multiplication.\r\n            </summary>\r\n  <param name=\"left\">The first vector to multiply.</param>\r\n  <param name=\"right\">The second vector to multiply.</param>\r\n  <param name=\"result\">When the method completes, contains the multiplied vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to multiply.",
                "ImportedHelp": "<param name=\"left\">The first vector to multiply.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to multiply.",
                "ImportedHelp": "<param name=\"right\">The second vector to multiply.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the multiplied vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the multiplied vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Multiply"
        },
        {
          "NodeAttribute": {
            "Name": "+",
            "Help": "Adds two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Add(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Adds two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to add.</param>\r\n  <param name=\"right\">The second vector to add.</param>\r\n  <param name=\"result\">When the method completes, contains the sum of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to add.",
                "ImportedHelp": "<param name=\"left\">The first vector to add.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to add.",
                "ImportedHelp": "<param name=\"right\">The second vector to add.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the sum of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the sum of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Add"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Help": "Subtracts two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Subtract(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Subtracts two vectors.\r\n            </summary>\r\n  <param name=\"left\">The first vector to subtract.</param>\r\n  <param name=\"right\">The second vector to subtract.</param>\r\n  <param name=\"result\">When the method completes, contains the difference of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The first vector to subtract.",
                "ImportedHelp": "<param name=\"left\">The first vector to subtract.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "The second vector to subtract.",
                "ImportedHelp": "<param name=\"right\">The second vector to subtract.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the difference of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the difference of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Subtract"
        },
        {
          "NodeAttribute": {
            "Name": "-",
            "Version": "Negate",
            "Help": "Reverses the direction of a given vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Negate(SharpDX.Vector4@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Reverses the direction of a given vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to negate.</param>\r\n  <param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to negate.",
                "ImportedHelp": "<param name=\"value\">The vector to negate.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains a vector facing in the opposite direction.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains a vector facing in the opposite direction.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Negate"
        },
        {
          "NodeAttribute": {
            "Name": "/",
            "Help": "Scales a vector by the given value.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.op_Division(SharpDX.Vector4,SharpDX.Vector4)\">\r\n  <summary>\r\n            Scales a vector by the given value.\r\n            </summary>\r\n  <param name=\"value\">The vector to scale.</param>\r\n  <param name=\"scale\">The amount by which to scale the vector.</param>\r\n  <returns>The scaled vector.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The vector to scale.",
                "ImportedHelp": "<param name=\"value\">The vector to scale.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The amount by which to scale the vector.",
                "ImportedHelp": "<param name=\"scale\">The amount by which to scale the vector.</param>"
              },
              "DotNetName": "scale"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector4",
            "PinAttribute": {
              "Help": "The scaled vector.",
              "ImportedHelp": "<returns>The scaled vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Division"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Tests for equality between two objects.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.op_Equality(SharpDX.Vector4,SharpDX.Vector4)\">\r\n  <summary>\r\n            Tests for equality between two objects.\r\n            </summary>\r\n  <param name=\"left\">The first value to compare.</param>\r\n  <param name=\"right\">The second value to compare.</param>\r\n  <returns>\r\n    <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The first value to compare.",
                "ImportedHelp": "<param name=\"left\">The first value to compare.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The second value to compare.",
                "ImportedHelp": "<param name=\"right\">The second value to compare.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "true if Input has the same value as Input 2; otherwise, false.",
              "ImportedHelp": "<returns>\r\n  <c>true</c> if <paramref name=\"left\" /> has the same value as <paramref name=\"right\" />; otherwise, <c>false</c>.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "CatmullRom",
            "Help": "Performs a Catmull-Rom interpolation using the specified positions.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.CatmullRom(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Performs a Catmull-Rom interpolation using the specified positions.\r\n            </summary>\r\n  <param name=\"value1\">The first position in the interpolation.</param>\r\n  <param name=\"value2\">The second position in the interpolation.</param>\r\n  <param name=\"value3\">The third position in the interpolation.</param>\r\n  <param name=\"value4\">The fourth position in the interpolation.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The first position in the interpolation.",
                "ImportedHelp": "<param name=\"value1\">The first position in the interpolation.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The second position in the interpolation.",
                "ImportedHelp": "<param name=\"value2\">The second position in the interpolation.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The third position in the interpolation.",
                "ImportedHelp": "<param name=\"value3\">The third position in the interpolation.</param>"
              },
              "DotNetName": "value3"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The fourth position in the interpolation.",
                "ImportedHelp": "<param name=\"value4\">The fourth position in the interpolation.</param>"
              },
              "DotNetName": "value4"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Catmull-Rom interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Catmull-Rom interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "CatmullRom"
        },
        {
          "NodeAttribute": {
            "Name": "Dot",
            "Help": "Calculates the dot product of two vectors.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Dot(SharpDX.Vector4@,SharpDX.Vector4@,System.Single@)\">\r\n  <summary>\r\n            Calculates the dot product of two vectors.\r\n            </summary>\r\n  <param name=\"left\">First source vector</param>\r\n  <param name=\"right\">Second source vector.</param>\r\n  <param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "First source vector",
                "ImportedHelp": "<param name=\"left\">First source vector</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input 2",
                "Help": "Second source vector.",
                "ImportedHelp": "<param name=\"right\">Second source vector.</param>"
              },
              "DotNetName": "right"
            },
            {
              "TypeFullName": "out System.Single",
              "PinAttribute": {
                "Help": "When the method completes, contains the dot product of the two vectors.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the dot product of the two vectors.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Dot"
        },
        {
          "NodeAttribute": {
            "Name": "Hermite",
            "Help": "Performs a Hermite spline interpolation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Hermite(SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,SharpDX.Vector4@,System.Single,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Performs a Hermite spline interpolation.\r\n            </summary>\r\n  <param name=\"value1\">First source position vector.</param>\r\n  <param name=\"tangent1\">First source tangent vector.</param>\r\n  <param name=\"value2\">Second source position vector.</param>\r\n  <param name=\"tangent2\">Second source tangent vector.</param>\r\n  <param name=\"amount\">Weighting factor.</param>\r\n  <param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "First source position vector.",
                "ImportedHelp": "<param name=\"value1\">First source position vector.</param>"
              },
              "DotNetName": "value1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "First source tangent vector.",
                "ImportedHelp": "<param name=\"tangent1\">First source tangent vector.</param>"
              },
              "DotNetName": "tangent1"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "Second source position vector.",
                "ImportedHelp": "<param name=\"value2\">Second source position vector.</param>"
              },
              "DotNetName": "value2"
            },
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Help": "Second source tangent vector.",
                "ImportedHelp": "<param name=\"tangent2\">Second source tangent vector.</param>"
              },
              "DotNetName": "tangent2"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Weighting factor.",
                "ImportedHelp": "<param name=\"amount\">Weighting factor.</param>"
              },
              "DotNetName": "amount"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the result of the Hermite spline interpolation.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the result of the Hermite spline interpolation.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Hermite"
        },
        {
          "NodeAttribute": {
            "Name": "Length",
            "ShowCategory": false,
            "Help": "Calculates the length of the vector.\r\nRemarks: LengthSquared may be preferred when only the relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Length\">\r\n  <summary>\r\n            Calculates the length of the vector.\r\n            </summary>\r\n  <returns>The length of the vector.</returns>\r\n  <remarks>\r\n    <see cref=\"M:SharpDX.Vector4.LengthSquared\" /> may be preferred when only the relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The length of the vector.",
              "ImportedHelp": "<returns>The length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "Length"
        },
        {
          "NodeAttribute": {
            "Name": "LengthSquared",
            "ShowCategory": false,
            "Help": "Calculates the squared length of the vector.\r\nRemarks: This method may be preferred to Length when only a relative length is needed\n            and speed is of the essence.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.LengthSquared\">\r\n  <summary>\r\n            Calculates the squared length of the vector.\r\n            </summary>\r\n  <returns>The squared length of the vector.</returns>\r\n  <remarks>\r\n            This method may be preferred to <see cref=\"M:SharpDX.Vector4.Length\" /> when only a relative length is needed\r\n            and speed is of the essence.\r\n            </remarks>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single",
            "PinAttribute": {
              "Help": "The squared length of the vector.",
              "ImportedHelp": "<returns>The squared length of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "LengthSquared"
        },
        {
          "NodeAttribute": {
            "Name": "Normalize",
            "Help": "Converts the vector into a unit vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Normalize(SharpDX.Vector4@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Converts the vector into a unit vector.\r\n            </summary>\r\n  <param name=\"value\">The vector to normalize.</param>\r\n  <param name=\"result\">When the method completes, contains the normalized vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to normalize.",
                "ImportedHelp": "<param name=\"value\">The vector to normalize.</param>"
              },
              "DotNetName": "value"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the normalized vector.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the normalized vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Normalize"
        },
        {
          "NodeAttribute": {
            "Name": "One",
            "ShowCategory": true,
            "Help": "A Vector4 with all of its components set to one.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.One\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector4\" /> with all of its components set to one.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "One"
        },
        {
          "NodeAttribute": {
            "Name": "Rotate",
            "Version": "Quaternion",
            "Help": "Transforms a 4D vector by the given Quaternion rotation.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Transform(SharpDX.Vector4@,SharpDX.Quaternion@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Transforms a 4D vector by the given <see cref=\"T:SharpDX.Quaternion\" /> rotation.\r\n            </summary>\r\n  <param name=\"vector\">The vector to rotate.</param>\r\n  <param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The vector to rotate.",
                "ImportedHelp": "<param name=\"vector\">The vector to rotate.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Quaternion",
              "PinAttribute": {
                "Help": "The Quaternion rotation to apply.",
                "ImportedHelp": "<param name=\"rotation\">The <see cref=\"T:SharpDX.Quaternion\" /> rotation to apply.</param>"
              },
              "DotNetName": "rotation"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "ToArray",
            "Help": "Creates an array containing the elements of the vector.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.ToArray\">\r\n  <summary>\r\n            Creates an array containing the elements of the vector.\r\n            </summary>\r\n  <returns>A four-element array containing the components of the vector.</returns>\r\n</member>"
          },
          "ReturnValue": {
            "TypeFullName": "System.Single[]",
            "PinAttribute": {
              "Help": "A four-element array containing the components of the vector.",
              "ImportedHelp": "<returns>A four-element array containing the components of the vector.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "ToArray"
        },
        {
          "NodeAttribute": {
            "Name": "ToVector2",
            "ShowCategory": true,
            "Help": "Performs an explicit conversion from Vector4 to Vector2.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.op_Explicit(SharpDX.Vector4)~SharpDX.Vector2\">\r\n  <summary>\r\n            Performs an explicit conversion from <see cref=\"T:SharpDX.Vector4\" /> to <see cref=\"T:SharpDX.Vector2\" />.\r\n            </summary>\r\n  <param name=\"value\">The value.</param>\r\n  <returns>The result of the conversion.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The value.",
                "ImportedHelp": "<param name=\"value\">The value.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector2",
            "PinAttribute": {
              "Help": "The result of the conversion.",
              "ImportedHelp": "<returns>The result of the conversion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Explicit"
        },
        {
          "NodeAttribute": {
            "Name": "ToVector3",
            "ShowCategory": true,
            "Help": "Performs an explicit conversion from Vector4 to Vector3.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.op_Explicit(SharpDX.Vector4)~SharpDX.Vector3\">\r\n  <summary>\r\n            Performs an explicit conversion from <see cref=\"T:SharpDX.Vector4\" /> to <see cref=\"T:SharpDX.Vector3\" />.\r\n            </summary>\r\n  <param name=\"value\">The value.</param>\r\n  <returns>The result of the conversion.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.Vector4",
              "PinAttribute": {
                "Help": "The value.",
                "ImportedHelp": "<param name=\"value\">The value.</param>"
              },
              "DotNetName": "value"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "SharpDX.Vector3",
            "PinAttribute": {
              "Help": "The result of the conversion.",
              "ImportedHelp": "<returns>The result of the conversion.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Explicit"
        },
        {
          "NodeAttribute": {
            "Name": "Transform",
            "Help": "Transforms a 4D vector by the given Matrix.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.Transform(SharpDX.Vector4@,SharpDX.Matrix@,SharpDX.Vector4@)\">\r\n  <summary>\r\n            Transforms a 4D vector by the given <see cref=\"T:SharpDX.Matrix\" />.\r\n            </summary>\r\n  <param name=\"vector\">The source vector.</param>\r\n  <param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>\r\n  <param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector4",
              "PinAttribute": {
                "Name": "Input",
                "Help": "The source vector.",
                "ImportedHelp": "<param name=\"vector\">The source vector.</param>"
              },
              "DotNetName": "vector"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "The transformation Matrix.",
                "ImportedHelp": "<param name=\"transform\">The transformation <see cref=\"T:SharpDX.Matrix\" />.</param>"
              },
              "DotNetName": "transform"
            },
            {
              "TypeFullName": "out SharpDX.Vector4",
              "PinAttribute": {
                "Help": "When the method completes, contains the transformed Vector4.",
                "ImportedHelp": "<param name=\"result\">When the method completes, contains the transformed <see cref=\"T:SharpDX.Vector4\" />.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "result"
            }
          ],
          "DotNetName": "Transform"
        },
        {
          "NodeAttribute": {
            "Name": "UnitW",
            "ShowCategory": true,
            "Help": "The W unit Vector4 (0, 0, 0, 1).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.UnitW\">\r\n  <summary>\r\n            The W unit <see cref=\"T:SharpDX.Vector4\" /> (0, 0, 0, 1).\r\n            </summary>\r\n</member>",
            "IsDefaultValue": true
          },
          "DotNetName": "UnitW"
        },
        {
          "NodeAttribute": {
            "Name": "UnitX",
            "ShowCategory": true,
            "Help": "The X unit Vector4 (1, 0, 0, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.UnitX\">\r\n  <summary>\r\n            The X unit <see cref=\"T:SharpDX.Vector4\" /> (1, 0, 0, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitX"
        },
        {
          "NodeAttribute": {
            "Name": "UnitY",
            "ShowCategory": true,
            "Help": "The Y unit Vector4 (0, 1, 0, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.UnitY\">\r\n  <summary>\r\n            The Y unit <see cref=\"T:SharpDX.Vector4\" /> (0, 1, 0, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitY"
        },
        {
          "NodeAttribute": {
            "Name": "UnitZ",
            "ShowCategory": true,
            "Help": "The Z unit Vector4 (0, 0, 1, 0).",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.UnitZ\">\r\n  <summary>\r\n            The Z unit <see cref=\"T:SharpDX.Vector4\" /> (0, 0, 1, 0).\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "UnitZ"
        },
        {
          "NodeAttribute": {
            "Name": "Vector",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Vector4 struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.Vector4\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">Initial value for the X component of the vector.</param>\r\n  <param name=\"y\">Initial value for the Y component of the vector.</param>\r\n  <param name=\"z\">Initial value for the Z component of the vector.</param>\r\n  <param name=\"w\">Initial value for the W component of the vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the X component of the vector.",
                "ImportedHelp": "<param name=\"x\">Initial value for the X component of the vector.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Y component of the vector.",
                "ImportedHelp": "<param name=\"y\">Initial value for the Y component of the vector.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the Z component of the vector.",
                "ImportedHelp": "<param name=\"z\">Initial value for the Z component of the vector.</param>"
              },
              "DotNetName": "z"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "Initial value for the W component of the vector.",
                "ImportedHelp": "<param name=\"w\">Initial value for the W component of the vector.</param>"
              },
              "DotNetName": "w"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "W",
            "ShowCategory": true,
            "Help": "The W component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.W\">\r\n  <summary>\r\n            The W component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "W"
        },
        {
          "NodeAttribute": {
            "Name": "X",
            "ShowCategory": true,
            "Help": "The X component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.X\">\r\n  <summary>\r\n            The X component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "X"
        },
        {
          "NodeAttribute": {
            "Name": "Y",
            "ShowCategory": true,
            "Help": "The Y component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.Y\">\r\n  <summary>\r\n            The Y component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Y"
        },
        {
          "NodeAttribute": {
            "Name": "Z",
            "ShowCategory": true,
            "Help": "The Z component of the vector.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.Z\">\r\n  <summary>\r\n            The Z component of the vector.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Z"
        },
        {
          "NodeAttribute": {
            "Name": "Zero",
            "ShowCategory": true,
            "Help": "A Vector4 with all of its components set to zero.",
            "ImportedHelp": "<member name=\"F:SharpDX.Vector4.Zero\">\r\n  <summary>\r\n            A <see cref=\"T:SharpDX.Vector4\" /> with all of its components set to zero.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Zero"
        }
      ],
      "DotNetName": "SharpDX.Vector4"
    },
    {
      "TypeAttribute": {
        "Name": "Viewport",
        "Category": "3D",
        "Help": "Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).",
        "ImportedHelp": "<member name=\"T:SharpDX.ViewportF\">\r\n  <summary>\r\n            Defines the viewport dimensions using float coordinates for (X,Y,Width,Height).\r\n            </summary>\r\n</member>",
        "IsImmutable": true
      },
      "Members": [
        {
          "NodeAttribute": {
            "Name": "!=",
            "Help": "Implements the operator !=.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.op_Inequality(SharpDX.ViewportF,SharpDX.ViewportF)\">\r\n  <summary>\r\n            Implements the operator !=.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>The result of the operator.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.ViewportF",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.ViewportF",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>The result of the operator.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Inequality"
        },
        {
          "NodeAttribute": {
            "Name": "=",
            "Help": "Implements the operator ==.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.op_Equality(SharpDX.ViewportF,SharpDX.ViewportF)\">\r\n  <summary>\r\n            Implements the operator ==.\r\n            </summary>\r\n  <param name=\"left\">The left.</param>\r\n  <param name=\"right\">The right.</param>\r\n  <returns>The result of the operator.</returns>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.ViewportF",
              "PinAttribute": {
                "Help": "The left.",
                "ImportedHelp": "<param name=\"left\">The left.</param>"
              },
              "DotNetName": "left"
            },
            {
              "TypeFullName": "SharpDX.ViewportF",
              "PinAttribute": {
                "Help": "The right.",
                "ImportedHelp": "<param name=\"right\">The right.</param>"
              },
              "DotNetName": "right"
            }
          ],
          "ReturnValue": {
            "TypeFullName": "System.Boolean",
            "PinAttribute": {
              "Help": "The result of the operator.",
              "ImportedHelp": "<returns>The result of the operator.</returns>"
            },
            "PinDirection": 1,
            "DotNetName": "return"
          },
          "DotNetName": "op_Equality"
        },
        {
          "NodeAttribute": {
            "Name": "AspectRatio",
            "ShowCategory": true,
            "Help": "Gets the aspect ratio used by the viewport.",
            "ImportedHelp": "<member name=\"P:SharpDX.ViewportF.AspectRatio\">\r\n  <summary>\r\n            Gets the aspect ratio used by the viewport.\r\n            </summary>\r\n  <value>The aspect ratio.</value>\r\n</member>"
          },
          "DotNetName": "AspectRatio"
        },
        {
          "NodeAttribute": {
            "Name": "Bounds",
            "ShowCategory": true,
            "Help": "Gets the size of this resource.",
            "ImportedHelp": "<member name=\"P:SharpDX.ViewportF.Bounds\">\r\n  <summary>\r\n            Gets the size of this resource.\r\n            </summary>\r\n  <value>The bounds.</value>\r\n</member>"
          },
          "DotNetName": "Bounds"
        },
        {
          "NodeAttribute": {
            "Name": "Height",
            "ShowCategory": true,
            "Help": "Height dimension of the viewport.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.Height\">\r\n  <summary>\r\n            Height dimension of the viewport.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Height"
        },
        {
          "NodeAttribute": {
            "Name": "MaxDepth",
            "ShowCategory": true,
            "Help": "Gets or sets the maximum depth of the clip volume.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.MaxDepth\">\r\n  <summary>\r\n            Gets or sets the maximum depth of the clip volume.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "MaxDepth"
        },
        {
          "NodeAttribute": {
            "Name": "MinDepth",
            "ShowCategory": true,
            "Help": "Gets or sets the minimum depth of the clip volume.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.MinDepth\">\r\n  <summary>\r\n            Gets or sets the minimum depth of the clip volume.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "MinDepth"
        },
        {
          "NodeAttribute": {
            "Name": "Project",
            "Help": "Projects a 3D vector from object space into screen space.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.Project(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Projects a 3D vector from object space into screen space.\r\n            </summary>\r\n  <param name=\"source\">The vector to project.</param>\r\n  <param name=\"matrix\">A combined WorldViewProjection matrix.</param>\r\n  <param name=\"vector\">The projected vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The vector to project.",
                "ImportedHelp": "<param name=\"source\">The vector to project.</param>"
              },
              "DotNetName": "source"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "A combined WorldViewProjection matrix.",
                "ImportedHelp": "<param name=\"matrix\">A combined WorldViewProjection matrix.</param>"
              },
              "DotNetName": "matrix"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The projected vector.",
                "ImportedHelp": "<param name=\"vector\">The projected vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "vector"
            }
          ],
          "DotNetName": "Project"
        },
        {
          "NodeAttribute": {
            "Name": "Unproject",
            "Help": "Converts a screen space point into a corresponding point in world space.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.Unproject(SharpDX.Vector3@,SharpDX.Matrix@,SharpDX.Vector3@)\">\r\n  <summary>\r\n            Converts a screen space point into a corresponding point in world space.\r\n            </summary>\r\n  <param name=\"source\">The vector to project.</param>\r\n  <param name=\"matrix\">An inverted combined WorldViewProjection matrix.</param>\r\n  <param name=\"vector\">The unprojected vector.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "ref SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The vector to project.",
                "ImportedHelp": "<param name=\"source\">The vector to project.</param>"
              },
              "DotNetName": "source"
            },
            {
              "TypeFullName": "ref SharpDX.Matrix",
              "PinAttribute": {
                "Help": "An inverted combined WorldViewProjection matrix.",
                "ImportedHelp": "<param name=\"matrix\">An inverted combined WorldViewProjection matrix.</param>"
              },
              "DotNetName": "matrix"
            },
            {
              "TypeFullName": "out SharpDX.Vector3",
              "PinAttribute": {
                "Help": "The unprojected vector.",
                "ImportedHelp": "<param name=\"vector\">The unprojected vector.</param>"
              },
              "PinDirection": 1,
              "DotNetName": "vector"
            }
          ],
          "DotNetName": "Unproject"
        },
        {
          "NodeAttribute": {
            "Name": "Viewport",
            "Version": "Join",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Viewport struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.ViewportF\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">The x coordinate of the upper-left corner of the viewport in pixels.</param>\r\n  <param name=\"y\">The y coordinate of the upper-left corner of the viewport in pixels.</param>\r\n  <param name=\"width\">The width of the viewport in pixels.</param>\r\n  <param name=\"height\">The height of the viewport in pixels.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The x coordinate of the upper-left corner of the viewport in pixels.",
                "ImportedHelp": "<param name=\"x\">The x coordinate of the upper-left corner of the viewport in pixels.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The y coordinate of the upper-left corner of the viewport in pixels.",
                "ImportedHelp": "<param name=\"y\">The y coordinate of the upper-left corner of the viewport in pixels.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The width of the viewport in pixels.",
                "ImportedHelp": "<param name=\"width\">The width of the viewport in pixels.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The height of the viewport in pixels.",
                "ImportedHelp": "<param name=\"height\">The height of the viewport in pixels.</param>"
              },
              "DotNetName": "height"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Viewport",
            "Version": "Join Depth",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Viewport struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.ViewportF\" /> struct.\r\n            </summary>\r\n  <param name=\"x\">The x coordinate of the upper-left corner of the viewport in pixels.</param>\r\n  <param name=\"y\">The y coordinate of the upper-left corner of the viewport in pixels.</param>\r\n  <param name=\"width\">The width of the viewport in pixels.</param>\r\n  <param name=\"height\">The height of the viewport in pixels.</param>\r\n  <param name=\"minDepth\">The minimum depth of the clip volume.</param>\r\n  <param name=\"maxDepth\">The maximum depth of the clip volume.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The x coordinate of the upper-left corner of the viewport in pixels.",
                "ImportedHelp": "<param name=\"x\">The x coordinate of the upper-left corner of the viewport in pixels.</param>"
              },
              "DotNetName": "x"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The y coordinate of the upper-left corner of the viewport in pixels.",
                "ImportedHelp": "<param name=\"y\">The y coordinate of the upper-left corner of the viewport in pixels.</param>"
              },
              "DotNetName": "y"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The width of the viewport in pixels.",
                "ImportedHelp": "<param name=\"width\">The width of the viewport in pixels.</param>"
              },
              "DotNetName": "width"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The height of the viewport in pixels.",
                "ImportedHelp": "<param name=\"height\">The height of the viewport in pixels.</param>"
              },
              "DotNetName": "height"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The minimum depth of the clip volume.",
                "ImportedHelp": "<param name=\"minDepth\">The minimum depth of the clip volume.</param>"
              },
              "DotNetName": "minDepth"
            },
            {
              "TypeFullName": "System.Single",
              "PinAttribute": {
                "Help": "The maximum depth of the clip volume.",
                "ImportedHelp": "<param name=\"maxDepth\">The maximum depth of the clip volume.</param>"
              },
              "DotNetName": "maxDepth"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Viewport",
            "Version": "Join Rectangle",
            "ShowCategory": false,
            "Help": "Initializes a new instance of the Viewport struct.",
            "ImportedHelp": "<member name=\"M:SharpDX.ViewportF.#ctor(SharpDX.RectangleF)\">\r\n  <summary>\r\n            Initializes a new instance of the <see cref=\"T:SharpDX.ViewportF\" /> struct.\r\n            </summary>\r\n  <param name=\"bounds\">A bounding box that defines the location and size of the viewport in a render target.</param>\r\n</member>"
          },
          "Parameters": [
            {
              "TypeFullName": "SharpDX.RectangleF",
              "PinAttribute": {
                "Help": "A bounding box that defines the location and size of the viewport in a render target.",
                "ImportedHelp": "<param name=\"bounds\">A bounding box that defines the location and size of the viewport in a render target.</param>"
              },
              "DotNetName": "bounds"
            }
          ],
          "DotNetName": ".ctor"
        },
        {
          "NodeAttribute": {
            "Name": "Width",
            "ShowCategory": true,
            "Help": "Width dimension of the viewport.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.Width\">\r\n  <summary>\r\n            Width dimension of the viewport.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Width"
        },
        {
          "NodeAttribute": {
            "Name": "X",
            "ShowCategory": true,
            "Help": "Position of the pixel coordinate of the upper-left corner of the viewport.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.X\">\r\n  <summary>\r\n            Position of the pixel coordinate of the upper-left corner of the viewport.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "X"
        },
        {
          "NodeAttribute": {
            "Name": "Y",
            "ShowCategory": true,
            "Help": "Position of the pixel coordinate of the upper-left corner of the viewport.",
            "ImportedHelp": "<member name=\"F:SharpDX.ViewportF.Y\">\r\n  <summary>\r\n            Position of the pixel coordinate of the upper-left corner of the viewport.\r\n            </summary>\r\n</member>"
          },
          "DotNetName": "Y"
        }
      ],
      "DotNetName": "SharpDX.ViewportF"
    }
  ],
  "DotNetName": "SharpDX.Mathematics, Version=3.1.1.0, Culture=neutral, PublicKeyToken=b4dcf0f35e5521f1"
}